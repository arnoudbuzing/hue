(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1164833,      21112]
NotebookOptionsPosition[   1158093,      20943]
NotebookOutlinePosition[   1158466,      20959]
CellTagsIndexPosition[   1158423,      20956]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Philips Hue Project", "Title",
 CellChangeTimes->{{3.708802134512233*^9, 
  3.7088021394866004`*^9}},ExpressionUUID->"0fe64235-a6a3-4d56-9c27-\
bf96ba3f9f99"],

Cell[TextData[{
 "The ip address for you Philips Hue is unique to your network. Follow the \
instructions on the ",
 ButtonBox["Philips Hue web site",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.developers.meethue.com/documentation/getting-started"], 
    None},
  ButtonNote->
   "https://www.developers.meethue.com/documentation/getting-started"],
 " to get help on determining your ip address:"
}], "Text",
 CellChangeTimes->{{3.708801999512947*^9, 3.7088020323477807`*^9}, {
  3.708802085415846*^9, 
  3.708802128411396*^9}},ExpressionUUID->"ce0ea48e-1879-4afc-92aa-\
dcccfcadc450"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hueip", "=", "\"\<http://192.168.1.75\>\""}]], "Input",
 CellChangeTimes->{{3.7087261752621636`*^9, 3.708726184995286*^9}, {
  3.7088021573841324`*^9, 3.7088021705375233`*^9}, {3.7088025336228495`*^9, 
  3.708802535806614*^9}, {3.708802574019538*^9, 
  3.708802576989921*^9}},ExpressionUUID->"87d838e0-3d3f-464a-a8b5-\
871f7631244a"],

Cell[BoxData["\<\"http://192.168.1.75\"\>"], "Output",
 CellChangeTimes->{3.708802577721035*^9, 
  3.7088061036645923`*^9},ExpressionUUID->"ef5dc7a2-ec28-440a-bd51-\
d0169a307474"]
}, Open  ]],

Cell["This base url is shared by all api calls:", "Text",
 CellChangeTimes->{{3.7088025505568013`*^9, 
  3.7088025670881357`*^9}},ExpressionUUID->"6e5b60d7-31a5-45a4-bd60-\
a09024e94e1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"baseurl", "=", 
  RowBox[{"URLBuild", "[", 
   RowBox[{"{", 
    RowBox[{"hueip", ",", "\"\<api\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.708802423997051*^9, 3.708802426381744*^9}, {
  3.7088024634166164`*^9, 3.7088024710100856`*^9}, {3.7088025041740413`*^9, 
  3.7088025453380885`*^9}},ExpressionUUID->"8ef69b69-66cb-4aaa-b320-\
3138c7224970"],

Cell[BoxData["\<\"http://192.168.1.75/api\"\>"], "Output",
 CellChangeTimes->{
  3.7088024717466726`*^9, 3.7088025069753747`*^9, 3.7088025382913113`*^9, {
   3.7088025687357006`*^9, 3.708802579806421*^9}, 
   3.7088061050515833`*^9},ExpressionUUID->"950720af-f9a0-4580-95ab-\
c6ec4c141c70"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get a username", "Subsubsection",
 CellChangeTimes->{{3.708802591543991*^9, 
  3.708802594174818*^9}},ExpressionUUID->"515b9079-776e-486f-914b-\
f4a2d6efca5d"],

Cell["\<\
To create a new authorized user, press the large button on the Hue Bridge and \
evaluate the following input. This only needs to be done once, provided you \
save the username that is returned:\
\>", "Text",
 CellChangeTimes->{{3.7088028467092867`*^9, 
  3.7088029345539937`*^9}},ExpressionUUID->"63892836-02bf-4349-802b-\
9013fa3d8f91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"result", "=", 
   RowBox[{"URLExecute", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HTTPRequest", "[", 
      RowBox[{"baseurl", ",", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"Method", "\[Rule]", "\"\<POST\>\""}], ",", 
         RowBox[{"\"\<Body\>\"", "\[Rule]", 
          RowBox[{"ExportString", "[", 
           RowBox[{
            RowBox[{"<|", 
             RowBox[{
             "\"\<devicetype\>\"", "\[Rule]", "\"\<wolfram#wolfram\>\""}], 
             "|>"}], ",", "\"\<JSON\>\""}], "]"}]}]}], "|>"}]}], 
      "\[IndentingNewLine]", "]"}], ",", "\"\<RawJSON\>\""}], "]"}]}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.708802597823164*^9, 3.7088026770907097`*^9}, {
  3.708802743989626*^9, 3.7088027661048594`*^9}, {3.7088027985626707`*^9, 
  3.7088027989464703`*^9}, {3.70880283070883*^9, 3.7088028412933826`*^9}, {
  3.7088061219695063`*^9, 
  3.708806124801303*^9}},ExpressionUUID->"b3d6b5c7-b4dc-4211-a8fc-\
0500d7773a1c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"\<\"success\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{"\<\"username\"\>", 
      "\[Rule]", "\<\"q6rT1wnC3av63e8ouFjK0Hfy4HPsbFnO3cB2JUui\"\>"}], 
     "\[RightAssociation]"}]}], "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{{3.708802747182131*^9, 3.7088027670236907`*^9}, 
   3.708802801963617*^9, 3.708802834509351*^9, 
   3.7088029732044387`*^9},ExpressionUUID->"7097ee6e-9f77-4766-9167-\
6daf40531e42"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"username", "=", 
   RowBox[{
    RowBox[{"First", "[", "result", "]"}], "[", 
    RowBox[{"\"\<success\>\"", ",", "\"\<username\>\""}], "]"}]}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.708726138281068*^9, 3.7087261499864063`*^9}, {
  3.7088029775203056`*^9, 3.7088030048210297`*^9}, {3.7088061269698024`*^9, 
  3.708806130632867*^9}},ExpressionUUID->"486cd1ec-6941-48e2-9d7d-\
f022e867dd9e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"username", "=", "\"\<q6rT1wnC3av63e8ouFjK0Hfy4HPsbFnO3cB2JUui\>\""}]
  ], "Input",
 CellChangeTimes->{{3.7088061152172194`*^9, 
  3.708806117201005*^9}},ExpressionUUID->"1b965e80-c8df-4516-8bbe-\
8c0e68cfaae5"],

Cell[BoxData["\<\"q6rT1wnC3av63e8ouFjK0Hfy4HPsbFnO3cB2JUui\"\>"], "Output",
 CellChangeTimes->{
  3.7088061316367273`*^9},ExpressionUUID->"be903305-e459-4044-b874-\
c8865858de72"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lights API", "Subsubsection",
 CellChangeTimes->{{3.708803024236224*^9, 
  3.7088030270749702`*^9}},ExpressionUUID->"cb3ff420-8038-4ece-9398-\
e46ff5958e32"],

Cell["Get information about the lights in your network:", "Text",
 CellChangeTimes->{{3.708803035136473*^9, 
  3.7088030444037266`*^9}},ExpressionUUID->"1cf44131-b2c3-4950-a5db-\
4753596a0843"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lightsbaseurl", "=", 
  RowBox[{"URLBuild", "[", 
   RowBox[{"{", 
    RowBox[{"baseurl", ",", "username", ",", "\"\<lights\>\""}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7088031705608144`*^9, 3.7088031821915016`*^9}, {
  3.708803291578642*^9, 
  3.7088032939429502`*^9}},ExpressionUUID->"02d6099b-253e-48d1-9072-\
60d61718f67e"],

Cell[BoxData["\<\"http://192.168.1.75/api/\
q6rT1wnC3av63e8ouFjK0Hfy4HPsbFnO3cB2JUui/lights\"\>"], "Output",
 CellChangeTimes->{3.708803183491284*^9, 3.708803295112296*^9, 
  3.7088050543926983`*^9, 
  3.708806133636614*^9},ExpressionUUID->"b5657def-60b0-4c56-964a-\
07b430609c6a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"LightsInformation", "[", "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"URLExecute", "[", 
    RowBox[{"lightsbaseurl", ",", "\"\<RawJSON\>\""}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7087262039920545`*^9, 3.7087262280367236`*^9}, {
  3.708803050402551*^9, 3.708803095184044*^9}, {3.708803175091323*^9, 
  3.7088031807129803`*^9}, {3.7088032355234594`*^9, 3.708803250107417*^9}, {
  3.7088032992270813`*^9, 
  3.70880330031195*^9}},ExpressionUUID->"647c8174-aee7-46e5-83cb-\
494ebe7a239c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lightsinfo", "=", 
  RowBox[{"LightsInformation", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.7088032516565094`*^9, 3.708803254161861*^9}, {
  3.708804121645923*^9, 
  3.708804124416337*^9}},ExpressionUUID->"c40aec87-3e19-4507-901a-\
2e5191d0bcec"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "state", "type", "name", "modelid", "manufacturername", "uniqueid",
             "swversion", "swconfigid", "productid"}, {
            
            TypeSystem`Struct[{
             "on", "bri", "hue", "sat", "effect", "xy", "ct", "alert", 
              "colormode", "reachable"}, {
              TypeSystem`Atom[TypeSystem`Boolean], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["none"]], 
              TypeSystem`Vector[
               TypeSystem`Atom[Real], 2], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["none"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["hs"]], 
              TypeSystem`Atom[TypeSystem`Boolean]}], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Extended color light"]], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["LCT014"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Philips"]], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["1.15.2_r19181"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A315E69E"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Philips-LCT014-1-A19ECLv4"]]}], 3], 
        "Shape" -> TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "state"} -> 
           Association[{All, "state", "on"} -> 1, {All, "state", "bri"} -> 
             1, {All, "state", "hue"} -> 1, {All, "state", "sat"} -> 
             1, {All, "state", "effect"} -> 1, {All, "state", "xy"} -> 
             1, {All, "state", "ct"} -> 1, {All, "state", "alert"} -> 
             1, {All, "state", "colormode"} -> 1, {All, "state", "reachable"} -> 
             1], {All, "type"} -> 1, {All, "name"} -> 1, {All, "modelid"} -> 
           1, {All, "manufacturername"} -> 1, {All, "uniqueid"} -> 
           1, {All, "swversion"} -> 1, {All, "swconfigid"} -> 
           1, {All, "productid"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
             TypeSystem`PackageScope`RowShape[
              Association["state" -> TypeSystem`PackageScope`RowShape[
                 Association[
                 "on" -> TypeSystem`PackageScope`AtomShape[36], "bri" -> 
                  TypeSystem`PackageScope`AtomShape[34], "hue" -> 
                  TypeSystem`PackageScope`AtomShape[34], "sat" -> 
                  TypeSystem`PackageScope`AtomShape[34], "effect" -> 
                  TypeSystem`PackageScope`AtomShape[36.], "xy" -> 
                  TypeSystem`PackageScope`UnknownShape, "ct" -> 
                  TypeSystem`PackageScope`AtomShape[34], "alert" -> 
                  TypeSystem`PackageScope`AtomShape[36.], "colormode" -> 
                  TypeSystem`PackageScope`AtomShape[27.], "reachable" -> 
                  TypeSystem`PackageScope`AtomShape[36]]], "type" -> 
               TypeSystem`PackageScope`AtomShape[180.], "name" -> 
               TypeSystem`PackageScope`AtomShape[153.60000000000002`], 
               "modelid" -> TypeSystem`PackageScope`AtomShape[54.], 
               "manufacturername" -> TypeSystem`PackageScope`AtomShape[63.], 
               "uniqueid" -> 
               TypeSystem`PackageScope`AtomShape[249.60000000000002`], 
               "swversion" -> TypeSystem`PackageScope`AtomShape[117.], 
               "swconfigid" -> TypeSystem`PackageScope`AtomShape[72.], 
               "productid" -> TypeSystem`PackageScope`AtomShape[225.]]]]], 
           3, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[2077624541], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "state", "type", "name", "modelid", "manufacturername", "uniqueid",
             "swversion", "swconfigid", "productid"}, {
            
            TypeSystem`Struct[{
             "on", "bri", "hue", "sat", "effect", "xy", "ct", "alert", 
              "colormode", "reachable"}, {
              TypeSystem`Atom[TypeSystem`Boolean], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["none"]], 
              TypeSystem`Vector[
               TypeSystem`Atom[Real], 2], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["none"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["hs"]], 
              TypeSystem`Atom[TypeSystem`Boolean]}], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Extended color light"]], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["LCT014"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Philips"]], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["1.15.2_r19181"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A315E69E"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Philips-LCT014-1-A19ECLv4"]]}], 3], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[2077624541]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"state\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"state\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "type"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "type"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"name\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"name\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "name"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "name"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"modelid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"modelid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "modelid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "modelid"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"manufacturername\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"manufacturername\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "manufacturername"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "manufacturername"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"uniqueid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"uniqueid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "uniqueid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "uniqueid"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swversion\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swversion\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "swversion"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "swversion"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swconfigid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swconfigid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "swconfigid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "swconfigid"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"productid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"productid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "productid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "productid"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"on\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"on\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "on"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "on"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"bri\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"bri\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "bri"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "bri"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"hue\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"hue\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "hue"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "hue"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sat\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sat\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "sat"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "sat"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"effect\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"effect\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "effect"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "effect"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"xy\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"xy\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "xy"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "xy"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"ct\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ct\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "ct"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "ct"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"alert\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"alert\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "alert"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "alert"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"colormode\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"colormode\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "colormode"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "colormode"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reachable\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reachable\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    All, "state", "reachable"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[All, "state", "reachable"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["1", 
                    Style[
                    "1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    Key["1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                   GeneralUtilities`Slice[
                    Key["1"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["on"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["bri"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10922"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["hue"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["sat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["effect"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    Key["1"], 
                    Key["state"], 
                    Key["xy"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["xy"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes["385"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["ct"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["alert"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["hs", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["colormode"]]], "Mouse"], 
                ImageSize -> {{27., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["state"], 
                   Key["reachable"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Extended color light", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{180., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Hue color lamp 1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["LCT014", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["modelid"]]], "Mouse"], 
                ImageSize -> {{54., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Philips", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["manufacturername"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["00:17:88:01:02:51:21:79-0b", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["uniqueid"]]], "Mouse"], 
                ImageSize -> {{249.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.15.2_r19181", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["swversion"]]], "Mouse"], 
                ImageSize -> {{117., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A315E69E", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["swconfigid"]]], "Mouse"], 
                ImageSize -> {{72., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Philips-LCT014-1-A19ECLv4", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["productid"]]], "Mouse"], 
                ImageSize -> {{225., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["2", 
                    Style[
                    "2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    Key["2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                   GeneralUtilities`Slice[
                    Key["2"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["on"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["bri"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10922"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["hue"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["sat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["effect"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    Key["2"], 
                    Key["state"], 
                    Key["xy"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["xy"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes["385"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["ct"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["alert"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["hs", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["colormode"]]], "Mouse"], 
                ImageSize -> {{27., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["state"], 
                   Key["reachable"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Extended color light", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{180., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Hue color lamp 2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["LCT014", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["modelid"]]], "Mouse"], 
                ImageSize -> {{54., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Philips", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["manufacturername"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["00:17:88:01:02:55:16:95-0b", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["uniqueid"]]], "Mouse"], 
                ImageSize -> {{249.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.15.2_r19181", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["swversion"]]], "Mouse"], 
                ImageSize -> {{117., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A315E69E", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["swconfigid"]]], "Mouse"], 
                ImageSize -> {{72., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Philips-LCT014-1-A19ECLv4", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["productid"]]], "Mouse"], 
                ImageSize -> {{225., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["3", 
                    Style[
                    "3", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    Key["3"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                   GeneralUtilities`Slice[
                    Key["3"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["on"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["bri"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10922"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["hue"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["sat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["effect"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][{
                    Key["3"], 
                    Key["state"], 
                    Key["xy"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["xy"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes["385"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["ct"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["alert"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["hs", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["colormode"]]], "Mouse"], 
                ImageSize -> {{27., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["state"], 
                   Key["reachable"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Extended color light", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{180., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Hue color lamp 3", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["LCT014", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["modelid"]]], "Mouse"], 
                ImageSize -> {{54., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Philips", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["manufacturername"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["00:17:88:01:02:51:21:87-0b", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["uniqueid"]]], "Mouse"], 
                ImageSize -> {{249.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.15.2_r19181", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["swversion"]]], "Mouse"], 
                ImageSize -> {{117., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A315E69E", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["swconfigid"]]], "Mouse"], 
                ImageSize -> {{72., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Philips-LCT014-1-A19ECLv4", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["productid"]]], "Mouse"], 
                ImageSize -> {{225., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 846529349]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[846529349][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {2257., {98., 107.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.708803258740639*^9, 3.708803303480756*^9, 
  3.7088041257798166`*^9, 3.7088050552741833`*^9, 
  3.7088061383617754`*^9},ExpressionUUID->"8643f62f-95e6-43b4-b530-\
a3d5c0537409"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lightsnumbers", "=", 
  RowBox[{"Keys", "[", "lightsinfo", "]"}]}]], "Input",
 CellChangeTimes->{{3.708804126211774*^9, 
  3.7088041820530844`*^9}},ExpressionUUID->"81bec261-e2e9-4ff6-9383-\
6c6ea3ae9f12"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Atom[String], 3], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`AtomShape[28.800000000000004`]], 3, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1707538335], 
        "Type" -> TypeSystem`Vector[
          TypeSystem`Atom[String], 3], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1707538335]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Pane[
                Annotation["1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1290771082][
                  GeneralUtilities`Slice[1]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1290771082][
                  GeneralUtilities`Slice[2]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["3", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1290771082][
                  GeneralUtilities`Slice[3]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1290771082][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1290771082]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1290771082][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1290771082][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {47., {63., 72.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.7088041352656403`*^9, 3.7088041829193573`*^9}, 
   3.7088050555121055`*^9, 
   3.7088061501677747`*^9},ExpressionUUID->"df1a9f44-2ce6-4cec-8531-\
b0920c0dd587"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"LightsInformation", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"URLExecute", "[", 
    RowBox[{
     RowBox[{"URLBuild", "[", 
      RowBox[{"{", 
       RowBox[{"lightsbaseurl", ",", 
        RowBox[{"ToString", "[", "n", "]"}]}], "}"}], "]"}], ",", 
     "\"\<RawJSON\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.708803306165769*^9, 
  3.7088033375641565`*^9}},ExpressionUUID->"7351b627-4e5b-4055-9d00-\
f1fa0809563d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LightsInformation", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.7088033421650777`*^9, 
  3.70880334796163*^9}},ExpressionUUID->"c37b3d8b-326f-4b25-b549-\
43295f3f3d75"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 9, "InitialType" -> 
        TypeSystem`Struct[{
          "state", "type", "name", "modelid", "manufacturername", "uniqueid", 
           "swversion", "swconfigid", "productid"}, {
           
           TypeSystem`Struct[{
            "on", "bri", "hue", "sat", "effect", "xy", "ct", "alert", 
             "colormode", "reachable"}, {
             TypeSystem`Atom[TypeSystem`Boolean], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[String], 
             TypeSystem`Vector[
              TypeSystem`Atom[Real], 2], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[TypeSystem`Boolean]}], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String]}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"state", "on"} -> 
           TypeSystem`PackageScope`AtomShape[36], {"state", "bri"} -> 
           TypeSystem`PackageScope`AtomShape[34], {"state", "hue"} -> 
           TypeSystem`PackageScope`AtomShape[34], {"state", "sat"} -> 
           TypeSystem`PackageScope`AtomShape[34], {"state", "effect"} -> 
           TypeSystem`PackageScope`AtomShape[38.400000000000006`], {
            "state", "xy"} -> 
           TypeSystem`PackageScope`UnknownShape, {"state", "ct"} -> 
           TypeSystem`PackageScope`AtomShape[34], {"state", "alert"} -> 
           TypeSystem`PackageScope`AtomShape[38.400000000000006`], {
            "state", "colormode"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "state", "reachable"} -> 
           TypeSystem`PackageScope`AtomShape[36], {"type"} -> 
           TypeSystem`PackageScope`AtomShape[192.00000000000003`], {"name"} -> 
           TypeSystem`PackageScope`AtomShape[153.60000000000002`], {
            "modelid"} -> 
           TypeSystem`PackageScope`AtomShape[57.60000000000001], {
            "manufacturername"} -> 
           TypeSystem`PackageScope`AtomShape[67.20000000000002], {"uniqueid"} -> 
           TypeSystem`PackageScope`AtomShape[249.60000000000002`], {
            "swversion"} -> 
           TypeSystem`PackageScope`AtomShape[124.80000000000001`], {
            "swconfigid"} -> 
           TypeSystem`PackageScope`AtomShape[76.80000000000001], {
            "productid"} -> 
           TypeSystem`PackageScope`AtomShape[240.00000000000003`]], 2], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1251437035], 
        "Type" -> TypeSystem`Struct[{
          "state", "type", "name", "modelid", "manufacturername", "uniqueid", 
           "swversion", "swconfigid", "productid"}, {
           
           TypeSystem`Struct[{
            "on", "bri", "hue", "sat", "effect", "xy", "ct", "alert", 
             "colormode", "reachable"}, {
             TypeSystem`Atom[TypeSystem`Boolean], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[String], 
             TypeSystem`Vector[
              TypeSystem`Atom[Real], 2], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[TypeSystem`Boolean]}], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1251437035]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"state\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"state\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "on"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "on"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"on\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"on\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "on"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "on"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "on"]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"bri\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"bri\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "bri"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "bri"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "bri"]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"hue\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"hue\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "hue"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "hue"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10922"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "hue"]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sat\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sat\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "sat"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "sat"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "sat"]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"effect\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"effect\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "effect"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "effect"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "effect"]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"xy\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"xy\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "xy"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "xy"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.469, 0.4754}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "xy"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "xy"]], "Mouse"]]}, {
              SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"ct\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ct\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "ct"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "ct"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["385"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "ct"]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"alert\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"alert\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "alert"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "alert"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["none", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "alert"]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"colormode\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"colormode\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "colormode"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "colormode"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["hs", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "colormode"]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reachable\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reachable\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "state", "reachable"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "reachable"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["state", "reachable"]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "type"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["type"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["Extended color light", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["type"]], "Mouse"], 
                ImageSize -> {{192.00000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"name\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"name\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "name"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["name"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["Hue color lamp 1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["name"]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"modelid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"modelid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "modelid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["modelid"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["LCT014", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["modelid"]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"manufacturername\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"manufacturername\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "manufacturername"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["manufacturername"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromLeft, 
               Pane[
                Annotation["Philips", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["manufacturername"]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"uniqueid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"uniqueid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "uniqueid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["uniqueid"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["00:17:88:01:02:51:21:79-0b", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["uniqueid"]], "Mouse"], 
                ImageSize -> {{249.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swversion\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swversion\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "swversion"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["swversion"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["1.15.2_r19181", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["swversion"]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swconfigid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"swconfigid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "swconfigid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["swconfigid"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["A315E69E", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["swconfigid"]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"productid\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"productid\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][{
                    "productid"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["productid"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["Philips-LCT014-1-A19ECLv4", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
                  GeneralUtilities`Slice["productid"]], "Mouse"], 
                ImageSize -> {{240.00000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 941352342]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[941352342][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {471., {330., 339.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.7088033496639357`*^9, 3.7088050559283705`*^9, 
  3.708806153014865*^9},ExpressionUUID->"8c341020-f682-4cf9-b998-\
7c9fb4281aa6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChangeLights", "[", 
   RowBox[{"n_Integer", ",", 
    RowBox[{"hue_Integer", "/;", 
     RowBox[{"0", "\[LessEqual]", "hue", "\[LessEqual]", "65535"}]}]}], "]"}],
   ":=", 
  RowBox[{"ChangeLights", "[", 
   RowBox[{"n", ",", "hue", ",", "255", ",", "255"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.708803474502804*^9, 3.7088036390725393`*^9}, {
  3.7088043191093063`*^9, 3.708804338363752*^9}, {3.708804540076642*^9, 
  3.7088046388493147`*^9}, {3.708805029258545*^9, 
  3.7088050301583967`*^9}},ExpressionUUID->"4c91b894-2aba-47b0-b95c-\
045e46257edc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChangeLights", "[", 
   RowBox[{"n_Integer", ",", 
    RowBox[{"hue_Integer", "/;", 
     RowBox[{"0", "\[LessEqual]", "hue", "\[LessEqual]", "65535"}]}], ",", 
    RowBox[{"sat_Integer", "/;", 
     RowBox[{"0", "\[LessEqual]", "sat", "\[LessEqual]", "255"}]}], ",", 
    RowBox[{"bri_Integer", "/;", 
     RowBox[{"0", "\[LessEqual]", "bri", "\[LessEqual]", "255"}]}]}], "]"}], ":=", 
  RowBox[{"Dataset", "[", "\[IndentingNewLine]", 
   RowBox[{"URLExecute", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HTTPRequest", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"URLBuild", "[", 
        RowBox[{"{", 
         RowBox[{"lightsbaseurl", ",", 
          RowBox[{"ToString", "[", "n", "]"}], ",", "\"\<state\>\""}], "}"}], 
        "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"Method", "\[Rule]", "\"\<PUT\>\""}], ",", 
         RowBox[{"\"\<Body\>\"", "\[Rule]", 
          RowBox[{"ExportString", "[", 
           RowBox[{
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<on\>\"", "\[Rule]", "True"}], ",", 
              RowBox[{"\"\<hue\>\"", "\[Rule]", "hue"}], ",", 
              RowBox[{"\"\<sat\>\"", "\[Rule]", "sat"}], ",", 
              RowBox[{"\"\<bri\>\"", "\[Rule]", "bri"}]}], "|>"}], ",", 
            "\"\<JSON\>\""}], "]"}]}]}], "|>"}]}], "\[IndentingNewLine]", 
      "]"}], ",", "\[IndentingNewLine]", "\"\<RawJSON\>\""}], "]"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.708803474502804*^9, 3.7088036390725393`*^9}, {
   3.7088043191093063`*^9, 3.708804338363752*^9}, {3.708804540076642*^9, 
   3.708804601587783*^9}, {3.7088046472332287`*^9, 3.708804656231294*^9}, 
   3.708805030695535*^9},ExpressionUUID->"32cfab9b-566e-4465-ba44-\
c8107d260002"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"3", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.708803660270201*^9, 3.7088036764553213`*^9}, 
   3.7088050313953686`*^9},ExpressionUUID->"c9aa60c9-4b7e-48d2-bb02-\
c8b48af2f996"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"success"}, {
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "success"} -> 2], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association["success" -> TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`KeyValueShape[
                  TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                  TypeSystem`PackageScope`UnknownShape]], 1, {
                All, "success"}]]]], 4, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[482756837], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"success"}, {
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "HandleQ" -> 
        True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[482756837]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991][{
                    All, "success"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                  GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991][{
                    1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                   GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                  GeneralUtilities`Slice[1, 
                   Key["success"], 
                   Key["/lights/3/state/on"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991][{
                    2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                   GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                  GeneralUtilities`Slice[2, 
                   Key["success"], 
                   Key["/lights/3/state/hue"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991][{
                    3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                   GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                  GeneralUtilities`Slice[3, 
                   Key["success"], 
                   Key["/lights/3/state/sat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991][{
                    4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                   GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
                  GeneralUtilities`Slice[4, 
                   Key["success"], 
                   Key["/lights/3/state/bri"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 644872991]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[644872991][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {276., {98., 107.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.708803666109067*^9, 3.7088036772558165`*^9}, {
   3.7088043242786355`*^9, 3.708804341965848*^9}, 3.7088046597794266`*^9, 
   3.708805056576187*^9, 
   3.7088061593847766`*^9},ExpressionUUID->"41e36a84-262a-4b57-b734-\
f26725f8025b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"3", ",", "0", ",", "100", ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.708803660270201*^9, 3.7088036764553213`*^9}, {
   3.7088046647323284`*^9, 3.7088046687325783`*^9}, 
   3.70880503197956*^9},ExpressionUUID->"1bcefed5-1d10-4c3f-a7f1-\
e43af44398e4"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"success"}, {
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "success"} -> 2], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association["success" -> TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`KeyValueShape[
                  TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                  TypeSystem`PackageScope`UnknownShape]], 1, {
                All, "success"}]]]], 4, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[421952577], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"success"}, {
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "HandleQ" -> 
        True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[421952577]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296][{
                    All, "success"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                  GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296][{
                    1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                   GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                  GeneralUtilities`Slice[1, 
                   Key["success"], 
                   Key["/lights/3/state/on"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296][{
                    2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                   GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                  GeneralUtilities`Slice[2, 
                   Key["success"], 
                   Key["/lights/3/state/hue"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296][{
                    3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                   GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["100"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                  GeneralUtilities`Slice[3, 
                   Key["success"], 
                   Key["/lights/3/state/sat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296][{
                    4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                   GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["100"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
                  GeneralUtilities`Slice[4, 
                   Key["success"], 
                   Key["/lights/3/state/bri"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635900296]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[635900296][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {276., {98., 107.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.7088046705025115`*^9, 3.708805056999469*^9, 
  3.708806161554673*^9},ExpressionUUID->"704e00fc-6888-4b92-893c-\
7c4b773ad144"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChangeLights", "[", 
   RowBox[{"n_Integer", ",", 
    RowBox[{"color", ":", 
     RowBox[{"(", 
      RowBox[{"_RGBColor", "|", "_GrayLevel", "|", "_Hue"}], ")"}]}]}], "]"}],
   ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "hue", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"hue", "=", 
      RowBox[{"ColorConvert", "[", 
       RowBox[{"color", ",", "\"\<Hue\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ChangeLights", "[", 
      RowBox[{"n", ",", 
       RowBox[{"Round", "[", 
        RowBox[{"65535", 
         RowBox[{"First", "[", "hue", "]"}]}], "]"}], ",", 
       RowBox[{"Round", "[", 
        RowBox[{"255", " ", 
         RowBox[{"hue", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"Round", "[", 
        RowBox[{"255", 
         RowBox[{"Last", "[", "hue", "]"}]}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7088037136712456`*^9, 3.7088037468363714`*^9}, {
  3.7088038299508495`*^9, 3.7088038885003495`*^9}, {3.7088039950291643`*^9, 
  3.708804006595517*^9}, {3.708804691121138*^9, 3.708804745618246*^9}, {
  3.708804825671297*^9, 3.7088048320856905`*^9}, {3.708804888430296*^9, 
  3.7088048936685686`*^9}, {3.7088050326961403`*^9, 3.7088050332432146`*^9}, {
  3.708805114464236*^9, 
  3.7088051156952047`*^9}},ExpressionUUID->"59423677-bce2-48fa-97d9-\
4be540d2f4ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"3", ",", "Blue"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088039084901857`*^9, 3.7088039260492363`*^9}, {
   3.708804013046632*^9, 3.7088040319652977`*^9}, 
   3.708805033881609*^9},ExpressionUUID->"59dce346-4016-41d4-8108-\
1ace1887a945"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"success"}, {
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "success"} -> 2], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association["success" -> TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`KeyValueShape[
                  TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                  TypeSystem`PackageScope`UnknownShape]], 1, {
                All, "success"}]]]], 4, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[713536220], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"success"}, {
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "HandleQ" -> 
        True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[713536220]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2048762867][{All, "success"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][
                  GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2048762867][{1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2048762867][
                   GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][
                  GeneralUtilities`Slice[1, 
                   Key["success"], 
                   Key["/lights/3/state/on"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2048762867][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2048762867][
                   GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["43690"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][
                  GeneralUtilities`Slice[2, 
                   Key["success"], 
                   Key["/lights/3/state/hue"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2048762867][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2048762867][
                   GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][
                  GeneralUtilities`Slice[3, 
                   Key["success"], 
                   Key["/lights/3/state/sat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2048762867][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2048762867][
                   GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                 ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["254"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][
                  GeneralUtilities`Slice[4, 
                   Key["success"], 
                   Key["/lights/3/state/bri"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2048762867][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2048762867]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2048762867][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {276., {98., 107.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.708803918488017*^9, 3.7088039269499373`*^9}, {
   3.7088040085997543`*^9, 3.7088040325813994`*^9}, 3.7088043596131725`*^9, 
   3.708804747419301*^9, 3.7088048340856943`*^9, 3.7088048954851027`*^9, 
   3.708805057400165*^9, 3.7088051217791204`*^9, 
   3.708806164818115*^9},ExpressionUUID->"8c5d47c9-c5d8-4a93-9d75-\
9f1f9e09917a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChangeLights", "[", 
   RowBox[{"All", ",", 
    RowBox[{"color", ":", 
     RowBox[{"(", 
      RowBox[{"_RGBColor", "|", "_GrayLevel", "|", "_Hue"}], ")"}]}]}], "]"}],
   ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"ChangeLights", "[", 
     RowBox[{
      RowBox[{"ToExpression", "[", "i", "]"}], ",", "color"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Normal", "[", "lightsnumbers", "]"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7088040528349247`*^9, 3.7088040608547764`*^9}, {
  3.7088042048127832`*^9, 3.708804227431856*^9}, {3.7088042597286415`*^9, 
  3.7088042629677725`*^9}, {3.708804839538459*^9, 3.708804845383746*^9}, {
  3.7088048764645796`*^9, 3.7088048824104867`*^9}, {3.7088050345447392`*^9, 
  3.7088050354448557`*^9}, {3.7088051027747955`*^9, 
  3.7088051072302375`*^9}},ExpressionUUID->"1bdd8d5c-8fc0-43fa-8cfb-\
7d4f24f6d9fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", "Green"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088042297084894`*^9, 3.708804267298395*^9}, 
   3.7088050361826897`*^9},ExpressionUUID->"5f0fd19b-9b35-4e0d-a8ed-\
d5579c19bb85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[741099339], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[741099339]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1061805780][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1061805780][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1061805780][{1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1061805780][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1061805780][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1061805780][{2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1061805780][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["21845"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1061805780][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1061805780][{3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1061805780][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1061805780][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1061805780][{4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1061805780][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1061805780][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1061805780][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1061805780]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1061805780][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1061805780][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1116826978], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1116826978]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1973314702][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1973314702][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1973314702][{1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1973314702][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1973314702][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1973314702][{2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1973314702][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["21845"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1973314702][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1973314702][{3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1973314702][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1973314702][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1973314702][{4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1973314702][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1973314702][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1973314702][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1973314702]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1973314702][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1973314702][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1409374380], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1409374380]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1704519733][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1704519733][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1704519733][{1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1704519733][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1704519733][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1704519733][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1704519733][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["21845"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1704519733][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1704519733][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1704519733][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1704519733][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1704519733][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1704519733][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1704519733][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1704519733][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1704519733]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1704519733][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1704519733][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{{3.7088042380963326`*^9, 3.7088042683992586`*^9}, 
   3.708804362650891*^9, 3.7088047513861938`*^9, 3.708804855840695*^9, 
   3.7088048978495097`*^9, 3.7088050580795994`*^9, 3.708805124882222*^9, 
   3.708806169189151*^9},ExpressionUUID->"013a994a-45fe-4a3a-a995-\
32cacbe44718"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", "Purple"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088042297084894`*^9, 3.708804278600952*^9}, 
   3.7088050368826733`*^9, {3.7088054355677605`*^9, 
   3.7088054364468217`*^9}},ExpressionUUID->"3f51ebb0-3b40-45d0-86be-\
e98c9ea3bccf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[259056400], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[259056400]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   778907437][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437][{
                    1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    778907437][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   778907437][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437][{
                    2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    778907437][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["54612"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   778907437][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437][{
                    3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    778907437][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   778907437][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437][{
                    4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    778907437][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["128"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   778907437][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 778907437]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[778907437][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[778907437][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[832916689], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[832916689]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1002634591][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1002634591][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1002634591][{1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1002634591][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1002634591][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1002634591][{2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1002634591][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["54612"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1002634591][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1002634591][{3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1002634591][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1002634591][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1002634591][{4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1002634591][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["128"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1002634591][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1002634591][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1002634591]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1002634591][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1002634591][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[207184476], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[207184476]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1989745971][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1989745971][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1989745971][
                    {1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1989745971][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1989745971][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1989745971][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1989745971][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["54612"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1989745971][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1989745971][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1989745971][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1989745971][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1989745971][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1989745971][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["128"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1989745971][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1989745971][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1989745971]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1989745971][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1989745971][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[
           TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7088042800179253`*^9, 3.7088044034079638`*^9, 3.708804753904193*^9, 
   3.7088048577884936`*^9, 3.7088048994035997`*^9, 3.708805059034731*^9, {
   3.7088054195780115`*^9, 3.708805438418738*^9}, 
   3.7088061717598085`*^9},ExpressionUUID->"83e7a78c-3a66-4369-9434-\
466dd63ebe81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageResize", "[", 
  RowBox[{
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\arnoudb\\\\Downloads\\\\IMG_20170711_184413.jpg\>\"", 
    "]"}], ",", "500"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088057318776073`*^9, 
  3.708805757239645*^9}},ExpressionUUID->"1f3547cd-1dad-412b-9d75-\
40d6fbca51bc"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJyMvYd/XEd251ud0MiRAEEEIjCTSJ3Rue+93Q1SgRJFicqjRDGCyLlzzrkb
OTMqWRrNjMdja+w3Y3vttXdf8vvs7vs/3h/wzqnbIDnyeN/T50xN3erbF00S
+NavfudUoe/zybduCQkhs5XQvPXZIjMz89ny9Ua4eGdi9u7tiS9vXpmY+/L2
lzOjn4tgcFFAyP8D/8P+zNDy7MjK1MDy5IXlmUHX9LB7asg9I/PMyr0PBpcn
h5enhp0zw56ZIc/siBc6i/LAgsy/KPfPyeDSPQd3DnugXZD752W++REfvLog
88EN0C4pgzC+IA/MjcCrwZkheFdoSRlaVkWWRmNLiuDycMCliLoUMYcsujyM
4VRF3aqoRxb2ykJeRdSninuUcZc87lIk3aqkW5lyKhJuZcKtSrhgXBn3qNMe
ZcatSHtVGZ8q61fn/RqInFeRDqqyPmXao0j71BmfBm5LedXY96uz/tGcT531
abI+ddqrTvo0cEM2pC8EtPnAaD6gygbgHmUGbvNqshA+uF+V8SvSIU0urMmG
NfmIYT2oLQV0+aA+51Nmw7pSWF8K6UrB0UJIW4oaViPaUkRTjKhLce0GREy/
ETWsRQylCLxkWAvrV8OG1eBoMaJfjRvXoqa1iHEN+rQtYUe/GtOvxXSrCd16
RrsV167HtOsJ7VbSsB3Xb8Z0GwnjVsq0kzJupww0jDtp027SsIMd4w7cljTu
JPSbSf122rQH4/DehHYza9jOGXcy+p00vgViN2Xag07GDLdtp0d30prtDAxa
92503zknGOkRnu0Q9J4QnOwQ9HQIT3aLe0+Lzyir1Uax5Wb/dMi8HjKsxUxb
Cf0WfIa0bjMFHf12SredgE+o28CPathKmLbjhq24bith2Eoat+GzpSy7GMx+
mnuYtD5K2x8X2UerzMMc9yhrfRS37Mcs+0nrYYLbDlpW/abinCb2/qmF680T
7zZPQ7xef4ure3e02iavNQ5V6y5I1ecrlSM17KudH1zpeGewYvSU4OIZ8eAp
4QB0+oXnewVnIPqEZ7uF/V2i/pOiM6fFFy9Ih04LL54TDw7VjKpbxixtrzPH
XjO3vGY59rqt7dorbTeuHL9hP37DeuLG5c4PXzv5ybXeW2/13Xq77+67ffc+
OPXg07Mzt86v3L3knRyKLMiSS/L4kizhUeW86pxfW4ibNpPm7Qx7kOUeZ2yP
S/Zna2Nfb4x9s27/ehNaiMvf4KX16xL7FcSa+atVw9OS8fGq6XHJ+KhkfFgy
PCwaDwvmg7zpYQHCTFsI42He/Chrfoit5TDLPsyaDwrskyL7LGd+XDA8Kpoe
lSyP8paHecuTVcvTdfbZBvdsA7/E0zX26SrzdJV7tso9XTU/WWOf0JEnReZJ
nnuS4x7nrY8K3JM8+6TAPMwzhznrw5z1MG89zLGHeeZh0fq4xMLDH+dZGH9Y
sD7Mcw+z7H6ePczB52Ee5eDPi5f7eet+znYA782a9rLG3Zx5P8sdZKzwt3EA
9+TgD8UcFiz7ReYgzx6k2YOMbT9r282yOzluDyLD7mZtexAZDlp4FLy6l7Pt
4WOZnQy7nbHtZmw7aetO2raTgpbbSbHbcWYjyW2m2K2UdSvJbiWtGxAp20ac
3Yxxm3HbVoLbSnLrSXYtya3Rdj0BrXUd7+HW47bVuH01Yi8FraXwlfWQrRjh
IAohthBiChFrMcwVozhYiDD5CFuI2UphayGMN+Rp5MJcNmLPB7mcn00HrOmA
Leu3ZgJcLmDLBWEcwpoOssmQNQXhZzMBfBXabAhuYDMhNhtkMhAw6LOl3La0
k0t72ZTfkgywiQCX8LMJH5MIsonwWNrPJTyWqI+LeZmol4v5rEkINxNzs3EX
F3NaYy57fGpwZWpweWrIMTG4AmCfHPJM8YSXeSaGnNMjgHoXjADb50Z8cyPe
o9Y7O+KZHnIB3qGzqPAtKYD5vrlhfGlJGZgf8QLnFynb6VuA8MF5GdwTXFaF
l1ShFU0EpolFWWBJFlyRRZzKuEMRWxmJANhd6ohDFnLKw05FhAI8Aa9CuNTY
cauTHjVAPu6Ux5yKOKJelQbmQ/jVuaC2gGxX57xKpD0GdgDgZbZ7ge3I6qxH
lfKpUx5V0qtKupRJ/2gmqM8HdAXEvgbhz4PdRy99PORhjlBnIsDz0SxMAUBy
vzbv0wD2s/B1Q9pime26YgSjFNGthrXFsLYU0hSjAG0j8PyI7boSvb8I90M/
YgLal8K6Ypi+McyHphhWFcOaUly/njJtRkZX43pEely3EdOtJ4wbCfM2QBUB
btikFIXYiAPzgeo6ylLdZtoEnMdI6XfiMDUAeA27aeQ5TgRx427CuJsxI97h
1YRmE7Cf4vZv9Nw5TQZ7BGdOkJPtpIuyvfukqPdi5UVFhdJe8xr8U2bs+1Hj
elgPE9ZG2LAOk13CsAlfER6FDIcw70Ckub20dS/GbKWtu3nbQZLdjVq2AoY1
CJc2N69OTMoi94b8N88vf3Rq6p3ee690/IJpfcdw7Jqm8epIrfVSlf5cpeZU
hbxHfOm4sOc46T1GTraQrmZBezNpbyXdx0hXi6ATLuvJsQpSJyFVtaSxTtBU
Q+qrSW2NoA7aKkF1FamuFdRWk+pqUlNDamsx6qCDr5LaClIpJlIxthgVpEpK
aitJHcTzDjywktRISbWU1FQQeGBjAzleT443kBPNpLuV9LSSvhPkTCc5e1ow
dEY8clGikVcxqtoxXcNrXMtbr7R+eK3z5rvd9z/sm/zivOOBPDanSi2qM47R
UhCmRfYwYzkArpbsTyEK1ifr9mfrHIJ3lX1UZB4i5IHqEKaHaeNB0rQPk3LW
vF+wPMyZDjKG/bwJXn2EjLU8BNQXzI/ojPCoYHlUZOEhT1ctz6AtwTOt0D4u
MY8giuzjovVpkXtS4J7m2ccFvmN5UjQ/KgLquYcFCOshtMDzAvcICJ81HuQA
0daHWYZ22H3smA9ylv0Ms5fl9jMwaDsEjCPPuf0sgBrGLdA5yJp3s8btnGU3
z+zmLDvQyVi2s9a9rHU3hyTfgTbL7WYt29gZQ7znxuCBO2XaW3czDPxdwaS5
nWa2EO92nu3bKWaLBnS2k8xmEjBu3US8A8A5wPtGamwzgZxfTdjW4rZSnFtN
cGsJfHWNj6R1Nc6WYlwpal2NAuS5QpQtAN6B2wBwCAS7FSCfj3C5MJOj2M+F
uDwE8DzEZQHOIWsuwGaCXDZozfm5TBDwzgHhs4B36AS4VNCawpbLIP9hxFom
fBAj7WNTEH572mtNetiEl03QFrntZeI+YDt02BgQHpDu4aI+WxzA7rXGvFzc
Y407ubjTBmCPuqC1xeZGnLPDKw8uLT4YdEyCYpf7Zka8kwOOKaD6iHuaApyP
mSE3tPDSojKwoPDzbAf1viAHjHsB7DC4QOU6tLNDqOQXUcz7FxSBRSA/hNy/
JA8uyoPA9kUFdAIg3ReG/SvyiBu4rYo6ZGGXMupSRZcV4SVleEUZBeB7NEmX
KuGgeIdLqtgTHjWV7goaygSqemXSo0wHNIj3oDYPPAdJ70aeZ7zqlE8DnVRZ
oqOMB02O48h2dQpWBP5RBDjgHTEOol2b9+tyuChQpxHgRwIegB/Q54I67MNE
EMAvlPUqszChAKj5COuLiHTK5xDtlLGvKwaA5MBwQwmprimgeueDyn4Yf/7G
csAlzAuo4VdjxnVgaUQLOn8jaQYNDBjfAH0ISI9SsCfMWwD2cgDndcD8LSSt
ngp7Per5lAEU+y5KayP8BB0AH2KGvbTlAIW9fjOu28xxh7cuLp0iAyB0uwV9
naSnExS74GSnsOdS9eCQeJitvLKijMBPU9JMpxLTZty0lWL3UtxeyrqfZHaS
1t04txMwrTq02UVVfEYWuHVh4b2e2293f/baiQ8szW+p6uxDUsN5ibpPNNgh
ONtKTjeQk3Wko4q0SkmzBPlcKyJVFRiVUiKtIBUSIqFRUSEA9laIiESIbYUY
X5JKEMvYFwvwBokALiViIhbRwL4A7heJMMojErgTnix4HpVSYVWlEN8rFVTh
XCCoqYa5QFBfLairwqitFmLAeCW+ijfgoKC2EkdqpIIaCTyEVAH/q3GywI4E
54gafoKoJs21pK2JdMJ0AHNBC84F/e0EVhOy0xLlUCWjqX9N33x9rOPjq703
3++f/PTM3OwgaBuQHEWYxJNARfagaHu8an8CZF4fe7IGywHuUcEMAhgYfpjX
H+Z1BxnTfsZ8kLWgis5bHhWYxwXLY9o+op1HlPwPi9zDIg92hk4czOMizCk2
pHqBeVqCKQAXAo9L1id5XAIcIt5th4B3YDtiHNcjB1lmnwc4Ep7Zz1kP0gx+
yAyLhE8D863Yz7N7wPAs3gAyfidr3AHtnYU7GewA2zPW/Qyw3b6LVAfdjnMB
wHyHivNdkARUwO9CpNgdADt87wHt0+ZN7KN636axhYodRqw7SUC9fTvOrieB
53aU5SkbtIj6hBX0+VoUJLptLTG2kbTjSNK2AWwHsCe41RgEsJ0qdmwB5hTs
tAXI55HttnzYCko7B0jH1poPMkB1JDzo9gCTRjXOZX0MADwboHgP2nLIcFsq
YE3yVEfdzlGwW0GEI9Wh9XMpvy3l45Kg271cwsslPVbEu4eL++xJDxeDDrRu
JuJho14bXEah72ajLiYCct01Fge57rSjaAe2zww65oedk4Mr4wPAdtfUsHtm
xDM17JqSUbbLoO+eGHQ+uATy3jk95IYWeD4v9wHb+ZiTeYDtc2jX+EGxzw65
ZwfdcyOeBZmXqncvMlwZAkmPtFeEFoDqSowlZXB+0LcwEgCSryjCDkXEgUI9
6pRHFoeDS/IQsH1FEXOpk04VRAKFvSKGeB9NrCiiTnhJET9ie8JFXRokPBI7
DbSHFvS5fzTtA8jjZZLCHDifpgIeO3AJ7/WAbtdmfBgIbTeofZgCRjOe0ZRb
Aw9MlwX8c0mvBdTjJWAf8O6DuYAuGUCEBzQFAHiQwjw0irKcj5C29AL+hhKv
84Hq0IKej/Ci3UDxblgN6enNMEdQ4EfQzFmNmcp2DUAeqB4zrMWMG1H9etSw
EQPAGnm2b8IgMt+A/Ac9T4m9RSFfZjtAPqnbBphnQfuBwjeAYge9vRXTbqQt
u0uK+JBI34Ng7+8S9ALYIU4IenokZ86Lhyy1V9zGVOaVfZDiaJiYSgFD3qlJ
zslD9wfcH5+Zvn7yS3vrB4amq0NVhrMV8pPCc8dJTyNpayDHqkk9sI4KY8B1
pYR2JKRaLKgUArEFVWJBtVhYLRFUiwQVIoEEWmC1hLJXjJdiaHmwA5+FGBJh
GfL8pRjuwQ69GWBOQ4itgPYFYsFRB2/G5/ws8F34pbGP8MdZQyCFzyDBiUPK
h4TG0Xh5kP65+E9LCS+ohqgQVPEhLbdHMwLOEdU4I5BqmAKqBPVVyP8a+pAa
EamuIy0NpA0WKT2C86fEAxcqNYpqO9P09uvHP4Yp8rPTk1ODXqcKvkVLIVy+
7RaYh0XU54/Xxp4WkPlPisxj0PCg2/PQUvjnLLg0gAk9az6gNg6Sf9WKblgB
1Tsq9gL7FNheYADslO3sE/R2GKD6ftEGT9iHfnHsEVLaspdly2zHDrOXtx9S
ub6fMQF791PMHizZstZ9WDmmYISl91t2c8xu3lpmdda2DwxPW7bTli3AewYF
/F6atwdBnNtRkCPJbbuo2K2wosTxrH0HImNFrY7S3QY3wEubSQtGittJ2baT
9k1eoift60hv6zqI9gTgfWwzbluPw6V1LWFbj1lKcXYtzq3FKNXRluFQukcY
UOmlmL0UtRfDVLdH0H5BsEcR7ABwHub5ACh2G1IdCB+2FaAfAoxzGR/aMjlk
OMr1LIp5K8j4FJKcpS2DtkzQlgmiwZIGce5lUKgD2KHj4RKId1DvHLLdzYI4
TwLtAeNOS9gNSGcjAHaPNeq1UhPGEnUwUQcHEcHWGgW2jw8sTQPbhxxTQy4A
NTrtI15etEPMKb0wPjHgGB9Y4R0YynYPSHSgN1zS8EB/HkgOil0VwIcMuebl
3rIVj5Lej4GS3j87DPIedfuyOgwxP+znX12UBZZlIacq5taAPo8tjgSXFOFl
ZWRFFVuSR1fkMZcmiWxXxpfhUhF1yEHeo3R3UtcdQx1zqWJOkP1q4Dx1cgD4
6gSwHcKrSR2xPUn7tIPjMAvAjJDwwRSgQ6R71BmPJuMdpXjXQiftBsFPkY5g
1+VwITCK/jzwGaW7DpcJPlUO8B7Q5BHagGVtkfIcSY7ujb4YLDswcEOet2JC
ukLYUKQzQj5M33LE9hLcj/fAk3UF6CP8Dch/GASwYyDY+Q6wne8A3rco3jdi
OiD/RgKAr1sHJQOr1AQwHwG+nTHs8Z5Mkkr3tHErpV1PqNdio+sJ45bXUNRW
X+klaFCDYkc3hnR3Cft6JWfPVl7S1DN3lCtTo8GPzk293X937PhHhobXBivV
/aKL7aS/jfTVkdYa0lRDGitRuErLkpsiWlzGNQYldpnboHVFVIELy61E8ALa
z0P05wL5LMBXxT8bPIo/864y28t4x4eLXnyVF/MFnVx+FlIM+iHhkr9NfPTq
0aMqjqYeXGJICL80qOSXEjz2JXRESmlPAycCukCgKwJRdaWoSiyskAgrKoRS
qbASJkH+L0eKVlIDRC1pAPI3keMd5GyfcPi8VK2utbFNb70G2O+9+fn52YkR
/wp8z5sAWTt5+5NVNPm/glizPytaH+eYh+jSQwtS3wIzwkERcI1myyO0YjgE
e84Eeh5E/sNVKzXeLXAn3AaQPyjY0X7PWx8CwzFAurOo2AHdaWYPOgB5gHma
3YMVHKLYuh81bcTMGwkLLiGzFhTqaarJQWDzhAcRnuXFOc98BlCPuAZ6I8/Z
rSRDNTk+Dd+YtVEThkUTJs1tgWIH3Q6XCWA7A2zfTlg3EODcGlXp0FmNsmsx
YDhc2vEloDqwHeCPzGdX48D5MQA+Uj1mxYiyoNhRtEdtyPaoFZ12ynYgfI6i
HngO0M75mVyAzfksGaA9st1aQJJz6LcHrdmgPVPW5xxaMX467ke8oyfj4zJ+
WzpgSwLSEd2U3ui6cIh0Nxsvg50BsEM/Tlsq2rkor9hRulsp1ZnoChuBcLBh
h5WPyPjg0r2LC+MDy7NyLyj2WRTkXtTtQ86pEdeM3D057Bq/tALt9LBrVoa2
zMygaxaQTgG+oPDODLqnL2GyFSC/oAzMK3zzckA6zBTuOYp9XtJjsnUE7Zp5
UO9KxDuI+SV1eEEemB/2zg/7lhRB52jMCWwfjQPYIZzqKMSSLIxUl0cdPNhl
0RUlCngAvluTcKpBycNtMbR0lFEHvYTwjqbQyQFhrwSGA5yTHkA6GvXUvaG6
HUa81KsBsMM9Pm3ag/2MW5X2aMozAq4X4P5ReCkDch0VO7V0sFVlQjrU7chn
TT4wmqOOUC4CwFdloQ9YhtZP5wUENcwFcAMa9dgP6o5St5octHDJG/I4ESD2
V4N6Sn7Q88ZS1LSGwNejbx/WgexH6waoHtHD5WoUE5qg3zbhJyiiW4/p1xMg
5nVr0CaZ7aQFNXlYsxbHjOcOZmDNmGwFxZ7UrqdG19O6LVBWUW771eOfnCJD
Z4QDPeTUSUH/SVF/j/hMv/RCX8W5PunZc1UDZ6uGT5DTjaSjlrQAxqWklkci
0ptIjsQ2L7ORn7wB8hI5X6IuveE5Y/l7jtj7/8F20dEDge30LeXHClCZ888s
fwlBOYQQhBAB/sc/Qfzyp3qJ8EhmwRGrRS8NUqpLebY/h7xYUO6U+U9e5jyP
8Uoe6XSRUvHvg3ec0BeiywRsyxMfTg3826VHE4SU9iuFVYB9CFgaSNG2qgbZ
X0uaqklDA2lFtS8cOitVyRs59vg7N3rH75xfmZeHvcZiFH2zh3nbk9Llr9bH
nq2PPV2zPUa8gyA3H6J65x6DyAew82wvWKjhY8GUbsECUv+gABg3o3Oes4Lk
Rtclxx2AYocO8DyHVvlO2rCZMm0CgbO23dzYYca+nxk7yF4+zNsO8pgb3QP8
IqhBYHM8/3fTHARwe4+2fB/uQaQD4TExStnO4x3kCtKe20Khzm6m2c0Us4l4
t27GGSA2UBp0+BoKcp7nGNRRt2+iPmdKVLSvJXEQ5XqUXeWRHmFRriPJ0Y0B
npfQaWch8hFbIYzKPB9isgD2EJeL2LAFmKMyZ3MAdng1yGbD9jxw2w88B27b
0yEbEj5kA5infAxlvi3jYzI+mif1cSmfFe0XxLg95QHO29BvB7DzqKdIT3iA
6jZ01IHtPnscDXbsoxXjYCJukO7W6AoTdlojDoywyx52cOHxwUWIyRHHjMI9
OeIEqs8qfNMjoNWXJocdE6DnZS5op2XuKRmV94OOB+eXZoadc6DMqVwHcQ5U
nx5yL6iD8wo/vH1G5poedMBEMCf3gbCfl/uWVP5FlPrUlkG7PgB4nx8B2gfQ
ooFL9OFDK6C9R+PAZ1Dsy6DbFWGHKrqshA5Kd8C7UxUH6Y5sB5KrQMZH8E5l
GN4CeF9RRBxqIHxkSR52qeMetFNSbuC5JummIt9NrfsVWRxTqyp4KYWcVwHV
qf2iTrkUSWrLpP0wokLmexDvKac6DYRHh0eb840esV2bDWgB2nmq2JHPcOnX
ZAJqAHuWF/A8w4P6ApXueZ7V8BaIkAHZjgY+9stIpzfn6Q2FELXl0cBBD7+E
lzQCPPANiHR04NGxAbav80qeDq7F9GtxwzoEanj9RnR0I6rfCGnWYgBzM/xQ
wI/PfsH2KAcra2YvZtlx6fM3+u6dEyjOiYdOi873CU93C/s6hCdbhScaBYDx
eim63wAo3rUQS1B+Ux9bUDaxRWXZzGPzzyrt/yjK1opAIKEcRsILfo538Usc
FoteAFl8RPuyLOcxLiRCAR+CnwXeQDDgS4j/ZI0g4FcNEmrpUDO/7L3wUryC
JlulR4YSmktUzB9B/si9EVPCw2UZ79R9KkP7z7H9PwI+nzKQHC0BMEeAl+VF
EJ8mkPJrAbr8kQqrIaqENdVCdH7gK1aS6lrSCAq/lXR1kP5+8fBgtdnQfPXV
js8+PjM3PRhyaNIRbj1t2wU4r9mfrNmerNu+WuOelBjMwIJczwHPLYclywHo
9jyzX+AOitbDjAmU9l6GgQC20/wpu59m9pPmnTy7X7IeFDm43PEYkwsa/7zS
Pzvim1cGllRBEHUrmljQDPJ4PTW2lX/toPDKYc6+n7bspdldJLYFJTov6VMo
yNFFB8jDHAHjgHcKdqrPAenWrQSzGbdswJ0JBk11dF3sGzFKch7poNVRw4My
B4YDwDFVCiTHNkHtlyhXwuoXALutFOFAohdi9lVAOgU74h0NGerJRK2FiD0P
JIcAyEcvFyP2AvJ8rBC05kK2QmSsGBmDG7Ig14/qZHiSZ2knFYQRawZEO1Dd
D/dYUxCYHrWlIFxM3I350CTvw2ALSLfFeY/dbY25Ael2gDwI9ZibjWKHiwHb
nSDa2aiTiwDegecrbAjY7rSFV7jg/YH58aHFiZFliMmRlclBLHqcljkfXJp/
MLA0MbTyYHAZ1PuswjM5jK77vXML4+cXZ0ZccwrPLBXnaL9AX+ZFP0fmmRlx
w6vTQ068h+c/sj2wAK0ygJ48BTtNrQaQ7bIg4l0VgsFlVcSlSQCfQbQvylG6
I73lkRV5xKmMQQcEPAj7ZX5cGV5RwW2hhRG/QwNiPrIkg9khCn0kvAbIH3Mo
Y251AgQ57954tUmnIu5QJHiLxq1C+Hs11H7RZVxy9O29WqrYMeuadin5G9Iu
FPlpvy7rHc1AG9Rl4VU05JVpNNs1Od6ED2gzAW0W8T6KFZVBXS5oKCDDdVTS
I7eLtGyShqHgB9mPHWwxoKPLwfPpo/K8hi+LeUORN2pCZdOmFNavxszrWDxp
wnLKsIGWTZo2ohTvMSC8DuswYwY0W5Km7ZRlO2Haipt3wpaNFX1qYsT36bm5
N7o+MR57Y7Ca7ZcomsmJJtLSSJpqSW0dOsDVFQgoYKBQjAqcMhw6vN6mhC/7
2ISXxEJs/n/AXPQn/Zc08wsN/wK5PIFfgJqX3kBvwZF/LsBPgrTHWUYkfhFC
EQ0xrh2OPj8RVRBJJZFWkaoaDFC8VbWkro4W1VSh71FHi2GqICiQqyilK2lI
+ShDXsDPAhIqs6X8mkWCiQMpj1/+1efyXlLO/PJCnU8BH/k2L5GfZn75XEAF
P3NRqvOoLyeU+QyyiM9B0P5z80dKk8JSIYp/aCuFlVUQgspaQU2doKFB0AK0
ryHN9aT9BDnTKxwcqBrVN49dPfnB5+dn5hShoHk9wx2ULj9evfJ0bewZltOw
jwog1M27afMuLPcyLHR20swuIt0KVN/DJI5xJw9Itx8k2HVY4L/d/bmh7sol
seqk8HwX6e8ivRAdpLtL0NsvungeFhT1JkvH1bdO35yQuQKmQtq2l798mB3b
54U6Aty6k2Q3qFanlgu3nQX4U7ynjjR8kkIe8J62bSXYDSS5bS0K0LajG4MC
HghvW+cdmJh1DZBO9TlKdJDlvFAPW0t+JsfDPAQSHQsdUajzoj1iOyp6pInU
CJcPMzm+KibAZINsDi13a546MyDdswD2ANosGUpv4HYSZLmXTUIfpDv6M9aM
h4HBtI8HO4duDPSx4pEFZZ7k8e7hs6i2hHcs4bIiwAHmblvMY4u5rVEnXHI8
26nZDtLdEnbZoqDYVziQ7qjYAe8rbPCBbHl8ZPHupdn7gwtI+OHlCcD7CCB9
8cEQxPL4wBKP96kRxxQI+6OYlqFFM4MtxswwraUZRsU+M+KchelA5p6VA+r5
6ncfKPwFhQ86c8Nw6V1UoXqfx0KawOwQVkui/S4LLCkjTk1sSRlekIcWFSFq
uaPT4lRFQZYvK3ihHgGALylCcBuwHToObRQ4v0JvXlFFHPQtK+jYo2lPbfwk
CHivNgWERzMHxLw64aFGDXXdM0dFkik0ZzQp1O1qEPlIeGrOoEuD8h7zsxle
utOSGwR7QH8U2iytwMn6R7FFzuuyAHO4hKkEeB4xrwLJkd46zMNisY0+HzIW
0O3BiQBbeDgO8q67oRihqdWwsRQyFsuEx3EKcyMGplz5DCwV8yjgzetxZiNq
gSUqpjtdo8lZZfCzc3PXez43AclrTCfF59pIdz1pqyR1tBylipoGEl4r8jx5
Cd3PrWwRlbxlu+NlRANyCf1P+HNuPzdhxEcuiointJBveTJjPPfheSRi2lRK
lWc9aYQZp5k0t5CWNtLaTtq7SHc3OXmS9PSS/vPk4gAZGiAjMqJSEZ1GYBgV
GPTEYiRWTjh2WfTKK+LXr0refKPi2jXpO9elN65XYNyoeO/9ig8+qPwY2g8r
Pv6o4tMPpZ9+UPnJDclH70o/eqfig+sV712XvndN/O5V0Tuvid96TfTmq8Kr
l4Wv2oWXLYQxEKOO6LVEpyCqi2TgPLlwjpw/Rc50YxnkyTZyog2LYZoasU4S
5kr0yatx7VPJTzRimhcW4dwkKOeIBcjtCgy0aPjaHtGRqVVxNAWUy4GOZgER
VfJHUa75kSDYJdS0qeJLgCCqRDW1ovpaUV2lqLICmV9VJcS6UJjOqjB1W99C
WjsFfX3iIUUdaz9+452+2/cHXW5tMsqsZS8fFsYeFuwP83b0ZEClJ007aRPy
Nm3ayVh2S2OPIqbCB32fD1aPNpJ2KX1mFc6PUil+TphP4XOKpHTpIeZXH6Si
ktS2ko5zlXLDsSvvnru/oA0n7Gu5V3bSVpDlG4DrBAOafDNjQ1MdwU59GFTp
3BZ8eydoNXsCwrqRsm+DXE+MbVCeo7UOKr1suVODHQJEe9hSluio0inAQ2wh
yOahA62fzaMhg5zHwpiYHdhe4F139GRAsWMJegb9dhsi3c9kMIWKBTBZL5P2
MqkALXQBpKO1TtHtZ1NeC7IdpbsNFDsdR3EO9E747bS4kZrt6MlYQbrH0GkH
oc4lXEwUpDiwHUkOEp2LAthdbNjJhFG3Y51MHJnPRhxHbswKb7Zz4WUm6LLF
xkeWHsgW7w/PPxhZHB9eBLbfv4Tt5PDyg+ElkPQPYGRgASU9CHuZc1K2ggof
2xVQ9VOyI9oPOiYGHdPDCHaYCEC0z8hQ7WMf4A+ol7vLFTW0umZe4Z2TobdP
a+CD0F9UIuoB+CvqMCj5hXLZZAhEONAeoL00ElqSh0HbO9QRxyhqe+gDyVfU
kWUEO8p4GjiIGl4BkI9gvY0qCt+l1JCJ47oAWlXCPZpwqTD9ykPepUphnlST
diji3tEkSn1guxJeKtdPHhXVJP06nu3pgI63aLLAfNoHjOMTUNLTtQCw2gds
N+RgLeBUJ/0GoDfd6wSyHxiuz3m02MGiSkOeMj/j1cIKAqV7GPOnWBjJOzBB
fQk0f9i0SpU/6n8KfAQ7KHxoY6Y1WJ+Ckola1h3G9Lgq+OGFySudH+gaxs5K
B9qFPSDL69Ahr6HleVVShEAFXdfDzz7v7uKP3r8T2D83WFA5o3gW8pr5pTQl
P4I4ogAXgYwn9Fax4Ejwo5AW0crG6mpSB9BuRlZ39pBT/YjHkUGiURKdgZhZ
Yh8jr18V3XhX9NkH4pufSyduVy/er12aqHbM1vuXm+JLLYnllri/LRPrXEue
3En1P0z1P870Pcud/rpw+qtc/1eZ3me5vmcwkun/OtP7bbrz22zvd5ner7P9
3+RPfVM882Ph1K9LZ/5y/dzvNi7+zeaFn7Yu/n7r4k/r53+3M/D7rfM/7Vz4
u/2BPx5c+uP++T88uvgPXw/8018M/esPI//l24v/9PTM3/3F4D/+8sIfvz37
1/unf9w/+6v9U7/Z7/n19slf5rqexNr3gq2rnuakszE8Vee4Wz1/s3LqPcnN
q8L37eSqhdh1xAjT0DlysY+cAjXbRtqbSCOtt4e2kS6XKqT4LwJ/YziXCgVC
ugwRSwQvMP4z2c/Xf/J4532ko+xtOXh/vgLXF2I6m5Rztbx7Xy2qqRPV1gpr
q0kVbgog9XWk+Rjp6BGdvlCjNrS+ca3v05uDCwujsZAF8PuwcOVRfuwQRHuW
2QXg37mwcqlCXUcaUSTQL8d/FcmRWnjx+dFNwj8dRJVAWomfGW6DZVRTl+is
+pj1k6EHfi6Xse8A0uPMapwpoTEO2ptZR7AD5+3bCW4jxqxBmxzbTNo2Eyzg
fYt31OPsWtSyGjWX0IHBupd13oRBB962Dqo+whbRTgdiA9vZcn0jKHYAe5DL
Y8IUK9gxhRq1Yfk6LWjHDhY92tKgzGklZC5IvRfcl4T1jVksdGGSXkvcD1qd
jUMHWj/uNsJ6daxpxL1FKWq/JGkdI9rpfjui3m2JgUr3Y4lj3MVSp8UacyLJ
Y6jV7XG+Xt1FMe4CsEPfGsWcqSUEqHdzIZc1hG4MyvXIipUX7WGnLXp3cA7A
DjE+snB/eOH+0ML9AZDrSxPDS8B2EPPQAsyhcxfdGxzkR/iWzgLoyU8NOafl
zlmVG/Q8ujoAeWhHXBC0g8Cfk7nn5Z4FhRda9HNknjkF2u90+2qA5/wcTbYu
qULzuPXVB9B26RLUgadF76jksUWeqyMrGgzQ8CDO6UswESDblzGpGsV7aE4W
pbsGqJ7EEkoNzhSYgaWuPvDfpU4A3qHFOplRzLf6tCmfNokbpmjJjVeTpCTP
UGjTkhuU92lAMUAYwM63Xg0v6dMwNeDcoU4isY0Fnz7r1WVdmhQEUB3o7UG2
46BHm3GPQqTh0q/P8SN8C8/EQho9rXvnrXho9UX8KtocCHj4BgZNFWPXw+Z1
jz47pwx9cn7mavfnuqZXzlQrWoQ9ldQkp1pRRK0JIeCi/MN+BAda0SEpK8my
zP4ztSUv5R9FgvJ/iJ0jewTuEKFyR6bjj3AlqYTpo440NJGWY6QNFuZnyeAw
UY0QjYlcvix8+1rFp+9Kv/y0evJ+rWuy1j/Xklg8lna2r/q7tiMnD9KnnmTP
PC1d/G5j6Jebwz9syX+5o/z1luov15W/WlX9cl3z49roD2taiO83Dd+PdwRf
rb/zWsPdsZov7FWfWis/Nkvf0YrfUIlf14rfNkg+tEq+fLXi3nuVsx9XLn5U
Nf9e1ew1yYRF+JGGvDNCXr8oYAaEVrnoikZ0VSN8Qy16XSN+QyN60yB8zyz8
yCT+wCT5gK34xWXpzVeqvnyz5t61qntv1oy/1zT3i+aFj5rmP2px3G7NPGhd
m+ncdPY8DPd/mzz1Q+7Mr9Yu/m770u93Bv4WJojHw/98cOnvDy/88enZP3x9
5u+fnvnj4amfVnu+T514GD2+6T+Wn6v33Kqe/rjyzluSj1nympFwCqIYJBd7
sAb+eC2przmyjLBshq6nQJlTSCKcqSMEM3Ul7whJaJ+3iYTl1dCRpC9jX8JP
6y9jH/OzwHlBVbWwplpUC5pfIuLdpwq+Vh9WeZ3Csxer1frjr79x+tPbsiWn
MetnSu90ft5GeqpIHZZ30k9Ii4VER8kRfvkm5Dt0wSKmixQq4PG7RYx/EGEV
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
dpOBPoFCX/HOB00rnzb73q9evl4x86Zo4ppw4i3h5JvCiTcFE++Llj4QOG6K
ovcluZmq4lxdfq6usNhYWm7ecBzbdXbuPOhImKre6SdDSrH+i9qFrd6/Pjjx
h70T/2mz/X9Zr/+bpx3/+nXX//rkxL887frXZ13/FeLb3v/2Xd//+K73f/zy
1P/9q77//pv+//6rnv/2y5P/9kP3v/3Y83/9ePL/+KHjv3zV8cfN47/JHXsW
bFhbqs2OVwQ+F61cF96zCm6oCHORyM6QC12C/k6agT1Ouo/j8TjtLeREK+nu
IQOaKu6N4x/fOjfnVeeyzOEG98266bt1w/db5t/sWn63Z/hpX/f7fc1f7Q7/
uHnhm+KZw3j3uudYerbOd0s6/a74Y6vwsoYYzpGLsCShrn4zzW9WVGKV5lEC
l5ZT8qWbuP9XKH3Odj4k/GB5i1a5+EdM1X61mFo3SHgpIL1GWFsjrIN1nBhd
Iyydqpe2sOdfv62bWjL7ls3+RZPvnmbhnYu/YLuuDNbJ20TtNClTJv3z3A2f
XK4UVWKRD6k9Lup9pffGgjEAmjl2eSNmXwubcqDk+XIXPu/J2yxhS5666Hio
V4i3VthCmMnzDI/ZSlF7CUd4j50SHtnO4at4aABV7yEuE+JyQY5Wqlvz6MBg
GUwmiJUweG6Aj8MyGB8eF5AO2JDt2LHSraZUtHs5gHkcwA6BpelczG/HjaVu
rFFPuNhyoSM9MQbIj2B3Q1B3HQLZfjmBdS8cQtsBrGbRZnFRsK9Aaw0umQPL
bNCBhY4hgPmyFQP6EDDotCHbIW4NTt0Znr0zOANsv0N1+/2R+buDM8Bz3lQH
ht+5OIuX8iVg+73BuQn58gP50q0LM7cvzo4PL44PL03JHJMjKN0n5S40Z2RO
zL3KViYo9pHqdI/qND3EYEbhnZF7pnm2jzhBz8/JvJTtvmkK+TmFd07lm4VQ
+udAzCuDc4B0FPChRVWQCvsAv/WJP7hgSUE3sfJqHGvdEewOBHtkRRNdorWU
ywrgOZr2lOEI9mXq1UNLJ4vIMs92qrqdwHZdHAKnBnUE2O5EXwjGcS+VgwLc
OZrwGjOfXZzkTrxpbb3+2ekJjyHuMwDwk8u68K2RWbb7Wk/1QDVpEaBWEQiI
8Cj5xZ86Ul+Lm8r7Rur0nwxPLJvjTnPGaUy79BmXIbNkiN4aWbzW/6muyX6u
UtFMOuF+6mRS6/KoqoT+uP2ZPZh/1k4pj5T39RzlPQVYXgiPhR/5FnKsG43x
4UGiYwSvvyu5c6vOM9OSirYfFM78sDH82y3lb3dG/3pL/7t1/W9yum9BhMf1
e8HRdb8G91IFdXT3lhamOT4vzNd/lrA1Fvy4OQs3YUVMmP/FvLCxXMMZ1iPn
Exae2LSAE+t8sHQZ5bqZMhyPykTdDpdA/gSLtc2Id/Pa663vdRMZV/fJxy2u
G3VLb9csXK+Ze7ty+prowZvkAVD9VXL/FXIX4nXB/TfJ1Pti15eS+HhlZqYu
M9uQnmpMTDSlJpoz8+2lia40V/sLpYC52zYf7d9Ndh+mur9OdT3zN26GWnf9
zTuhtv1gy3645TDc/DDc/DTc9CzW+E2s/ttUww/55t+UWn+33faHnea/323+
x8O2f3nS/l+/6vzfvzr5v0F83fdvz/r/z8Oef9nt/ofVjr9JNn/jqVudqo7c
lDiuC27byQ0Tee0S0faRAUD9CUFXh6C7A4HcxZemXxCpzU1vfn52ZlEVCTMb
CftBjNuNGXaTxv2M6TBjeFQwPl4zf71p/G7L8Bc7uh+21T9sK38oDX+TPb8X
6EovtQbu1y98Unn3VfFbeoFphKhOk3OtpK0WTz+ju59eOlenXNIvQKEu5HcT
C1/eqEu1hJCv/KSXQgyJkN+5JjpKmgv4nHuFsKpV2jXYpLzSc+1z+ew8F49d
206+uRt9fc3BRW+qpi39Y21Vx3m3hsd7OQ8rEFcKpVXCaphB4HP2VV4wtr36
5qnPZ03RIFcImrMRnuf8MS9WZHjInOOPZOTTo0EmBwAPWcqDETzOMRdk8kEL
QBtfpeWOeR7ggG6KdzzsC+0XejZjGE8Ay9FTv7J+PJ4RdDsodqxRxyMCuHKJ
I9bD0KoYvqbRbYmhOAf1PpZ02+KAdGjpziNAd9zF8cBPPC+MAapjwpSLPDdh
0DxHxR5cYQKg0mmxeshpD68Aw20I8GUGJDp0gkB4aOGlZdoHztPBAKp6Lnhz
YOr20Azg/fbQ7B0q2rFmRrZ4f2jhwfAigP3ewDw6M7KF8ZGFByM4MiFbHB+a
B+Dzd06MLE3JHVNy5/jw8vgIrZyROWgqFjOtU8B8oLfSi6XvAHClH/Eu98yq
PJNU6k8OOeaUvjk57oGaGHTCnYsa35zaP6P0zSDhAwsg11XBRU0IxbwqMKdA
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
SAdMW73CS8yxt+6MLEetG6VXHmcZmFy28Y/A4KGL9NBdPHcR9Ty7jWe2cBg4
v3DbeOY5R89RxKMUN2LcRtS6GWU36WRxUDA/LhmfZXWPw8PrjtOx8Q7XO5Iv
zcJXukivGM+9Ef38uxyNR9TwL9ky1Ip/2ZmnrUQiFYulFWKpRCyVinCLNDAc
fhxqhM2mpmumqmsDEk09aRLQ1BX6jWJJVWVld2XvF8rp4OWil0n5LFiF6GPS
fiaNEp1X6djJYcUjHvlCDRyqyQO2PB6rbkXz3I9VLhkvl/GwSG9geACP5E16
mST9hRoZerQXtV/o8YweCGvSZ0/5r6ShxSJGe9oNg/ak53Ly/yXsPZwjy7L0
vvfSwGTCFrypAgooC+99egNUV/e0756e7nLw3mQivffwrlCFct090zM7w53l
zKw33OVwl7sKrrgiJYYUVFAKhcgIBRkhMYL6E3S+cxPoakOq4s6Lmzffe1k9
lfm73/vuOeeGLDtBixDqWB4NsiwXkBcx6mH7NiLPrYhCZ6pnvKaMz7wVtLOA
J+luhvfisSQ8gHmaQE14J/ntNsV9ljhQb4PZ4iUlT1rdKvR8MmBn7LPT7rfF
3ZYogz3mskQn21an2ldnO9am2lYnW1enWleJ7UT7CwF/Afa5Tofg/Py5LU9I
X+v1CcVOAp46a+zYiJHlDhEbj1IGHEvpE9Ld0RsU6n2Dg943SZ93BETi6kYn
cZ4BLiDfHaK+azBGjcBOR2c/sT242u519UZJ3vNbcTdaEtWJe6Kg/SDWXont
3gHh0qCJpVg6EvnpWUCkSnm4dhk131DGP0Q8T3sHM9Sg7Ud3Pry1VKO6nc87
qWEDBd5Ph2uDFBVIJZcU5ZeUFWWKimpFdZWyqhz98lJFqQa78OTlyXnqbIVY
5dermNmKK9+f1sHnZKsXikfar611kfUpScRzjVREP+Qm6daIwv6ednKhLOiv
P9q69eVB5z867v/14eDv7g59lR59Rko4PHLk6Iu9c/lBi2K4WW69Ijdflq82
yE10rFdcvUpgV7W1qHr6VaN3Ne85O6NJ0+OY7jBBYBdN9ziBFdInBOTo6CG9
Fdcfx8eowatBfTOcwEfiuf4xg/1xnBNs6RKufnbMgycp0wndNqI7iumOU0bc
MGV6EqebE7eNTxJ6uhyoT9FkoQfhqU/zRWzsMU0HNJg2YSRLeAOmBrg9PLNk
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
raWnb/nerPisT0lUb21W3r6quNkoX2+QmxsV1+rlq5exidK1ZnVrd75uvOCj
zyoW3T1JUuwJAju32NhRwkgC/phQT2KbmBwD1QnpAHtkjAQ85DfKLNDncr2F
hB4kR59QP4pOdATTRIKvTejpPsfhkYOY4SSsOwyP0n2OE/SJxux0QI1wAbfH
SPR+TDxHX48RwruYO1KgOgt+PlKL644ztrNPri83Su035J5h6e2PNd6p4uRc
aXy+LDJTEbdoPybK1UqNV+WbV6Vb1+Tb3bmd3fmdt1Q3b6huNErXJrSfuOoz
zsqtjYqMo3Y70vp4xyjELdi7C3q/QjqV7iWgDQvlc5CZaGx4ua3jnVDQXkK9
E7QZ4HTmtv7zHSPOyS5rIi7x5Q7ehQ9DEh1bIiL9Cmua+CBiuwXRLAA735Nn
jVeH1i+xBmpi08b+5b79i13r5+nBs+iN40j154mKnx9V//EXtX/705q/+6L8
T7a0z6cUDp10p0XqbpCvVSJC/kqlVFcrNXdp9T+6sRoxnx699ZN9y0vUlMNH
wJPZF1uLsobHfzWL9n04M8+g0k1nRHXS7Vyt5dm2GZlicNtM9A/3+Mvuv/7F
lX/xI9XCZalBi0oXasV56SEh4PmlfGHAnyefYkVVqTivcska/uJXpsiuT8lZ
cQMDE15+oVRpyH9vWG0nvLPVo1Ipc7SagitF12eHN9N3eCtS80HcsBc3HMSM
+7ztBTfLgUgj5cbbTNsO4vZz3W47jBLSLfsR1GZE0EuUs41QE8CajX6JY7+M
XQ5i2cKqqIULM1rPfXUW5HT0i+2nUUEdZ/KG1GJtNBuyLkx1wXaslsIwZ7bb
04iEsYDnPntSMNx3vpBKRxLwvIRK4ymvOe63JNzm6KYhzLo9RkId9os5QlR3
WYjqEUK6yxZxWQnvkYfti5Ndq486Vx+1r8x0rM20U1udbluhI/VZsQP1F9Jd
dLIBk12bhPr5dsdi5+YyU33xPJwG3nsHXPeNvsAy4b3Lu9Tpoc5Kl48gL/C+
1oUiY6TSV1CCDOb8Wick/Vp3cLnTT9PBem9goy+4DsUe3OhHf6M/uNbjo+Yc
DAnsbw5EWMPDlnf1c6gkHQcTnsGUb5gUeNrZG3f2xzcHE86BGM0Cm0OE98ga
PSD0R4nq7qGEayjhHopvwuGhTnJzIO4fy0x2rpbIVdksIc7L+JbelqVscON3
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
qu0rsW6MxjMT9KzxOGM8xRONEYFJCRPAnjCf0FRL/4hJ/emzrj/+2a2/P6r+
5WJp2KR8q1q6LOOX8o2wXq79i7WkXDmvWlVDbP9WUJnwbFrUwwPqiQKp9HXD
RvxSClXFM4MLyTcPohP7PnNybmBpqH6sSC4pkcu0chGq6ily8/O0ueo8kQOV
o8rNUefm5ubn5xcw24sLC0oKC0q1+cUaeDVarXypJvfa6JU3Zvs3QrZ0xL7j
MyZQ4+ViwZRhjrAWSzZ7lKsyCsXO4wh6ySB7VNR4YTgLuX5urcT99ph/nLP+
rTEfEkVZmdugyT1Cn9tYotsSF2ynETe7LghQh+UScdlEHGPIZQ+7RDqSJeoV
b1kiDmNw0xIG1a1sttNpd8IOW9BhC2zeCTvHQ5DuEyHCuFhLpXa/be6zlun7
7bOPOhcm2xemOpam6Ni+ONO5PN9Dun1pumNRhEfOdBDV12Y616Y61qa78HIG
MZMbGO92zPU4aAogDQ/Ik5In+KOzQQyf69iA607oJuZzqhQNLvbCw1nscQHv
NBHQOd2ueXZsVvu8q4iu8QjBz5KeRnwstrGcStxeI7bTS6L0YHB9gDp+6kC9
D5BiD672croTu+sb2fEggx2qnpowYTZGw1PdDnP9O/U5zbxLHYIVv1UoA5Hn
itbb6j61pJG+uUJ68YemgwK5WCMXFEiFebJWwXW9eIOzvO9dS5I4rJ3mgmqp
pkcxYld++Ibq3jv5U2+q73dJhrvywu9d+9/+4tb/+8fN/8+f3fwvf3r9v/zR
9f/8pzf/8x/f+r9//9Z/+s3t//TrW//xH13/P39y699+2fpvnrf+y4Oe36YH
fj/a/0V06CQwTBr7wD+64yeAE9t1xOT9sOUQ9B4jthOZ6a1toF6/79eJJpC+
5xvdBtINpN4J/jsE6gA6u4LYwHuW7VndHhFgB9sxC9CdA2PbIcNuxHSAM0cB
/IgR6p09fDw10BNExHjAeN8LZ21/OuEwJtiOBj2P9dyxvZj18Xjdh9VSbbui
/W3FB5N57tn8yH2t/53ySfpixM0nNGWIlVk8nozukbx81LJG0pQwzjGQFWVS
FSv2WjrWKK80SDfvVvwwaTxBCP3YSWz4JM3lDtIGUegGLg1XwnlyrpzPuOjN
mXgp4meEnUKyGQuv51XRCNHI38yK7adgtQFF1TJQ1CIa54w+a5s5z1PAMwwS
uhFnKEINSeGTcn6Kmgykny2nYjshnIx4laeYJjj+fMfCzwt4OqDPopOfkNLe
sp3R52ZsZ1vjzzP27FZ0xOpY90ms4eyg9pdf1P2zJ1V/6ik4e1M53SoNXZGb
6uUrdXJ9hVTdqLr98c252Dh/uv4kaTqh6ZKonrQ8TpBiNx5GTYcR02F67PnR
0C/SbS/mm33v1H5Ck6acTVxSnDeu2StnI2cQAyNrv/X9F958f7H1h6UrddKN
78Q94mVvxYjPur1pSHgtmcz7p3db3ifhlK9Angg2b1XmwYrJKVBICjXvDyLq
ieXk5OXmavLpLU1BgbZYqykq1JaA8HlFuTlapUJTnnt5sM44ObwWnuCgFwuv
fqJeeor9FhEGkwmNb8Ndt2XdGHTsmcB4hiu3pASZgxOcNGpletvj8Ew4Y9Rl
jTrhqADyOBLD7XDUCf7M+YTQ6oLzdILLQmAPg+HwW8JM9YjDHHRagu7xMI64
c9htjojMU0SzE/zHIw5LgGEeXLf4HXeCzonQhs3vsAeI7STXiepiRfVB2zyB
fbJrfrpnCQ58++IkhPoq6/bl2W6YM4/aFhBC07EiXJqpzlVq052rC/2OaYys
znavPWpZnO5YXegFtIWMnyM9T2zvdnCMDY+goUAZvWRn3gPF3kWoRzH5pT7P
cp93pd8rZDz9fmlGWOnzIoqy1yNYzVa8H6UMugPLdOz1Y3W1n6X7IGt4sD0g
ND8cG463wRHx9uzh9/lI228MhR51rhvr3qjNac6VtNli6dgR+GvRTgwnxc7J
+zdzSLxny9xhK6VCueSSokp9/kyqZDdGxVFhECqQ5TlFcmn+uYHzvZVk6Kp8
SXNdbnkXW0j7PcW7qYoXa6Xpu9JcpuEPf7f///p5x3/4Red/+Hn7v/9Z+//x
0/b//adt//bLjn/9rPPvTtt/e9Lzl1v9v4z0vgr2PXb1bzkHU5tDae8wafVd
/+iudyTjH9sGnIXTQnDWQU6HCNRjJOZ3/ODwrn9s1zey7dft+MfwLnjOJA+8
xnb/KE4I6PESl5O2H9n1DwPdBHbRwrrz6UC3HTbCnKF5RPjz0PAGUu8HMHZG
doMje4R6sSAbOJ998K7uQtgD7P7hnaj56LOutRrpylVFU5888olqYUETeZTv
e7948dGNtZgZ1k0YLv2xmA7oDqTbp9ocl6UbFRLYXiyVEdsr5LpKqa5Kqq2W
665IN39Q+Wlcfwiw644vUl8To8cAsu1pmiS94SRt4FoH/C7qpxmgvbfhsfAi
KdY3X2wZn6H6mYkVOx9h7IC3zwBhI+pqYnUSzH+a0oHtQtJnjKJaGjfr0wwi
UjiG3JANViFc098hYznZsvBWcUaaaPCgwRg/5Wo8T1mlPyWAYz4yPknRpGDl
OYIEvBVgpwu3LKc7HOKYMZxGOo9jl1/u1/76Rf1f7Zf/4xlF0Ci91yb3NaDK
UCP9n1MuXdZVv+ccyyQs9H/sPlfWOomZjmLGw7jlKGY5CpsO6OkvjDWU/fT4
yUc3PlNxtvX5AijHfSkQf55lvCQXKopK5JJvffNFSYHBGrvr9pZB+QPSQtI3
w8kg3ZVlcwOu5FtHsbv777be0yqLRRlV7Jig1OYo8hqLb/ZW6a7m36hQVeVj
C2+uKqlCmRq1Oo8hD6OG2E6tQFNSqCmllpdboFJqSnKrx67emR1zBMZRm9Fn
FJUV08zzLbF+emHIiOKN8GQmtnxWEdwCT4YNliQ7MAkiNtZDCdc4Auk0AkFu
i29aYzRITdQK8FpFdHqM4xijnEkKE0aw3W2H04JmC21awXYY6ezDuG1Rrx2F
BUiuu8bDLtgvfgL7hjVAop3BTqgPOscDDrsfQTKdCw+ELdMx/6B9jl4+6pif
7Fh82EKinaT70iTxvGNxtntlpmv5Ycs8AZ+oPsNBkuB51+pkB5F/ba53Y7p7
db53fZpedq0u9jkWztk+37NBjQg/S8K+g52cvs25XuccpDvU+yIUu3sBnHct
D3iJ7Qtwb9ws5t0LjPclxjs1GDX9/rWBwCrp9r7AUo9/sdu3BrecBsHw9QH/
Krv0OBOEp9Ng16/2E9t9y/wg4BgKOofDM93rxto3qlWNJMVFepGoMsqbzWUT
MSS2Yhrka42KG7nUzVbMIIbnF0qlVYor5YqaC/cmW+8L39tsxjXzHwXHvle0
X3yTEQYplRhUby8XxJIlL5/V/MWr63/jKDqauhR0tRy6Wo687Y/9XU98Haf+
7lN/z5G3e9/Vk9nsSvgHt73Ec1H9eCDuGU57R7c8I1ukvd2DaXoZ0G0LvAfZ
Krngtn9kixqJeQI7QZvO940x3tHf8o9tCbCD6tnZAefg3ZFtoJhGRnewZspU
D9EI+IzTQkR1A80ReAqAjaOHsSNuFeYomiAMf7bcDYiuiehZ6o9sI8BGh6B6
kvR0Z5o7CO8u09a1vM466XKroueO/OmCNjJfEHq/cPHjhnm6m7DrsQirFzPF
IV1IbJ9s26hDDGQt8byMa/xWyZdpgqhF0ZWGK9L1d6o+SxiPBduT+hMUMTNw
ZRsDYkIQH8LVL0mBA/tc7gBxIwRevdhk5BnGkd0DiZ4ynmb4XcL4rvVF1iTn
ZVmUO+aqaOcPBWB7ijksqiikzWcp01Ok3xrhb9PfASrdjHumjNj0U7AdO1sZ
ssynt9K81pmmv+p5IPq3Gmn4jIXueZIxPd6xPuEYGFwe050Ebp8kar46rfuz
0+o/DWhefaxY65PMV6WbNOvRo02FdPmWZmC6x5m0HkVMe1HzPil2lNgyH4Hq
NO0KvFv2I7btm/ltnHyqEstMMpf5EgV71eyi08tLclmZXCF/n26/XtTl6cnc
K3E0SDeU33wQFieM1pvmRjb6q0ZzJM1FKivdmaS7Vr50r2/eORa517Jgq3un
o6D/cm6DVqFFJWEmPFchy1Grc/NytaTbCzTFRdrS4oKyQm2pVlOsyS/MUWpq
NFfGr72zbgwF7dtYG7WRLE9zAV5eKrVid2kfavOKqi9c8mU8LVKKeCWUCwUg
iJHVeNZdEeue6ADmRGMbsR3NY8dSKdx1W7a5RNoRUkrhrrvtYRc3gN3Oy6O2
oNMW3LBkNbx7POq08qDFv2kNuCfCBPY1s4/Y7gDkCfUA+4bNd691jqh+v3Xu
fvvcg85ZYvtDxEPOEduZ4cvUGO/zkO5dy49aAfxptuJnegjvy1N0TvcqQX6q
a2WufwMBkx1L8z2rc91r8z3r1Oa6qa2hda3P927QS4RTdhPe4cPPdq5Pt68S
3pcY41DsA54lBMZz0lOvexEGjpuALOItl1m6owolcE0MD6z0B1aELOf1VgTb
kLYfwNLqKvch1LmJmyAUp8//sGvNWHu3WklUzxNV0y/yoEW2xcXXjGQJlJ58
TSMXiFh0TtNQYCthrqP+34Y2nVMgF+ZJ+fTcWq9sbs7tlL8vMJJDeZXEn/FL
H29W7r1o/Luftv3P2w2/WbkeXYHLhGcQRz+iNBHeMxhChbSBuBMZtdkyaKh1
yWDHkdg+sk1HeukdSsNy1+8K0S4agI9zGOB6ZvsYihigoMFo2j2S8o2lfWMZ
P+aFLN6pCbwT+bOqfoyXTZnnATAfdwsZYf6w+MeMkHXpjXsk+wn1EdM+AmmE
mB/dFZY77B2aBfhWWHjVC/VOwN8lWW6ufrdcqmuTe8zye1P5/oXCyCeF6x9U
TfkMadKTIoxHrMlG9XDpacYh2T/d7rwqtRDJq+UrNfKVOqmhTdHWqmy9LF+9
qr5BbH+r7GOS+gS66JioivaYqf5E1Lfh4jbI6mLAnnLlYY4b0WMjErE/IPOZ
0So6fCYdYctwlWO4KManopS9OA2zgAkLo8TzJPOcWhoYf5rifkqcRudYzjj+
kB4ZTtLGkyRKaD5OjB2n+e8Wp78GAH6KI3/ulpUmiNMLZwZ93vQZ+82ZTrYx
QZxiBzo9pq2U9dTfv+e9erxz+ffO6v8yVfrzR6rAiPRGk3y7SkJJyUqptla+
8cH1qZBlN2jcQQEW8yH/O5Jip+NhyLifnDj+5NajAqlYLWeLyfAPJ1vmq0F9
be2yf0xt0XIAWPn3sZ3+5Mn5bXmjnxa7zTnvaySt4jxD5CK5Gyqdn5QV51t4
ENi16kK1rOmq1Iff2GEXZdtrSCx3b37c/HC03NSYf/VSTmm+UqNUqukJgo6E
99wcTT4IL3z40qLCS0UFpSWFlzS5BVplUXNh63sdj5zmqJcB7rWmvRYidkbs
giF2nUZVXqHYx1NeO9fsMkexeDqeEiuhXrZW3JDocQ5rueB8nKNfYlzCC0GM
MNXNYlVUxKjHoMnt2QD1TQA85LKHiNub4yEnSXHCNUEeSA84rQEOjAk6zf5N
e3BzPMhOe5DA7rSH4MzYApvjgXWbl9j+gNjeNgezvW2Wjo86FoT9PtWxSJSe
7lzCy3bqL7Lfzkoeen6R3qJzqM31r013A/KEd3qLxud71gTb6TjTuTrXxWwn
1PdtzHYD+7ME/N712U4Af7ZrbaF3E3jvZSu+C9msS72baJDuxHYXe++AM5wZ
OPYusfZKCnyVlPwANPlKn2d1wCPCb6Dwe90r/YjGWen34K1ecWZgsntdV/9G
tboxFyl1qCyqzOY7I0vitWICsljKL5VLryiuaqWvg7i+66ucK/bv8VtoaiiU
iwsUBYXSpYdlzsXmuELSnGejfv2HHR5VoaKwpbb3B1emYzU/+/zWv96+/ZuN
zgTNX+simBN5WBH3cNQ9EndyARzXcMo1BKSTPqeOEO0k11mxZ/z6bZ8u4yG2
jxLbmeFjW0H9Dv1aGdoE/wydHyTw6ojY255hAnvGO5ai5tNTS/t1W1mqs98u
+kR7Pyv8AIt8uoNfd8H/HbECm1X7PIkI0U5sD+qz+h++EAfbCOM9jKQn9nkQ
t7PPMh6eT8r++FG7o0ZqviV3mOV3HuV5lwtT94pd75fOrHb7Y8Yj/xA9L9DJ
0P/MeTwj0KQWtxxNtTpuS71tcucN6Xa31H1HuvOh6pMf5X1mkS2dUvdtRfvd
kg+RLatDJeEEChqIEgeHSZbENBLX8TIrFzqAVEYFs8cZE/AICx1zweM4smWJ
lqeIt8FEgKBKLlOP82Gtjz3J7ksFS/yJmDUAc3D7NMH1Lamf0HNFBWxiwvvP
mp4m6J74iJOUGVGICFYxnYhSDMTtuBFLnPQXowZxbsLfGfGKRkxPmKrMj9PW
LN4zYtNnE2pyYqagvv1xyobQKW/LQbL2q5PqPz4o/9V8TsoufdouD1RJl2lC
rJCqy6V6fe2bTn0ybCWhvk/zMml46tB3Cen85q0uTV8uNldViYgvkaaUpwSK
jXVv/+SNP3vZ/avZAme3NFonXcnK+Nd/MKxnqNuVa/60ZLNZalVyfTCB9nPC
XyQEIvAgX9IUKUsLVZfq8poWTa6gfcsr9oA2J0N21NF1DPof3Xz0VtWdroLO
MnUF/WXUEPAo/E6dXHU+CE8CnvFeXJjV8Hk5mkJVWVfV2L2+pcCdLf94xm3B
tnSIV7dz9V0Lb0JtSbrNKLHL1QCQPYqFVF4qxXqoBSKcwH6hyUmue8YxBbjM
UeGoQ7Tbo7w8GnFbwx6UCAh7JrJynQS5yxYSshyW+0TIfSe8eSfssAc2bH5o
8nHiNnhOkN+kl9DqgvwBQfh1Myl2v3MiuGH3ftYy9xnwPv8ZImTmSLGTbn/E
3vsjzml6xCE0D6HkF6hNdaL+zGTnEsN8cZLZPt29NNVFbWWqa3m6m44rs6D3
2kwX7PeZDrCdOL9Aop1GuljS922cE35jtmd9umtttmudOEwkn+vYIKovdjsX
ewH5+c7NpV5hyECxcxSNZ6FnU1StXO51rdJ4D2LpCewEcw6tdxHPaYRergzQ
s4Brsc+xMuye6V+zNvygPu+qgjdkxL5FvIPAa+VJxUZ4Xy/o56DGy6USqaRM
WXm7qqex9Nb31pAR2UzfjauB8JBySuTSSqnSon7Xf+V07qanNr8p+9X+DtsL
FIWD14zvXpterdjeb/uDYNfj9f4QUX1tILQ2EF7rj3AZHCTSYpPZvqhrOAmw
j2TA9sGkh1lNMGdEU0sT231jpM8z1PHrifBQ5hgkaOvAdpLrRH7PaJrOx5m6
NCHdp0t5jSkSxtkzQfJtkvE+xriPFTgTHu4NbjK6dY797XOLHg0WfXYcHhHm
l3OfB4RHwOSekOghwXwQHqurfrZ9vIbM7bzey1LTmMJ+P3fDod2azYt+XLzy
oGkpZkXRg/CICJsn7MDGEf4Pafi46Xihy3dD6tYpxjfL03uNP3/R+Ae/e/23
v7z+z5/W/26weucN5btvFXyAWgeG06juJDJyLDKkomMHqHJsfEzCOKZH2flE
NnOH40Y4dEQ43qiEYziOI4zkMUP1cbbuvQE1zWCG63mLcETgQFoL9vKZOAcf
Icrm0IWW0zjq6uARIDF6hNmB7m95EuV83rjphJ4vEuaTOLb4xMkJYjuHr3Ap
ZmI+zsdfgBs+BXtSnCYtj1NYA+UoFxOmBgI7zT5J03HKfkLzZtJyjMec3oNI
89l+5a/3yv4wkPvyY2mlQxquk65WSXU1vBLdXjSyOBQgvEdQXJHYTv/0mbj9
8KNrk8XSJdW5aBdsz1Hk5qm1OYrCyaGNqGl/R//yhe6XqdaTbtWQ6hu/juz+
wVyFTy6Uyj8tcVtzPs6Tci+Q/lrlASG0SGWVVSsvl6vr6nKbHwwthu7u+Kxp
jyHhMSYI715T0mtMiLx+32hounXhbv0Pukp6q/LrclVatmiQ7oRNQFjDF2pL
iqHeL5UUlpcUlRdqSgpyi8vz6vVX31jQu/130qS0s0V0TXGPWRwJ1HHBdhp3
c1EXluWxrESH68JxjHBdomL9lMC+aQbPhffi5jqNTlPIbQt5CODsqHvvoFbA
hohjxEIqA3wi5ADAYbPARRd+y3jAKcBu9W/a/GytB9athHQQno4b9sCa1euY
8CPoUYC9HebMw7Z5QXVeY10A3jvm0To5nKYLlWcedSwhuYnxfk51aHsan2KL
RpjwU1hphSc/ywJeIF0chYafY/jP9W3M9zpmMLjBYTOIn1nq21zocczzCKx4
5Le62aVhec8pUSK6crnfvQoPZ1OkSkGo4106Z5PeWuonqm+uDLlnh9ZtzT+4
rGli40XmJOjzXaq/UdrrW8JbRpi6XDpcM3S/8+HaqHtR57lW0S59I00Vf0h+
XFJUar4vMJJmkGqp+sP8R2ddfxTsfuIYjL5/+56MQjTfo9tJlrSXDD7qcmx0
pT2DO4T0VbA9soLA+/DGUMw1HHcPx+koahS7h4nnacY7eM6EZ/UO7Z32jOLo
A88z1OcjnZnyMskJ9XSkcfdwisZ9ejEXpPx6NI8u5SHprmMNjwmCzqTPSrFE
36UZIUC/cX12+RUTxBgmjoBeAJxQnyHFHhj7mu1Z056p7v96nBcCWOfDz0Fg
PNx43whqXeov/6BMqu6RB99XPNzUJte06Y+LnB+UTwUNmaj5EAE2DHZcZRRR
l3uiTkLCcjzd6tYr3tu9+tOzhj93lzxdKI1OlXg+UC/OF8VPr/3q6fXfe6Rd
8fRmYsbTiP4obj6JGbLFyriyzTEK3XBhhDj8ashylKbkPaQQXUMoNkG0xzA7
0DlHWWIz3rFNFW9WArwLz5zZi31PCOm4+THBVlxI6Ca8p8xPEwY4MByij5sn
7E9jpsfI3uIyPiL+kPCO8810k5OUhRh+KsrvEPBTlqcpEvBmQjdInrCIuYBu
le0D9WY0BKtjhRQbVWAzC+tx2HAYunWSqv35QcWfRAt+PKP26KS7KJ4p19XK
deVSVXNO54/aV4KWvYhpL2zYoeYejd3M7aAvvIr3NbjYXyk/p0ClyL9Z1hcd
P/DTl0eXJHmfNB/2aw0qfOcV52BXCveGfoliYWpE8/Z0WbJRviGdR6BdLHeJ
5a1LcsVVxc2rObfaSvtnx9Yid/dIfsAkIdKydPdZuLiiNQn8IoWfvsCRlX7v
200/7Cgbqs5v0KgLeIMnrLTmqPPyEUuj1WqLCgtKS0sqoOELSvPyCnKVRY1F
Le+133OOR132+KY16UIlxrjbCkq7zDGvhTOP7InzkulZlY6XCFBH7XS3LQoH
xhbjortRzzgJeLyFZFJOOHKaic8BzzgIj0IBpNvHw+CzldAddGaXRBnvdoY5
LBdBbyI8Ad/ntPocNp9jwuec8K+P+zcI8uMcJ0Mi3+7bGPfdbyeqz95rn33Q
MfeoC4uqD9qB8YdZqi+wAz871bV4wfbJ85hJepfGCe/ZEWI7dLuQ7khrnelm
vH+T6sKoEbSHsO/JSndiO4rPIE6G5P36Yh/r9l4OgOcweHRIq/c4FuHVnCfA
Aukk6YF09nAwKcz1rM314bbzA87lEfd7rZ81FbWpSBJgFV+hgsb4Tq257FFx
vvWGMFkgRRryrsyNzq0OOpZ71td1gVuVfd9lOzH5hrq1XFn9LbALV+eW3J65
/Xm6/+Vil3e517+mCzSV3PzWTbjAL3aBr5KuvH/joUsfXxsObgyF1wei6/3R
1b4Isd05GncOxx1c1tI9nHCPJEVj1Y1G7GX1nvKIl8x2D7eLE8QljHecwJcn
QX6aAnAC33AsSWB367iDSSHt1aXcownMLDQ16GhSSAdI1dM96UmBm28Ush88
R8NSLA2ymb/Nq7RbQX1W1QdpLhjOfC3y2e0XfaI0PwvAzJnsclQrGm7JLW/J
P1zXxEIF+1OFQbvmwXKPPzZxGDLvZV0dYxbs4lYBXsAlDC62hefLo3OFkQHJ
TpjiPYnqa6T6eqmpWzKGLh/G6vYdbXFRDyFmOuZyOuBtLFviGJAH9k0nJIxF
CbWEkPQEZCOYHzdmi1gyrhFdnzCyimbpLpZiz2l/ghvqjxKcAURHLrBJN6cL
AXOYMKYndC1XRSYaQ5nHieE0BRiPMO/Q35DjQmP8uaicRgIebIcgT5pZxov0
Irqn+SRK51PHckLKPEGQR8s+hsRNR2JhVOwEnbAd00QZ0h+QgI82vjqs/aOD
8l858nfN0gctcmeD1FgnXy6XKmvl6+80PyIBEDHuJqxH47XvY8NfRYEoAslO
O7E9h9iulPJ+2DefsB3iAdCY8RvSIdNWd8GoGnXAhCBXnLNdpZZVeSgCo6lR
XJ8qS1jVH2v4d/ranggy/zRyGjU3BqoM77V+SgI4ZMt4DHFOCE14IK1TJN2R
QGROicqKblPMg1Lncb+VmB9fGNp87/r97rLBy9qG4pxiIrwSlcaI8Ailyckl
xBcVFZcVl5SXlFYUFsGlKVZXdlSP3tetb76x5bSn3GywuCwxF+4cJ8K7rdn4
RjbSsUjqHc8i3WWPusaj7vGo904cXrqNFTt14MNENm0Rhy3stMJRJ7xv2oLE
83VrIOuZjwcd9izYhRXjsMFXvxhxYtDnsHs3rB4C+MaEb93uXR/3btwJbEwE
0LcT8An1vnvtM/c7Zh50knqfwXIqgb1rUSynPoSSn+fgGSSuQrp3LT5gAT/V
vTzZtTiV5Tz8+Wno+cWpzkUh40WbxnEZ4rxrbZ7xLiIns5AXwO+CezPbwwuv
XRtCrsOB79lA0DsI71xiy2WR4+RZkzuZ8E7Icrg3rtUBL9jet8nBORtT3UuP
uuZmBlY+7VnorzYXYx2HFAIa9mj/Fpezrjh2INXKRRps8iseMxUiDPKSuuzT
vkcro5vLA84f9U7lKLSvzQYSR8IoCRqjmvE6tTBbvlErjL7z11VtCy3ulV7f
yoBvsde9MRZ8t/1H5zGW59sQcG0Nekwokkquq25Pd69tjETWBsPrg1HHcGxj
MLrWH3UMRUm6bwzFN4cTaKMJ9xg6jO6UQLR7KOkaTvoNwjZPA8v0rg54dwHa
0OGk9oF3XAJuC9rTL5EATjB3jWHWcBHJxxKe0TgIP0ofcd6oP0rXJkmV+cRT
gHB+SPmPgvZs+8AC8vJqLHyeUTRYNF8DHPJeeP5Bw17W0tGJKB1esTVm+krG
6qXLFoVtKScQLT5xFe+8XTD3ydXliHU/YNj2IzFqFzLSBLaHsGTAzr+epw9E
ex4stcR6FMZKqapGrq4jqsuXqdXK9XVS0w+KfhTvRBYtytcYUQNNbCxFJIcH
woUoUUJNlDjmCsYEf0b6seAtC2mIaowYiNIMapNAKBye6Ai2oBKbWKEqjpGv
YlCLMgv0khR4zEBzyiHPDkdx8exgAL1RVMfA+bmIPzziCE+sF7NFg78kfzpu
mzLjKQAVePh8+ghS6TEzLqFrefAwzjeJ8/wCsFuOooz3qHk/YT9EPXMEvez7
h3YD107Tdb/YK/vHXs3pe/JMtzRyVbpWh9XVmgrpsrH6TZ8lvToYqJObtYj+
yheejIhGyFHlKxSqhpJbobs7YRP9W6SDxkxQnw7bMz3Fo1zjUX69Vp4C/nnB
mNZiy317ULJ8oFp9pAk0SzfOt/SQs5qHg9ZqtI3TYyvhiYzfhIx+D/veHpHs
iY2hk35zkgS8qJRLR7cJJbbcXJglgMT/1BIR/uYnfZVDNZragtxCtRI+vJoY
rxYpTwUFBSXFpeWlpZUk40uKK/Jziiq0V823PliwBl0TKaeFq7iYwsgwQmoS
h7LbEcq+aUG99GyVXZLlBPY3Yq6JiGsiujkBztOg00KKHdh3WEIb1pCD6wPQ
0WmnfmjdEtggwlv8G3a/YyIgMA62Q6v7HVaErDsnYMggBsbsWbe41yxugP2O
j8C+ZvdQY6QT270Edjrea5t+SGBvnwHk2zkptVNERc4RvRH03j7/sJMk/Tw1
6vBiKzQ88ptIzHfgHEY9OzMg/MLrwh7WTdfqdOcKIRfUxUor6fk10vPEfPCc
nZkZdmnoBII5R9SsLvU7lvpJhIP2pM+FDwMrphdgX+h1iHGodyzCkqp30uXz
veuzPStz/aszg6vWq29V5yIRCVvaQSfIWR8GT4bZozBD8hX5JXJxg6KxLb+n
75K+UFkmdlCCLQ8CK5oKWu5e//jhwHJHzfC39LYM30Z9S+4eL75frqr97rs0
UzSpbs50rSz3e7m58XAx7L1xqffiZIWoZc14p+fcEqmiv1i/MOBeH444hqOb
o2gOovpgbL0/tj4QdwyxgB+JbY6B8K6xpBDhRGb3aNIFMtORXpLYTlEf4yNJ
50jCpUsSq90C4DRIT816ZjtPE8A43k3g5kMxOsc1wsfROHXcxHkD+izmEz5D
ymdM+2gSoaeD0ZR/jKQ4CfgkA188C6Ah2Ia4zcY7L8PtXnjy7M9gHJaObssn
PKKxTMiy//HtqWqprl/uv6eY9ubv+LRH94vd71Tcc43GgsZdzAtjO0HDbsjI
wZw6TBAielNMEPBnTAfu0a2hAlM1Qj5qa+ko1dRJdXXKy3XS1TvlPwyNHQS4
5AKKGIPth6hIj8LCUNokzoFcEPWIKxJnyRkxZIshRNgnIZizYXJ4cQI0uZFh
PsYFivkpgAN42F0xCFCjbI7wTLLXErd1+0KiI0VILyrn0xSwH+NlYv5ErCNw
3TZAnsZxiekwauQTjEfnhRoO4RFZUB+AL0TQEZFcvIWiQMbsxkMJ21EMmxPt
n29jQceDwOjO5s3dSO2P98p/Ey/84r7sJOpeRYWx+koZVTTHKif6iw0lUlme
nH+xfRKX883Nz9EqpJwfdj9M3TkMGtP+sRQp9pAxE7al+y+NqUX93gu2K7DI
pZFLJjvWAoPbazdDq1fDzor0hPRBoVSoOP9RZNkuK3IUee92fYrtQY0xkuVu
C1vfVhTFJa3uM+GIhU4uz4W6uJa4xxxzGbGHBXW8prjflqLxhWHHnaZ3W0s6
6zSXC3MLc1RqlQqRNGo1Sfh8bUFRYeGlkqJyYvul0iqNpihPXdJU3v7RwKzr
jYRrPAZEW8XCKNgOsBPkebcjIvwmZHmYqO6+C7Y7x8Ob42EnXBeOWgfMwzgS
24F3JJBSh6i+YQPt4ZbfCTjv+B2vqXdId/Eyy/aAw0qi3bth867aPGt3vGvj
nnW7e83mXrd7zsHuW7d5P2uf+qx9+n7nzL2OaUj3DpgzDzvmHgj7vRPZTIT0
yS7qzz3A+Hy2dCRpeBg48+B8F+waqGXW8PBq2Ient9iiWZ7sWJzrXl3s25jv
WZ3uWp7qWH7UvjTTvQrzpIf1PHV61+dhpKzRu8R/ojTWXiHv19lad2Q99l4n
YilpImDsE//ZyXHMsxUz37u2MLT+ccfUrdJelaSR2QlUvBapns3zZ86r+MFQ
q9BUK2tu57RaL9390c3ppWFXS2kffbNy5FyVnKvG4o5SQm5RUUVObQ7K2X0t
2oUrWCyVjOTfHdBOiNUi+aKuL5fUUErK5tzrUz1LS4OexX7X8oBnedC9NuT/
rHdFqyq9uMl5ZXgFPT4UK8rKpDp73bvrI2HHCOE97BqLbY7GNgZijsGEY4ha
fJN4q4O03hyBtGYRDj7TIMwT9JNOmgLoXeqMoIOTic98Ds8I1IkTzDERjCXF
DMIfFHWORN24OV0S4yOudetxOT6OP9SrT3oN+FAvZhZieIqal2A+mtwcirlH
4j7S9liWzcD/Gc34Rc6Ugdk+lrXihaTHcq0+4zNsbdJTgD7jMMSvadpvSrc+
VHyykRsPFJ3OFyTeLXo03+YImXeDBka3XgTP7wm2h0zItwoYOAQIW1Nte/W7
XuPOaLH1snT5Csl1qYZaDRFeWV8jNY5XfBzSH3iHd0KirI0OlW1iXPE4LnYS
ZFWMsHniofGQU3VQCYFrmh0Kxc6gPubMqWwlzHOlzcaInivhGLP8v5gLeCo5
YP2PMwVyOUp/P2oQI9lBLr+GeFEuvJCFM+GaCzjQyXtR3V7MiNgVehQSbyEQ
HbPVIW8MCnEeFXlGpoNoth3GeJw3DIVij1sO6dknjC0qROA6khFcbTuh6s93
Kn+TKvnpI4VnWBpvlJqqpKpKufqa6hZp+Fwu6ss+DAwZlZyTl6NVKnOvFt0K
2WHChMxbAUM6aKKpNhW2ZUaqTPTFZsNTKZxPUviIe5GL7/cvhsa3fdZ0wL7l
69pZKo21S0N5co7ynO30EWoFYmyultwi0RuAJufcH3NMlGqB6Q3gg/ZeqxhB
NcXsuwx5cN4QpXN81pTLHJsfXptoeru1rKdKU1mQo8lX5+XnaHLVeXk5+Zr8
QhFFU1JCeK8sLLqUk6ct09Trrr0xb/Zs3okh2Z/dFY+NwT4eJ7Yz3kmiRzbH
Iw572PVG1Dke2rAx2+0hGiTU09FpxwgPhh32EKx1q5DuxPAgVPqEf/NOQIh2
gXfwHFT3O+/gyCunvjUraXUvifaNu/5Vu0tQfR3S3UfSfWMCSv6z1sl77dMP
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
IE+jTJIXcNPs5CdIvXvqSfd5yk2y/HJ/PD6kuutTuaKa3GXLf623/d1b7elq
1/tcoJ52Cd8e8TYcxoloTJLxMglCL6PedZVxXiE8nn37LCT9FQwfDxjl7PB0
o86VCJKhIwob9kr9ky32jLcmOy4Re8N+DqCtVMJBRhVKXALON42THNLDRjeL
asVLKfJiLoE3RwKbBDkzPI9ATZRQUO4Jj+UXHhRulEo79EFiONYLbvK4A8xt
RjrD3PMRop11u2gE84LSeGLCphOJbXESbA9Q/5JQzx1cVgDhrwuEbkD7Y55a
ACZVwU9HgjlB/irDbM+J5rssNFY/s97z0sLlqSv7SDfcLnWZVAh6xAYcsGIQ
Z67XmfV6s1Hq3O8q1dr+4w/S4bDK2q8a6oLf1ffIOLJri+YXaHrFq6K+esFf
D1uTd9T3RdkZZRcPBL3oJElzr+VFcq6cna2nfWcIekEoI4M6UM35a6d30/Oa
lR6pR93YiVWj0hjURpPGTGrnWcdEkqT4PLYWJWLngghrTAWY2CTFZytpFufZ
BRGpWMmgrgvvakHHBcQlZpBYBE8GuxcFSqjZpdTjKqG6C2lvbD9aCXvk1cc/
PusY6W7us/CeTcR2vZ4g32xpbm9p7ero6u/o7Guz9I0OufbnYsmFfHw2C0G+
VAKxl8vp1yA8UkrnOPlovhCfh1xPsrWODiMdbakg1kypj5IC6MCWiS0KtkO0
x6gt8ZopkXy50ZZgtuO4mALbSagT1Ue34cm83PgwvEXcJrB/GNmh43vC+wih
nl2a0T0256m/w07ODo8Cu5tju9vjpOpJ5x/QNZscbEMKf2fsSHB7b0IJlRT2
+y6f2WfTRrkAS66s2Ce4Qbqf8AdP94WenzjZsZ5O9Dm12NXi94yk2zBHmt8Z
NPo2XeugYeilZXzl0c8H1viRNYYZwWT02Jo4tsYJ8kccPHlEmnwsisQowjjR
flpkxcZPrYmjicjJDKIu98bCp3bZdm/2L9wYOOF96n6rxvvDnfVDW3xnMrJP
H7Gn347tmzS/s/1Wtxslw1jL2LE9cmpNsdWfEOo9PJPB0uq0HCElP53Gqq4V
eN+ePuo29LF6R8IU53SjcAH9chlUxiZVc7vU/Uj7au3FXooIbC9E4djnidUJ
wJnAW+YjfPWEp8p+C7G9iJfuKoE95izFqbnLcQ81+DNxdyXqLEXspSiR3F0G
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
Uy0y+/Crxu69vsmsNj3pGIZNTRifL4rwRTbMcYwh0KWACrpB4B1VcxGLCJjz
bhdFseeFUh8AS6hcmwsJR0gXgm2CSgJyfEHGy6CMmgCkqxeJ6hkcOVc0+Pi7
Ry0vO5t7LeYWi7mVjk3m5vb2nr6Bez29dx/9/2S9929r3XrfuTcldvXe2zk6
TY0iRYpNVC8kJap3SpTEzs1OUeW01/f6Gkngmrjk5jp27DiObcB2ZmLHmHHi
gmRmgIknGMwPASaYGWD+lHm+z9rUe64H78LG4ubmps55dT7ru79PWYPTV+vJ
XLBK4lwMSHdAu5TbRtcvhYOn+e1qYaeaC1TywUpqo5jhZo94lyOnNJTtSnKz
kPIXVUMGJyuZ7XI6WMhs5wnaBxOnx6TYp4R6Pz+xXNLk6MOZcN3PZhjdhPoZ
+PBHBP/pCzqJNHjOmSTYvsyFpD8XSTUzYTjzU6zzLdcA/uw1v3V9xcFTeDuz
N0jFmYtYBhwa3mZL8wJ2jcZYb2g3tPcbBqcbrHtvji7nbk5nwrRkXNluaVzP
xQjspNtphK2xS8st8iHnEkT1W0fqmp0ZBDqtKY63poR5Qti/48z2OAdPScxf
k+x3ZT/020RV1Lf7N2EDDrnfq107HbqO0a2mY0hrx6qR4EmCnh3EE0TUmXWM
fN9Y7OUO9AdpkMy+/uWEC047yXvx4JCYL6QBzEp8vpSAkAa6U6r9UkngfDkB
7L9QHfBPuejiPK1NaVcx6kra+hz1nFGvUZtGiqFupa2X9XrJwAK+qUcztDKw
HZ8r5LyPrJ+LxGTW7eWEi25bUVT7nfgMVtNCoHgJ/uWUu5Sk4cLegmkX8J5i
8ApnHvwHw8uqOAfzIeD50UMFu6C64iEdTo8k5Yzv8XDyulcadEq+z43/+Df6
/4evrb+1UXd28eE2t/BIf8yX5SBLbEdkFtJd+b4CC2wXyfN5fjdXq41CviVr
++IC5D1xnti+1OUflgaH5AHS7aOq2T4ySmw32tLOe6Ir0mk40wbt7rk7PTer
hzIvs+sChwcSnVsoL3ynNrT3fhV2h9oMzSMaF/Ogl/TW4tfiIgwKPEcwpdkJ
+Sr0c5F3P2E5LW7ylW0cwv4X+pl5RfhMb1WWSKL/sEhrB1cY0VsEZ/FcAJ4L
9Q4Hho4iTvoD8W7Jx0h/Ee10fhER55z76X7t6+brk3ZpoBHpjmY9g53Gi8eu
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
bRX4WvIJ6S4Wly8FH92E8b7IX7f49fsBsAs35mdEwPQexvvP3q/8kD4Ca51X
CtLnTPWvWAsWQXiiOn4MtM/9sty31SJ1NSLdUQRPkcfOYNdqtaTWTcT2eqlh
7f3OA4F9+amw8lxYAsyLvA0osZ3mKBRd+ciQfy6vPJdY0jPq+QI6LkLhi4vz
JOy9P/vDiR//ePQvf9j7zwekUdH4TtQcibIjYvtAy3hytUTfqKw8KCuPeaY6
4Z2GslwhrZ5frQLyDGRkqnBnrcLSY6G3Gqzba5XbhG7HXtkycm8M9Qajxjje
/j4TLKNzy+bHWnb6A3pwsVXOVf9ge26V5oiNcmt0pL4Ug8+5zYfMOuQ6urUg
pnmfD9zDAN+oFLaqJeI5EhS5bZfKdpSXZv0P2e0HYntyo0RSPOKL2brnB1uG
G03NRmNjY0NrU2NbU1N7e1dvT9/Qq/73554bTnSBo5LdBtshzmGwwDBH5DR0
n9gqJP0Q57hgmy4rge2BfNqfzwQKSrCQDRHPgXQlROo9T7SneSpQ2P1wujdx
sj9xekD0njo9mQbn6eXhxLmIrkKiT10QyY/ZhMfLmYvz2cszyyVNztjAIbaf
q7r94tJ6zcnwLODn4KWD7ZarsA1kvpiN4Az78/QIcGa9muKdhl6giuCp1tCm
b+s1DI7rp1b6/Rf2a7qM5P2VFVbMC9tJuoujSJK/pKM1JpT8hYU4H71miU5U
v0YJFcE5HrETjemYIMKTwqdx60ytvPdzoqyGt+eTX+qDmuQWW51jv+MYneTR
0AzGzp0zE2Ge06MBdDs9I1joi+K3LmVueOnb+KZI3dShU0HLysh6wlNAGSzr
9gTjPWbPJ10l9Jl3FmMO5L0neRA/GeMl0tU8SGPXqC7S4wnITmHsIK8y5sqH
XbHxrrcaNWv0pW9kvahgrZd4Vz5s7dHYKLW0St3vzTP7708TnmLCRStLnvCe
dAuek4CvQLp7yiJ1J+WGaCewE+FTTvwAgLy3nPYyseHkqIRnlV6lT/HqQHgv
K7jbPVNdZAEVlYX7rdehPqlvQ975YfNv/1rPv39u/PFW/cnNTBJJO14V7Gl1
aajW2H6vtkHw0mP+E1FdcXH5lech50WCPZL23airErVR3GryiSR9wfdxozs0
Jo2NySNj0sgrgH0Mul0anjFYad1UGx17PpW4ioeTJ0HagkfdYYqZ/yXvYW6j
a73YbfYrNrEitvu+iH6bHNuFVieK5hHbJcI/c8/8j0XvJ7ozi/PPxUXAn76u
6IPg59yer/y88B3rbX4K4C9iJwc9VUqLnwsLuLkQ4Sg7YncdmTBLPJaFOGeM
s/JHN8VlfihY/q649BWfXUR5ka9rtUVqbZSb0CuGw6Z1tQIlrVZvMjXqCYeS
0TceqIYI7M8FEuSrhHH6algx8NJXP9KZ0uonYH/1Y37lia6BXbOM80Le51nG
55eeaZJf/Zxd+5ncys9UXD/4h7O/9bNjvzkijfOjZb1c2/Mdu9hLdT0tY/Hl
HIn27NoTxirYXt54LsCTqYLtaw+APBOeTXJsQkR6/sH2nGrIzUg2o2yqYytX
JMzo6nRmndkgm93vVguh5yytCJtqcgsqhjZZ/5My33hECJWN95y/mgtUSX6j
eRdhn/DOAU02ZHhslEXaeSn4SGwvoDMAugcgKR0l/8R2Lh0NPYhAZ3KznNt+
OHFEJtts/U0DJkOjydgEZ6aptamto6u3v69vZO6VJ7mZA8kDRO9idqeY3yWV
XsjAMCdBXk5tlxKBYjJAL3GNQpcx0jOBIh1TW7nUVlbZzqeChRSJ9t1yZqeU
3i6kdvKpQC40ebo/eYwxdXIwdXo4fXo8Q3jnlEhOjySqn0yewWO3QGaLMOvZ
7OXxzAUMnGmEWU/Zlj+fZWiTjJ+iJeASKZHsvSOFxqLqeVbyYS6SOqczi2Or
Oo3+G8UOj73V0NZr6h83Ty30bB5brs5syKK5sN5E5u4E28W4qg0Eai2Q8dDw
VtbS1jtUuULVA+OQ6DjGbuzs3tjil/SuLXoxe3Nqv+lq6JNeknN4haG5TjKO
yW/8+tDNWOzWihT6W+h/iH8YMkz1GwdN4ldW4nz0xpmZHfR+s7WfukGMsU7f
KrWvjW4m3Pka20mfF4R6J0QT6qOEaCC9kJyH35JkkZxwFuMYBR7FuIPBDieH
jsjzifN9Ui6cj7lydwtJ7/hik7bppZeaumeTXOv9LusMstEsNzRqmpuk9k6p
396+eDmTSnrLqYVy1Ek3KRDhs4LtbMsIrU4D8OcR54WAND8tBCliPjBeZLyr
khvPHfwR3ATPAjSBUUNqP0lrk7s00+IYlV5f1md+sfPf/lLPv7s1fAq2n3IE
9j5NF7vuOcEePo8ahHVWRH1uhqO0okiKO0wigYfZLupkSa4/5BZg2iBbz/ec
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
WJ0josbc+Rd0Y3Ughe/M0K1u59Nxd06sFz8l7FnM39EzAt1zIR2c3R1uGyKS
S7wtQt03Fo3Au2ghwj68ySg1NqJf3/Bkq3Pn/fmdK68s3iuInBZpKcFa42K2
I3qbV8OvxPaFEpBO6t1TTNPcUxSeDIE9s3BPaj9O9/FVlwf8/dLQvib6S11/
/k/7/rrc8Iv+5jMUcyEsW8x4y2KNSC+URbUU452HWCM8JXp2wKqBvFBmu7vM
8VxV4asVT8iWEX0pqznfU6DvkHT7W/nNGzpK48T2N5pX45pXM1pL0lUoLH5F
6kutpTDRNS+sEm4dL07m3Jyiw+IcJVS1pgoKp2IqTjhCWa9oj/AINe7iuiow
9onOZ5xVlF8tPIoy29wCp/oIvPs+soOEwtuCD1FaEYotsMcO2i9+zC+RMH7O
kSAXdUM+Ijlh/Dm/+FxcglAvcQ/GIp+ndwvse68N77VJfY0C7Mh1FIu4vo4m
Gj2BHVtIaI1muSk4fVjxfyawZ5buc8uPJe7cwv1bRGBUneTgwD+LM2UY7NDk
BUa3GEhxWRFsfyTm51cecitQ13QUFkpu7T67Wpo0f9Cxrta8bK7HnoxJ19qv
fdspD7ZJXe1Sd7c0tDC8nlnPE7ozq/fKGiKnmeX77EoVFUYEYU50F1mL2TVW
3VtPFcfnu6bUlGQloSJ+zzkfUkt412tJwBjnXnvTJGvXCyIwiibnm5iIrYsQ
DGW2i+2NuFyU3XJmO9q/BNl4hxWPToyZrWJ2m05y00W6VaCS3BRtu6pp7s1Y
gzxXjAZL6e3i3VLc1jY/ZB5rNXQ0GVtbGttb2zo6u3q7egbejcze+BPpXeht
gjk8c38uHchnQsW08NXhw9OZLAdPId3pytR2jpaDRCCT2s7SJLpFkzxnuRfo
rb0pUuzH+5MnuxMEZLA9NHUWmiDOE9VJwJOMPz6wHB9aTg5nTvYnjgnyRPiD
yaO9iSN663DmmEnOF8OWOSO201oAsGMhoJcs1KfPT2bP6eU+3cQafivsC3Tn
r6+v17eY2nubBjv1veMN0xtjeyez4RNOfT+bDRPAwfY5YilBm+bX59YrOvky
oNu5uPXCigT4c3qppkfeiaLXS2skbCV1jcQYblxzfWW/25w8qJP1stoRrNYX
TKprkBttsvO0+SpqSVw7YOlcEdLpVlasF5eOuwv77dksrSkRWjJeYruC7SNt
b0SOikihRD6nXGeUDX31AzvvD4jtEXsKstytCLZHhUQntjuBa7jupN7dUO/E
bRbnwreBmcNUz9F5wj5dKdgOS4fOwK4npOcJiYTfF9/mlu7jzt4tZC88N67x
hQZdk3g6UXerVPFeVw/Ccy8RCQLeqDGbQPi2Lnl4pskbeH1y7UwTuhnmuRjE
PBgLn59kPPOcRnKhGPcU1LmHA6+uokinJLZHHbm4p/ShwToufUjpvv64969/
uevP73RP+4NXqYUyPQ4ksECUM74yrxS4g5ogNF+I22ENQfzD7S/C1XeiCoCD
y6T2K5y9qVZU4YgaW+4/SZxfePT3HowT0uU376U37+W372Ti/Ku3mtcW+O0F
ZeGT4mGtDp5/rNkvaoMy3hz8kfvS18qjPGorY6Vm8hPbufXNgyrsAeonEJ6o
7n0oLD5zh8xajqi3miX1TisIuE1PBI/8iAFVD+Pd+yXrAtWB/aVPSCMkqnMy
YW4ZuShIF1/knMMF+sgjrPgltHMpodPLc37hqYxw5ydP9xaBvUluJcTpZAP9
P2XFrieq6+qNJkNjo6nFqDM11bXs287LW5/zi9DYBGQCOCc3kjJ/YhPmk4A5
jPSlx9LaM2BO7y4/FpYehAPDXROfRWeA7CpJ6EeF7gYBzwJ77SG7fM/HSm6V
hHFxtnFabMOqdkBS/XZ9o6ZrRXdpkze7pP5OubdN7myVuiY7rJGFRDHwMbNa
yaxVMqus2zdqQyS0IJxazW7wRqIbT9X3ny61EXruNshGtClWu0QyZbTGhvrm
gGNX2S5n1gu5Td6NbqsiYqbYh86PwCg3V8dbCgdSleA9KL19jyz09SKQvlFM
0/Bz/jl66tIcQ/QBUNChsZKkRSFQzu7QB8vpQFHZLuFLg4VsMLf7fu9Dw0y/
ecioNTeaW1pbOzo6ezq7+wd6RnbdB9mDMoKqkOs5YjtJ93SokAqRRM+mgqqk
RzoNXUMXbGPQW/FAhoOn2UQQwE8S/HcKqZ1caOLkAKkyYDsS3adOdiaQNnM0
cwyqTx/vThzszxwdQboD73Tx8ezpIb+7P3W4P3V0MHUEws8cw8mxAOmg+uw5
rwJnJ7MXNIjwx1a6w/GB9Wxr5qhR3yoMmfo6rUnf1NM82GMe6De8cvatHVro
+ssTgB1RVDpezl1f2q/DdJy7opdnVgJ++IXwMG3YdSG5jvx5KHzVKkFDGwtQ
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
RtK9o7uvrau3taPb+tZNOj/uhxRX9gqC53RkZa4kgplYMC0wntxRiOHx7Qzm
zPb4tkI8T2zjJdi+nQtOHG9PHoamMEjDM+GPticI5oehyf3dqQNS74T0PaL9
1FFwkqT74fHs6REpdssh8G452mfFvvsB43AGcVXEUmdOhD9/ZCHUHx/NHh3O
HodmT8a73xNJCOwmg6G9qaO3dbDTMDjU8N7Zt0Jrx4mNwH52aqNxfkoAt5GM
p4E4LEz4WTp5fmojtkPJw5mxXl3OCVtG9WeAXCtcGhgppOGh2K8FgWkc2C5b
jd2M9Lpv8h61ZrlhQpo5aLqOTKYueIEAt0ml264v5jiSa7+9EK47i/nLGthF
RIDufDJ329Mk2F6vbgeJfb7qGmTjcP0Y/c1Eie3c64Y9dkj3W4dwYFhvQ7GT
Sk9F5lPX88kInRT+jCMFv8WVApZVr4ZwnWC1n2IpniDpTjC/Y4y/6PmoC4SP
zCdowPbh63kk7+aTt65UdCF9603tWY6sfdY2NcwqodeS6PgqaetreOdmkkik
IQ1vIMija0Fbm9TdJQ2/MVs3xvcjzmTSV0j5CnFPNuHOpTz5pIfT3Vl+pxYq
68P+YWnoWBP+J51/9ttD/8tz4y8FzKEoEj7Zh3EVovN5zvYEsVWkC6ddNWRy
XM+bFb13EGl15dn5KRDnaQ6XxoWUS+TMsNnOSfL3uaXHw5GIXXKRYp+X5jzS
vEu2z0mz1rpZp86TmMtzBgs73osfMfHWdgxHbswDyWbeK5ZrYFXXpSp0O8gv
snG8D9wPAVn3hGKiveIqZ73cDNNzD/8fS8ADN7ovozkDveUrpxcg4FMwasrK
Aprkk1anj2O9WLhntmOAwL5HQfXsAn4eEvMKLQHLT5nFh8rW17i3NNXkbJO6
muVmg4zdTrHhqaxTJbFGp9eazMZms6HJKDfOD7gLm+iaqyxX80hBfxD5LTnk
tIjklkfhzLxkv7BLA/gri1X6VI77MWaXSjRyaMwImGdYurN6rxbWRcNGLAHI
kFl/5POAf3q1VAg8LA9tmCSz9huwo5JOQ79jJufIesn2o58f+9M/Hflvfzrw
337S8bfP+t/Ykk5fSe86pa4OTRctXi1S12y/72oxpfgraQC5zJuKcp9GDokq
BOr1POnwsvej0lmZl9y0lKjdyTh3g/hu0Bt1Gt1g23g8mM8HymmR9AI3phhf
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
V+mYWi0SfvNb9wdvT7uJtLKurgZ2jQS210vGiZ7Z9Fq+iB+jggfAqS8/HPuj
P3jzX/9k6P/8rY7/9Fn3mwdSYlKy90pDhPd2ubtF6ujXDa289Sc3S/ntp9RG
kaiO8OhGPrmRi69nY+u5ovc53/s0L7sbJZPYbpIVF3Zp1RsMWq2h2zwYXokl
twrRNUWETRMszsH2LTTdzQSRUZPcykOWo0NXEUHVICKnyQDhvRDfJFmeI8Uu
0tETfmA8hZFjvx055zTifgVvBXCM+Uld545sV/Ym37BprM3U3Wbubm/u7erq
6+7scU16QeadzN1WQrA9vZsTDBcmTDSYIsin9jFnNyaVDAHmNE/uQd4nEV1V
4qG0f3qfwB5CEgvipLtTe7vT+8RtkvF03INuP9wB3gn+DPapo13LAQE/NMmJ
NALsM0dQ9VP7e/SRqf1DCzGfUA+T58BCawRutWM5HG1DlqCuvq6tqbW/a6Cr
oa9bP+zo9Abe7B1w+JU0+bn94hThVEI6eC6Q/jL4PAn4sxPW82ecP3NuuxKE
P2d7hPNqEGM9JUk/d0X8p2Ng5tBY36jumieJzZXot0tnlpqsde5wZzpiiYfn
hYt+I9h+bouczKLDcNgB616o9zArdrjujjsYMlZ8Iy0iO9bTlpqTz48DvPe6
XPfCdgL4FcHWzsR2pMJzCWY7uE3EjrgSGGyPC0EOoc6XEdXpDF2DMR+/dtIk
pop2FvAq8OldO52P1z4eB9vn4zdMeywBzHZ8hZNOxm9wTAjBLxJyIiz1o14l
tZS7dt+Shu81ddPzLDw0Tn1/wTupd3Z3Ce8Gk2wyidbBcmuLpqNd7umUhsY0
k46W5dDbi6hHsTY7p6SZgu7r7/b9x9/u+5ui+cvJ8HnKV+JiW5HPo3A4AOiO
uZS4K4MzboXbL3AdljOLNdGeDNvpB1ZgsLvySW6SJvrP88Ak6S4hFIv9pGB0
FxafjwZv5yWfS7PolRdd8oJb8nplr6fO7TX6bhFL/SjSHbns6EG0oCeSKy6R
vv6AuQcpMen5eyCd4V/bDQS7BIq9pRSXqtsVpNPQW9g6FgntvOG42F42u4i0
Ft7KCgIeOTML5YyYEN4XUTpEYEdEFX57FfVBvvuaM3NPWrq88enMEnttmG6B
wd5qQoDbyBYZ3BgD6s6MxnpTo6GRwN5U3zbVNpNYSFf8HzNL9+ixuUhYflDW
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
PCk9vJN7JfvqD6M/+Jfgt/7R87W/Wf3yXxo/84mJ//WRPtD8v/rLPe9+a/fP
/XTPTz839Ib7yqcvDLcvLLevZu+ezt8+W7h7vnzncv2J1NzVSqejn7sBYG/n
O2FNbEKwA97hL6oRJ3xrs6y1rbintaS7QQ5/k90z9csnk7durz2dmb8pzF0k
Fy7jC1ex+cvkPFU5LtxKL94S5q6EhavE3Bm2gJglmJMmB3pT5jodm83EF06A
2LH5bHQuw5CO1vriSZ7wgG7U6iexxTRqeOR8NklIjwH26Q7dzCQJ7Gi/sLrH
1TNkOxnmSRDeS1T0spxJrV7Ymhzw9MHnW7gzthejcOaqltRuwXYWW8nEyZNB
6W6lTUPWkzgQnvCOm0ZtQHgqO187xbaN9ouk6zw8dRrpuhWveXBS+4bTmhfD
pc94ZJk5Pqjk5ju5flARjSgqWqr4mn7ZjUjj6WqJs56rk1MbMfZPtbiotKy0
qrysurKkwT7lz3jOgOrR9WTeYydBnt+IZAO2A8YFVPUbtCmpIOYB7BFQ7Dih
ekhbKulMM7YDqIHqYVs8ZI0B4RMewas/NlQuD1WMt5QB2zsa65tb2zpbWjpc
c36WQkWn3Q2CPJ0g+yVBapy5Lte+esFdT5GBA29Ihpnr7kmtKxxkubuw0H3c
YQXIKxHyRG8vcH5jwsFKaGwKt13h8mg9Lg2RP59U9TixlN3tw81KoNvRw3Eq
MccKbPdStYxL7Z8eWawqrqivre3u6Wtv6Wks7uyvuGFpW1obcG5qfX6N16sE
gHvJh9mkqhs/gB2luwbr5PGSrHiIoGEbm9WAkjfsAIcDeqyc2SQTftO4jWDX
BfzmLW2f6XGwsybtJXxJG4j2ku3M8F3Q6lvGnSB9ybZpL2jYe8R29GSQpTTZ
Q+VsPgJO7poPyYQ5CCLYYQ4f2Q8a4OP7Kwpbiez/h+21fJ2xbhKZDKw2UwKU
SL6bV+aon4nnR/CnsC8HbmOJTl6Zk1kEP6qe3H4T/QCkzK9zvtQqc2+bWUk6
1oohn/llyh/Le3QHuMc2350YvXf65iOWit2l3sXo1RjyVnzegccDTcIHhmiY
bPYQNi4TgOdhfQoD8Z5NmE6j+kxYm0qohdSYcHv07Jmhe/+t581vrn5O4MNG
ztjOd7UVdXXwPV1cXyvX1cJ1ANhbMEC9t1COFeYd7Vw3sL2D7+3gBhc4z4vl
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
bsioSU+jG59yo12zPpNOz2AdMUVlMCoZdSSj0xtH2o7/O7/d0MQa1wxrd9kf
wEbHmU1MP1LJ5MbMJpnq6vHf8N3IdacjvzN4wLdjM2PLnLZvlCa3X+x7+M2l
HwKTq+Zrsh19ddkiSWaKxNikfZv0kVV+03T1+yOvfH/sBz+c+NHrk2++M3X1
A0d1X/XVpRm1NGCBEi+1HVLe8VX7/a1pcu7GcIZ7pY/5MCTwUJPzfOOaxAdL
FXpHuIuu7NmpSJcUhqBiV0x1bg5Q5fg+JjqK8ndCrz3d+59D7OIIWxgBnmum
TWx2gs2MYbGSY4zWuOAcExxj+OgcZ+4JrXvC4DLr5hc0kVlDcNhgHtaaBwXT
CWHihDB2jI1N13kWm4LHUMyPEclHTjLTSTZxkmE/8HGBzHY2Bc+MoCEzNcQm
hhm1/uIWqnWMWW1aeL8w98vjfya/IMv/Sd5/Yf/aJ/erz5JQfx54LmEe5tMS
CHj5MxIuUPLIdolkvKzI+OfVRajnwCfU03pWJbyq8KXH1U3Yx2qOvaRY8Ycd
m/tlbCq45+OlBJeVvneJd0VWEO9SWZbysrSFx3ng4CpWvkvKvTWqjjVF1F3v
gLozHqCNFf7GbUkZcJAA76eka2vv/MHkL9/hvPGi5+Ke50J5tVxcKeZW87nV
Qs4DkC8UfEUQ7aK/LPrwsRgso4sS3MGAeuDiZ1c/v1V3toHV49w9st2g6HZ9
48kjpvMRZDv55yXaIQWJXt6Jw0W5Ak/CS/g8phwxlB5HI71Im6EA5yIiusid
FkC6SPTGw0PRbC9xpKPHjllHEQ32ZLmYoG9IbrxIhxYBzJHnRHjOdlzJ0nYs
n03k8sv5lRZfN/uYZMV9VaMRO4BbOrqMQ+c7byk03THLYlNstpcd6WQ9gxTi
6sXW9+4Whgw3CqjP6zXN9ay5XzvYJfQ2CI2gbyeHLeKmmEvn85lCHtR4Kl/Y
KOXJlsmlDhYq9o0KABzZnirkUnlYBRD5GZGu4Zmiz3zgw3CzxTt1YM4EAeMg
16e8ITvJ+Cnv4S1XxLtV8d4x8W4ng92MERr4kEI1IedJe29Xb0tbc3NDQ53e
qNPqYGFppoYnRbEWl/ZVlVlOQHQDa4Q/fjvrxZAbG4FfsSnmtrEFM5uzsAWT
ZtrIGj8m2iki08zavHXR0vDluDUDME9OJwjs8agzGnNFEemueExlO2c+rCha
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
TkIaqDo4Lk7eEseE6wkyItMA7NsF3925R4G0y2nDblyE6rmSL48I70KX+56/
iJqMB6V4IPAl1GrgSg4+BPS+QPEyRTlMrIRxBB6k8QWu1XiRse8jpO/xFlee
SLDXq7oitkftCb0I/zUFXkvV4BOHYUAwzrOFR8eefIvn7Xv4dIB7R5mke26S
L7rKJdc+8faDomO/4th/aqH+P8y/iMPyHB3uiuERjvLake3rfbnr3Z7LUc3+
4g0mERp/yZNa4319plyHyXADTF88VEpxrRM9U7FdbmahAAF5RhKvuO2RDlPr
fu3uNz8w93NOVpkXNk2id11wq9K6ugDqzSI6YQDYo+Lx24Tv/Q3TZ//l9Jto
dwFU3++gIEAgQ0dy6PF1So6OMwL5U8L5mqLM8GMTEw4R8FGlIXGmrXJ4ibc1
9RaJM11eVH0rWsGlF5QklpcV3v4KXXmNwJO7x7kY8h1dWaJ5o/t7u196p+YH
Uqzu0WftYtwOBF4ADh+zs6hdwOxugHcnS/iE/La+4DbkEuze23Sf+GzxrxHG
/0238+4Owjg3rqv5ve+6nhLD52XzEXvqhI53KL5HdY7qq7Q3vdg3hok/mPTp
7fhTPy5nQnZ55C//jWH4gFzR6B5J/PcvHXa7KoFXO1WLfXliGbkhQrbO7spt
FFKoe9//lX90f+b3gj/7suvxZqxxmbwEbEeTTAoLqcDhG3CSbVcz1ceyz/5A
4MfjYlxPsd4aavTTiXq9Rm/U37Auu9qA24VLwPM22V3g5FJuJsIGIt5JhJ5z
zAHgpL3Vlq9zct5q8iO8RF/6pTxjVH4HwGq8gZdT4byxD+Qctok2UvTjSzi2
Di9r5SZge/MA3qEJyH95+FDWeuDQ7ThZwKUNug27LuPOps62oF2dMS7NjK0u
Tm3ko4XL/XZsKjnNZgQl4ZbgHR7jjUOj4yNjk6NjU8l4IeaMAjVd1OHE3jts
ZpLdmRZnbmtnfbZw45hskNSvhMp5RV7kgSQCj1y90T5pcSSXLTTkjYErAPVo
kjmB++uA5LtmgHHA5DhAepQYO6fucEwiM0+g2GKNJa38GOfFU/TAY4U0RkoL
MnNc9hjKOKTD8OKpepKAI7yVHXcQuLI1sTmBzyO3ibRjvPa8uLxkWLmpvcnR
W0O8fVS4CTh5XZABEo9DUVMDlbszj6RN+bw7y52WOYB3Vw4IfN5LRVUXIjzK
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
CDbtsDiyYFheH9xaGVhf1q/D+aRhRsX2a+guilrAd82AjmZRjQg3AN5nhNkl
7fKidmlcMzGsuzGkvzE6PJ5IZOon1XP4KUiiqR6c8xOCdzRJ4ja0f944vuBc
PWjy7Wx5AdgDm56dLQ+itwVo/HZoy4cwDthu5cbIQH86Aa+9ygo83GMPWufN
k0N3DMyIezHD/h1ag0Y2NMhu3GCjt9jYBLuNQWFscVNjcU/6d7ciu7SDjBpH
HhDb4aEGtjDPrYBtwi0AgRdu2QTPrjbtHQxETIGEO5wgewxQ95Q3Die4COcR
6tFCE097U9jlRNiesEeTzljGn4y4d63z1pmB2Qnx9qT2zqJ+YV2/ZtKabFqb
Q+9y6t1WwW4VMRl+ezaQsCQoZyaVldtayVfjSSO8+zAWPuPNrM9skb1HoL5U
1NsB5I3C8DaLvG3pfXftTXgQKJDxJuNIpx2ZLEkxwN6zjnzeUSra947sh6/c
eeJPfX/U5aJlv1k91dPeZQxPXFdgkn2zlhJ9OJ9QMvpwyp6kyjX3dzvwj/Gv
kt+40L8yw0yrom2dOQDYF5hpERg7M5MmY1tljnWNOy4cv3vgh/82848ASpj0
m+TFWT5TVUkDVhpasQSQ4qVVEmfS8hxtIvZKkCDneBzbFdFGRns+2adAIMyt
Fw8Ae0FB8pLit8GjxAdz98M44kxBkoq9RwY5yVDdLJRSb68KUJYk9U32e4q9
1O/h6cf/g74mrIqiySgWHRVU+YckYtGyXM/dhqTJ89YhWCit4My77u9YP/cs
+64QK9k0IcR2AcUZzMMH6o4n+NIhhGFZtQErS12w7/wN758g+a9KnYNOr3Bw
qJr55aoxnh9Jfc8j/IlDSVc+kMm53EpWUaStQyWu80D2psq7Z6XPCcn/gxbk
P4wv7fzxy47nm6nLduZeLVmvZuu1QqNRbNWRwzfrxVa1UHt478n3+b4/wbI4
noOwHaNTUW83Dg7cXJo3nZcvmvtNwPaLEqUHVFoovxw0qoDGR416uXkROy+v
lRLGaIjt7LJglEWSmkRSk4wLiV1t2CbYVtjKLFuYFOdnR9ft6/50JFs9uts8
RaZ9sX+3Wrmg2HPEZ4qCQboOFxtHfM4Fmg9x6iggOW/8P8ZyKvb7H9draDW8
AEivY6UVm4ngu4Xz3G7RpnV7NP4lceW2bnLSMD1nWFw2rq8Y1xb0y/MDKKSP
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
VeziFdlvv0clP5DATo0auNIULXp49mn3gd4welp7mt3P23nPnvbEoloycnMm
ldmgMuk1JhDq5oUVGBY4Li0vWtZMOrMaMMBxW1v7nWr7rt0Ftoe41MDy9qfm
97T0zxJc3kYcW2RvniyocRNV1ctOO02D5MyWhVg4PGh17ruDXq3VB0He6N63
+vdtTNoHvN9jbkxv1Ow+dAbwLPC83+qO2n0Q7cP2IMzyYaQKpgg1ZOSsSJb9
KF5hbKeJNEGU94GTjZfZzulUagZt2gYNu1xi5iqtSDUS4xwxL6lW7AcXG0ub
L79WRbg5zmS3OGML6RhJR+ZjibNw8jJ8sX8OizVWwbRMlp28L6rOByxYThV3
hOKX2NMMDRl3jCr2KGt9lvZgkxnsM+NNIdK9onRnbE/RrEh6JQ53plg6JbzW
jSONeE/i0SuyPemKpD0xeAr4f+NPZv2puDt+dRE833Et6JaZaGeWu5r+V2oh
lhtd6Zt2PlUw9uKGXESdDvBxP265G7syRsNLifjezfVFJXdZKzir/ZPB/7L/
45ggkRYUslyR95iYHakZW0aW6xTvwjg7frM5+fDKP1wllzs8SPQL5sPsYCq7
dZc2jTniHZfq8B153y9e/s6kSZvYMKpnFLIcUA9zR0wQ3Zg4jc8mZpcMGeGt
9/ugelsU2HTjPybFKRIF2SQR+XkjbeR6LfkzealMVfZbslPVPUnN9rSfzRFS
9LGnH4+BOq2YsGTzigl42YqRv0h2ZiUyUx2clcpvbwTx00oDP+3tTGKPQLsc
vJh7r+iZICgdGKk2VriVyFlUuD2KPFIQ9uM89gd77An/dPdnb8gdttznXXRb
WyA89osA2p8QNxxPicfKe0813iAZ/fDOL4zvMMdyfDumPb4U64iyVMxFY8dy
re7UfqlI846S7XJclVJdoB91XHvz7x1+On9cTm4WQ8abK5LykggcE6SYVTWL
mvu65u1l7tkrpm/+ppVP7JNj3O9AbOGuhb8d0O1zxsVLu6/XRMN8WEXjhRWT
9iu9Pih2inHso4K9dge0pe2IbTYEg4Id8Y43MG5jdJWSnBKbaXLkfGsoi3l6
Mhi1R3eduztge4u+FaZNDp83nmV28xecZ1d9ZOGWTJzZxM0b1HM6jclgMC8v
b6yubi0tra0tb22bd5dVK8A6FZKMOzw9G7S79+1u0poIqVJty33P+EpNO0yp
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
Mu2cgH/+bod32Bh0QWY3+t1ad1Tu51YyCS55xJ0aiAF0u1ZrMMwvOj1XAORO
qdIpV9qFcmAvCD8Xt5+TI6pqtd5oObHZW7UmhlPpuGsPMLqKxaeY6Igkb7aB
8N0GhlPRe2+0Ycro15qM21c2FwwU7efw0BM6ZyRHmCO6T+FZEe8y50PAf2C7
zRMAvJ97/ReerbVNTqHVX8C7Wq0yGjFBiNUosQ2jNZxGT3TzxEzNmZU1buNE
bfOoQnl9NzVXjlkD0Qt3xO6JXnpiDt/p3jENp2Ki/zJZ8akiEV3GuxJIOmOI
9EukOgh4GCk3tVYcoaj9SpbxScmNF7U6Cvsw8t+BVzDkShNskPyM9jSzPckm
BblwSTLeMbqK2fLxkCOg1xoI69+OtgymQcJ/q8tko6zvvO3svRlPHtiO23Nj
kWw67UqmnamMM5N139y48gVnoeoovX/7vX/g/0P8O2UZiYhxil9geFiCeVS6
HhaV/Dj6OK5N/vbGjy2R4y3+gIIddfsWHuEcRPuFTe0JcTd/2/D3Ppd/FbuH
hen7R9hCQLJfZMs9ppTrYo69hEEJfVMnR0p6j0vEm6p3lkVD7SNl+0qF6cHe
XFGEK8zQMjXT5UD5U4RZ/TwNBMuzgHLSUXjp4gegn1+MNcAHiIsAn+b/YP6M
wLJPBelrjlM0PTUmP6WwpNLSkkG2j+SWmFnaA1/OhM8pukfmpPZoOdldkUp0
ryU3RpoRRJ9HzsDJKypnr6cZO2K6Eb1/fD0WyojZf7r/M0lSO1E5rZgPaceN
zskFBtb5iwPOfsp70XvX2MNk8JPnvzsZTMa5x2mrH7mXvrTXyXT7qryi67Lk
0tNJAX/oT8f+j1fCbx/knvdyT/u3T9q5Qa846tz2W4VutzwYVu/6lRFo+I8E
vy3J5wF3lOo6Uber9FqNcWVpr3Lb7FHJ3a/1AfK9KoYUB/Vev9ZFVtNGiCBl
BzUqYjuDUQuL8WX4s84DAxotpTzvS5DvjerAc5obg7sywZ2d+1bn4XYQmIsc
cbZ19ZaZXzCp5g2qOWC7UWc2L6yub+8tr2xaj+3tRrtbb7WrzUa50q22XMuX
F+TikD+i3wKAptIZTMnkNcwp1BKHpUfvrtrLraTTJHPMWfXEoOX0Gg2w3WJ3
ubuNWrtURuleb6TsmT3tEdulSM6W0ennN/eOK6Vqv0YtFxo8RfsFrZguc9e7
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
iV8C9X4ckl76paMAxouACC3IeMQ+E/YEeZoRkJnwq05JEuMCZRjnCyQ8LssS
ZsPiWVBk65iUbIODZ0hg9HbQFWeIjtByJ1sDDck7s1g+PzN8cOk2wlYBpL6x
T5MF64TJO0IHhpYJQmztAKc/+OVHGNKLINopzxjAgbp+igDGU4rHAfFRUHoU
FB9CBMQHFIcB6TAoAasfE/AhnmAQzMN4/RP2VkSEkUcR6VEIbsHbD/Gj8MYn
qORRz6M/g8uvaL+zZVwkfEyCZ66zhHieJMl2tr7Zcvs3Tfivhph8EwDzs6QI
0aOSa72USMXWcJtAD15CUEbN2XkZB7bASuMsmAPfI3PmRvrRxwM/a+S8K7yN
ikJDmEm9by0rLCsKm0FpX+U9Hw9+92ldlKr9owN3+/mWOfErKTQFqkVZkS5n
b33L9xN72W4X8F5EsHdznU6uDep9v7x3oXKwX97fK3U+zn90YfbDZW6FPI0B
BbM0FQMqYPvgmHnLhSue5Wa3XGd+yz6mx/Rd99reXqXDTjhFZ6bOXBoqMgPY
h3iT9wiyv014b+83G1+rvZtbqNg494JyaYQfHeQGtbwO2K5WaXVDY9Ozi3r9
rMfp22u2GqUSZbNjbmGjVAHOo4Zvd4R1zyK3uKZYm+L0Wk6LyfkKjdnq3Wvt
dWpNCtooirNJZw/6cHuhnBrLANs3lCbMo+O1ugHd8LjeFwrs1wHIpValXC8W
OrXyjie1PrwBn4lAZHhXKAc0Q3NLy+VCFsDepgCd3ywUW8VSt4JaHV0d4Dz1
GdsbhTyQHJCOxguxHTW8ETDuQFlO+TMQ7g2Hl1JoQKV71u1eFPnYoX1PHpLx
ZMKY3ZQSA/IeZgcbU/jQhqzC7Nj0G0OGevBvc2Fo2bPsM81tsiVUJY/2y4ba
mNvIm5fMb/Jn2M5W8mf6W5ywPvAiv+LU+t3aiEsVciujvjFMbiGY+2L2vlZ3
Es/fNmTOR0ioA8AjBPmg1YeoZzYOSndcgYXBME0TKOYd/f2trnA/2Sa844tY
1kzcV7fZsoKlC9zq/sT77zo+jDsiVGcylnTFE85YwhEFtieJ7WnHTsqSqq4X
f335n75ISCcAYT+yF4Q09I990kuf+Mx7Bv89/mvrnxs4P4AdeD7FLUDMoicD
kF9cVBhXldYIl/0Xs//6rACsPjtGViPuXgjI9iMWgtw5FgDgOP5SkLANoGvx
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
tFCWNDql23MKisz1NQGJD5EIShywnQO2azPutgghS2EBKykrdTBWF2N2WM2g
23H7UnUVB2wvKTUVFdUVFoBuJ/WQBXV5+ZgbTVnrqm7/qdbFYWPuFLtVsVid
+BLmgG6bivdPtswn6W4nmhx+VDlpFJZCOz7tINsr9VXiPZvTYhPr6o0GA56m
h0UyxntUuZduaNP1ekscPl5lO9mfpSp2UuUIhEfLRcCEKdHn5Jw7gRgv8Baq
dNTtWLuoOjMpy10MwRVJ8oGSlyWF4/V6A2kjpkujDIWGohx97uebVXEXMHFm
Cuh8jlJ+XvSHX1qfhjlPiPcpFRKXwQPSVapbaYHRSDVaE+jwlNN+x3agd642
z5sR6jZ1hAW5QbLbzaxeo9Pe8V+tbId/kxl0Rg6d1aYN/1/8//mjdfq5Kfrc
NDNRB7p9cdy0MGFZHLcuvzKvvLKsvLItvmIWJ6wrk5bVKcv6lHVj0griHKkO
AROEuXV7EsIGVN+atmJM2fC2SczAbqNFz5I8LCwB6NIgJKO46XUnSjKw8Kmo
bTvK7kRTTwQwx3dJWc7eLAkkM7J9l3wKftr2jHU7BugG2rPoBaklmngFOGzb
jnG7Kt5j+DN3MPBBA0f4CbPcTozdnmN35ti9OXZ3jtmbx8cEeATYB87H8deh
9wJfewZ7L5CvxGxP2TZBpUPA48wkszHJbE4wm69sa0DvV4jxbZXkz5mN5+zm
C2bjhU1NmAK9YQSwr/yIbF96xi7/wC49Z5dfkACkA9h/BLATnv+AN5B7uOQP
PLB99Ttm6Tt28Xt+8QcBqJ78gVv4jkv8J34e4js+8T0EtwAy/kcQ8Kjhl58L
S8/5pRciSv2X4sq4uIZ4FzemiDMzKW9BzADeJSR8TNmZVXZidnTjY8r+jGMv
at+dVraB8CDsY0TJx+xA+52ofSvq2p5WNqftm9POzSnHFkB+yrk96dqZdG9P
uWGyPeHamXDvTHp3ptxbUSesAtvTnp1ppP0ekD/q3ZmBAOx7YLId9W/HAvtE
wB/M+g/i3v05YtrE/UdoyAeO5vxHCd/hov8YNPySD8sjV4PXKttX0aK5XMEr
V0D4ldBlMnS61Xf9V/d+DQ+kyHN0Y4x6IDDJK6VrM3OMeWV5ZQ/6O56O9nw9
0vv0Qfe3jx4MMQNl1H3t32M7bmJKN2YXZZZVaU0miuM1MkOJX+T+7Hfz/rie
sqXDgwA5+MBIpxm1aca09LzsIlut9emj7q8ftnw12vrz0Z6xnpaqrNIiqqSM
vnePrqyga2toa52GMdFMHWWzUDxLSywlwsIBwWokBv6jpkXOIPjKlU7F/6Cr
4+GDrkcg4wHvfU2A97F+svWpt2W0p3m0u4l4MqHBjiDuV+0I9bf5ge29zZ6e
JrfK9lS1TBAIb2/12luB7U67Ny/Qou/haC4dBZ5WrzVk5eXX1daqbA+InF/V
7aUM6Hbqk26nARy6ktJSJ2PxsCCzTXZTnVRbw1dWcvfvMyWl5qLi+iIsdE/t
Y8rN+9xyUUC3m0ky1MKoUvyO2Gq2lCFXbHdGjWrI2+xkBNoT+DNYOWO1lear
dYap/wOagZStM9ZJ99HS5+vq8WxTikrD0/SMlVSlj25s0fV4S+0+hvFhGT8f
AIwLYoBPVcUAzH0M62e50B29iWKXCMbhHpX2PMp1kVCdYD9AlgNVt8sWtrq8
qrS4HCusEO/aTDqzEACv7mZKFcyQsnNan0Fnwr8Hv6b5l9X/LFTcbEljsBUG
JcC/LptGZLQSr7dzeqVKC7pdS38m2kkPam2+tsCXGeo0tWNPYMVVUVJODCg8
d+BuR6ohHUS7JvM+VfiXBX/yQnr1Xd2LH+rHn9dOj9clxs0LL81zJJIYluQL
68ILa3LcskTwjvb7BJZHAsw3kXWWTSAzAp/dmmC2JhD+eM+4dW3ctjZBdD4I
/inLBkwQ+8jDNaAiujfwFgvwX49aN2CcYuEemGxO2tammLUp6zqGbQOvY6EO
/rppvAhzuG0jatvEYLYgZpjNGRs2SYDr+BG4md0kpZtkucGvgRenAdE2Uq7P
4jeBJWCWwYjhqK4aWzFua5oE/IRJZn2agd+1hSRHe2p1wrYK3x/YPg4BSLeu
vrSBJl9+YUER/sKy+Ny6/My2+sy28sy2/L1l8Qdm6RkDV5Z+sC1CPMMx+b0t
+Z0VxoXvrQvPgNvM8vcM3gAvv7MuwPXvbInfWGd/w8z+J2buN7b5v2Pm/o6N
/0c2/htu7jdwhYWI/x07+3dC/Dc8voTbvmPiP7CzP8DIJJ4xyWfsIsj751zy
Bb/4klt6xS5PCKvjPMTaOL8+KWxMSRtT8sakhBEFMS9tAedBz0/bIbaiyva0
vDkDS4CEkI8qW4h0ZXPSvj6urE3YV6fsK5OO1Qn75oRjY9yxMeHcfOXYHHdu
4Uvn+rh7fdy5NulYm3StT7k3p5w4Tro3MFwwwsv1ae9G1L857duO+naiPsA+
mjaznt24dzfu2cfAlOvBvO8g4TlMeNCxWfSdLfsvVwOXq/6LFf/5cvB8KQDA
P1+OXMI8GTxZa7t8Hol6aK8G92jjBk/Sv9qYTnoR5BkK8/XFDkn57W8f/fzx
AMTvfD06Ig3doyp1d2xPjRr02/Oyi0vSKqppSx3NCBrPL0v+rEc/WEAVGTRp
2MiXTtNjp1xDZlZuSV45e49tEUODvtZH7SDaB759NKjUWQqo/EK6KJ8uKKCL
SzUVFbq6Gr2pUldbTZvMFANhoVgLqDWKt9ECr5VhEQHgWylWyrOHmUh/Y+vj
wY4nD9rH+pvG+tF1H+tvHelpHu5uJB1pGgY7QbQH+1p9wHZQ7GoA4bsbsWYG
I+TsCDja/fZ2v9LkVLwFviZtl0wpeVQWsN2gNaRn51VW1/okPizxXp7xijYP
w3GltsyfzuZQTwbVFhUXuxiQ2SYHhLlOrqvGHUwVFWxZuaWktL6osB50e35K
uiOoCcAJlpHtDhuLDgyA2saSYO4EPBLekbrOuJg7+FuQ7Q4yJwoff2BhTu5P
NeRYxK7P0+TVGmrlStZlY23VNXoNbm1Ko/SE7VUBurlF1+27b/dxhO0cT+pe
BHVyV9/IB3hSDMMLKblOzBk029FaJxgXUKiHJQWvYKC2D2BzADEvvVBD6TPS
cjLTc2jSK8xA6bO1WQWGPPV7YqM1wmeyq0ifTxfWUOax7F+MFfyelULHj9fZ
Rb1dSXMJRiebJtXrbKV0mfbOkKE/aylTqC/2ZYV7rJ1h0eHm7elpmeQvIVUe
g91jaGOOJgeeZRwU97/Y/qdn3PPvTRAvn9VNvTTHn5viz+vjLyyzz83xF8B5
ZPviC3Ny3LQ0bkbpPgFhXQewT1g2gOSTlvUJM4wb49bNcdvGK+sKrALjoPbN
ywTvAPnVSTPEGnF1sPDmlW0VkAjLBPyoSesK5m0tKxO2ZXxSIGlctPphboOf
swj3jFvh8WF5HN2hNfhp8MPxJ5NvMgk/x7o8aVtRxylgL3wQ74dPreH9AGR8
goDftTJuXoavMWVah29CruBXgu8//f+T9h7scRxX3m93T84BYQImdU9PzgnA
DAYAwQASDJKYJYoUFWxrndZBttf22pbttex13PWu3/X62usg57VkRUYAk/Mg
MJNilCWHvWtveO8nuOdUzwCgKD/73ueC5ynW9NTk7l/969SpU/gpANfw5Ehs
QDdAe9mPGF8mJF/FDwKvfnvZf2c58Dqpv060+uvobAndJnanE7q9FL4JLAXl
3IqCfr7ZRhV9qwviOXK7G75F7HYnBnL6Zjd+uxu7tRS7vRS/00nebsVut6ES
v9mOXe/Eb7Vi1xuxK834lVb8SjN6uZW81ky91khca8SvNePXm/HXoGzEr9ZT
V5vJq83Ea83EtWbiaitxrZt4rZu43kncbCVudJI3ulAmbnSTt5bit5Zjt1cS
QGN01KzG31yJv4EWe2MFiJ3AsMmVxBursd+ci4HIv3Mu8vo5KOOvr2Lj3yzF
7ixFb6PFb8Hb6yZurSRvLydudxO3l5J3luK3lxJ3uqnXu6k7S6k7ndStTuZW
O32rnbnVSZMGqdvL6dvLmTtLabSVsdehvpJ5fXUU4Y+oH3vz/NhvL479/tLo
7y6N/e7SKFT+cHmczL1COY6cvzb+p+sg4HHi9b9u5P/3zfz/BpjfmPjPm7n/
vjX5/+DNyf9+bfI/7tz3n//o/TZIcSWtIVl/1YpeckiNQTRklo7Yta5tuU37
Z7Y9NLfzsX17j4weAgiIe9cRITxJeyiTqQ16k23YPqJ0mRl2Ujn3vqG/StAp
GYXbKgHYoePAhU4SiV5ndA64gpJYhEon6fExeTY/PLknOLfDszWoDJolZjUF
70SlptQ62jAkMZvlNqvS6ZS6nWK3U+JmGZ+HCvpxMA4WDTGxiCgJQg6Tzysj
effoga2YpuAISHf0t28+uHvmMMlIcxDYviOPtn3iAaLbBbATG58jbN8xmZ7L
pwDvs7hMNTFhmpih51J0ZoDSA4JkIqlMpbXYnaNChEw4kI0G0j6/f8ijXN9T
r+dvN5lMmaAv7QO2e1JeNuEGttvDNlvIYvGbzKDb+SFhjSrGySCcAwhznAYF
XPuQ6ijdiSBPCKreL8h46C+CiPEAzpaSOip5DK3xYJkOBEnMDD5Qr17PKo+e
IprR01q31B23BUZ9Qa/NjhHhZMclNaVkaW6C2bJFsmvcnsxieGeo53hBD0yY
LNSK9m9GJgW2R6I90R7uudlxChUPEotGp2JxJHwsBg/BDTsMIyCcRbSEJg4u
qVjGkIgrKS3WStTr0p3q5SIA7Q2DPhjNZZiJd5s/sUVxX5CKRWXpmDwTlMQ5
sc8uYR1qdkRnYzYGQJKuAYTEoBjYPr3DPbspmfGxPjKiwggZMVmJRnblVkBn
N0BpH1MdrCaLFXet5m5X3Z2G53zLc7HFX8DSe6ntvdLlr3f4623vayBHge0r
gGvvLSBnF/gs4K7nlr/T9YFkfb3rJSLWe4vY7SX+FhAecQ0c9ry+5Ebgk8YE
vz2GQ8ubKHexE7kF1vZBHW+2vdCzXF8C89zo8Dc6HuhibrahDvcKFf56l3+t
zV9re661+Ostz402f6PtuU7uugkPaXmvt3zX2/6bbf+NbuAGPNWy9wZ0IqvB
O+dCd86HfnMu9Pr52G8uxN64GH/jQuLNC4k3LqK9eSkBkvXNC3Aw9eaF5Bvn
E6+fT76+nLiznHp9OXkHyNZN3e6kbiNmI1ebkcv18IVa+ELRv1IMrSxEls6E
2mcCzVPB+gl/9YSv+oq38qq3/CJf+LV78dfuhefY+V+6Tv+CPfUL9szP2NM/
4U4863r5WdcrP2VP/IR99VnnKz9yvvxD54s/Yl/6geOFHzjBXvyh86UfusBe
/CH78rPuk89CM/bVH3Gv/th94ufeU7/yn/pX3+l/9Z553jv/gm/hpcDiS8HC
K+HyiXD1RLh+OtKYj7UWY91ifKWUWq2MXahnLjcz11pjr3XHby5lb66M3bkw
/saF7BuXcm9ezL5+ceI3YJeyv7ky8caV/JsXJ964mAeB/caFsTfOj/3m/Pjt
lbGby+M3V6GSub2curWUgW8Duo+bndTNdvpGO32zlbrRTL7WTF2vp240Ujda
sdfacbRO4jo0g+5mKXVjKX0L2oMB6pczvwHIo5IfffPCGBpULo799tLY7y9m
/3Ap+/tL43+4lPu3KxOCK/4/wK7l/+u1/H++lv/TtYn/ANTfnPzPq7l/v5T7
v6/P/OnN+/50auz0Tsn+mGzcwjh0jFGN2WaQ7RpGD3RVU1oNpTVQ+kHaaJWa
eTU/JBpSiVQgxcU0rsSnhbg1iUqjMW7dOjmZG/UPhg8OPPag6jEX5SZ+HqmU
xgtKjLt4KIYHTZzeE2UyaSaXoScS1HiSyoJl6Dyg3kmzINWUuJZKSTJpK+H9
6CRGq8buMLhsBrtd63RJeZ7xC+o9KOwDiOluYn4q7KUCPpk/58Otl47smxX8
7SDagfOg2/ftnATpvm9uCvAOJnjdd8+M4ozqprGd06OzE8kd+dTOycx2Euue
N2dnmJ0ZenyQMmBYBS1WqHXmkZHRSGAiGspGQxNxTGbrG+QVyKue94PARWyz
WkfDvoyPB+me9LFJ3pXgCN6tI37Q7UNDnqEhbmDAZTQIup3MlhI1HkBBDiRP
oo8lmF7zt5PZUiLLie8Fm/XYDqI97ev5akaDcJwEugPbVXcl+JXQIgOt42Xu
hAOHG7x1hBJ2XKLEGkrloTyT4q3T8u1jzgQR7SHU50SQ96R7WChBwIcQ3TF0
y0z2pHtcCJiBiuDJIWDH4HYU7VFsHOF4GS1nyHZdPYceOlIYpq/e1WK1mGQA
Xl9GSwLyNbTWRrl2q488MfxUnB4LiGIeJuwUeZwq1mf1JkMxj5MTgtt7/vb+
nnoD4qFx9fQ295Z8ImMxWFC002txj7hPoopW6Witk7J+y/WlRqRW5mpVvl3m
QLqvAt4b/PmG50KDv9hyX267gZlXW56rHcAsf33Zfwu0dMd7GxiOc6wI9ptd
gDMc9N/pIPNvdz3QAFkNxF7iby4B5D1AeChvIm+hhCO+253+cRgRtAUC+wiZ
+RtN92tN97UmB6+L3G7xV1owmvBea/tfa/tew47GfwMaLyGury6Hry2HX1uJ
3FgO31oBkZl4fTkOlZvLKFOvd+PXOrFrrSjitxG5VA2sVALLBV933ts+622c
ZKsvsAvPu8/+ijv1U+fLzzpf+KHtue9bf/Edy0+/afr+14a/87eD33pm8B8/
b/zGp41f/qTuix/R/M0HNE//pfpT71Z9/B2qjzyq/OAx+XuPSv/iYck7Dokf
uZ95cCdzYCdzcFb0AFw+U/Rsnt6ap7ZNUNuy1MwoNZ2mptLUdIaaSVB5sCiV
jVDZIDUaoNIBKhWiRoNUGsxHxT1UzEtFeCoMdXIz7iUHfVTCTyWhTYjKhKgx
eEiYGo0hRnIJKkeefypJTaaofIaaGqc356ntk9TcJnr3DLN7C/PAdtGBneJD
90kePCR9/KDs8YcVf3Fc+f5HVX/5hOpDT6o/9h7NJz6sffqjus98zPj0xwef
edr09S+Yv/Fl6ze/Zvv2P9q//x3Xj/6F++mPPS/80v/qvwZOvhAqngjXTkXq
C8lOKbNcGV1tjF1sjV/uZK92steWJ26s5m+tTtw6l79zLvf6avbm6sTN8/k7
K9lbS+M3lrI3uqM3oHdYHrvVzdzopKG8s5S5vUTKldHXVzN3zo2+fi79mwsZ
4PxvL4z/7tLEHy7l/+1i7t+A8Fdzf7w28Se07H9czf3pKlRyf7ye/+OV3L/d
3PrHi9M3vzH87f3Mo2nptBsTKFnUlJ5kIVASUwhbjMnIlqZiXMQnFUaySkap
EKkUYqVSopIycqirpFqVTL/7/tnH33nosQcefpf7qS3MLlBcgH0pI4NeAC4r
qUiq1uhMQxaXyuOjo1E6nRZNpJmJrHhLXrojJ9qWpbfCbwF6nqcCdoo14sZ/
WhVG78iUjEYj1hnVA2ajxTbgcGpZTuFxy3xeOuinooI3nuwnAoQP8ZQ/oA9N
J7MHd2GuYExHsHPmEOB996b9u6b343rV/P65aaLec/2VqqM7pzJI9cnUXD49
OxbfNp7M27KbRDtGmewwNSh4aOVKrXnEBmzPx5Dt49FAxh/0GlkFJaZ7wYYU
2ZJK7LLZx0O+8aA34+fSPpZId1fM6QiPgHQf8ZrMHpOJGxp0kWgZwLigzMF6
QY8+wQkjeNTRRRMXEjwSlwuwPRMKrbniBQGP5iP5hEnvkPD5NQrVRt0ObDeK
9F4FH7f7oJnLbCFsB7mMGRp9VGBKsjWv2TzGkjjGYDjfmzBFL3qO5O8lshw9
5xPEV5NHhhPdHopOR+NCbAyIeWR7rD+FGo0i7WNRi3Gwnylzzf/PDCgxf7Lg
L1IwCqVYtZaFQPg2sT+l5Qba4Kdj7xx4aqtyr4Px8dpgcAQ+YzQbS+TTGZ+L
62cMZpi+T4bo9uGsbvNccC4XGdNLB+B8FvJLKzHuV61hdAbRwIjItVm8+bno
z1vxVpVvVNzNihvYvlTnl+vcah3xDpA/1wLCey63vZc7UPJXu+h4RyWP3AY+
A5ZRRYNdF7S0cASUM3QHoKVBObfd11vu60RLQ+U17CzcV1ve11qea1AH64Dw
BtXte60TvN4JoC0Fr6+Eb66Eb63G7qyAxW+vxK4vx68vJW4AqNsA6ujFWvhc
0dc97am97C39mp//JXviR45ff8fxi2/Zf/p1y/eeGfrm541/9yn9lz+q/9wH
NJ96p/KpRxXvPyr/i4OS4ztF+2fp+zfRO3MUXHTTCWoiRo3CpedHbAJCI24q
4KQ8IxRrppzDlG2Isg5QFgM1rCemo4aIDWopowav0wEdZdTibm46NSaqwnRV
GgoD8JR4CWu1lB7vonUarOhVNJZqWjCdCn8XkJRaNa1V4U08SESmhpQqFHi0
Vov3guzErWzBNNhGRx4CR9RaeHJ8fh15QnxRki9Lo6J08MbgdVX4frT4upRB
2KKot/0cZdDizQE12dtCi5tKD+mJGSgTfOoBymSmRqyUw0axLOV1U34PFQ5Q
8RCVjKI0nRinNk0xs1sku2dlex+QHzmoOv6I+t1Pap56v/5THxt45q+HvvRF
+9//nevb/4v/lx/4fvbz4AsvhE+eSBTPpJvl8ZVG7mJ74srS5LXVqdvnN71+
YeaNyzO/vTzzu8ubfn95+s2L029env7DpYnfXcy9eWHizQv5353L/XZ1/Lfn
x393cfz3F0d/T9w1f8SJ1/F/u5L9/ZXxP9za/O/t8dUn5R+IUjmbyKvDbek0
mHaAUkspTMAlbEbDrO2vRGKGe0Yx/TAzqQzBroRLUi3Va6XGbTNTTzxx+H2H
3vH48F+kqBxcRLipPSNId6lcLNPpjMODFpPcaRfzHiYQEsUSzHhOvDUv2jEp
mpsS75ygt2fpLRl6KinKepmAmbboKPiloLtR4E70ErlcpjBoBs36kRGjfWTA
6dCwvAQnW0MYNhkn23mHw0wUCc/4Mq7EvpnNR/fuOLxny+E9W/ftnDq4G2X8
/rkpkmcGDVeqbsGVqjs3je2YHt2eT+/Ip7eOJ7bmUhPs6LR0dpyZNFMm3LMP
Pq9SY7Ja0+FAPh7OxZDtKa+f17sUGF9NM322SyVSzu6cCAcA75mAO+1zIds5
wnabPWS1+81WkO7c4CCZVDWi10XQ58TZIhA7RTQ56Hb0sRMZn+pNmKKYF6ZN
SYk8T/oFquORFLkLnlOtWIveQe0uofpsd/gywYBtaIgmgMVdsGmdnwpOi7aO
qibGPUhpjGwnCpxkvAyjfyYcmQxHBB2O/vZo3/cSERgeJ1OoGA8jCHUB7yTE
PZYJBFRSZf+N4N+A3hDnvblwlDXbyZIl3LRUJVFLRbLeHAH511vHSqtMlHVG
dt8jpg8mTblkIDYRT00kEuPwZpIpn5CLTBgFMCKSXhJdLsNic0ydTpozDq1T
S+t1MA5l4MIHsKu0tEbL6AbFJofYMy3Z8SH1x79n/mHRV6p6WiVXs+buVLl2
jevW3St1fqXuWUEN777U5C+3AO/81bb7Csj4Nvrkr6Ke915pekFUo8AGa/BX
Gp7Lde4SGFTAWt5ryHAfSO5rHf+1buC1pSDacuT6cuwG6Orl6Gvd2PVG+HIt
eqkYXp33N0/7Si/yZ37Kvvx916//yfazb5p/8NXB73ze8LWPG575S92n3qF8
/8PydxySHtuJ2njHBL01TU2CcAXa8FTQQXlslBuwDDgyUbZhxPIw2SIZOGxU
Esr1DQEooxSKfpe3AadqDXxLtI6YQQCphtYT0wl0XWPsmqkRnmsGpIVRv0aN
hrDFXWjRoALUVauQOaq7rXdcMHWvribHcSyP75BSq/sNhHtVvXvxlyWm3nCX
UFGRR2lJ19N7b8LbUPVor+u/Yd2Gj2PQ0kbceJRUhBJOJKETEXoZlArkmfsd
GfFs47eqIb0GdnzQAxqoISM1DB2Eg2I5ygNCFPCYpbZMM3NbpPftlB04pD7+
F7oPfnjwU5+0fPlz1n/4quN73/I++5Pg88/FTr2SKhSzS/WJi8tT14H8F7f9
4dqOf7+x7Y+3tv3x9pb/ur31v29s/q+bM/9xferfr+bevDr15uVNN/9S9pSf
TtnFmJ4Ffnd4P4TqwGEcrvZDxRhmbZZK2Mu4L6hIKHJvYwUUtCKVUqQ3yI1B
znskfeB+1QMuipdTgt9GgmNhWqaQqfW6weFB85DOPCAywVlnpewuys1SIL/D
YToZp8dTMJKiJ8NUBqQ4R/NmyqzD/h1+O4USOhG5SqZQ6PWDpsGRYaPVPDhi
G7I7jS5O7fZISDpiEeAdZHwkyEQDdMTLBEOayEwi/+B9sw8+sGXf3OQBwDum
eZ8UDJPMbJvYs3l8z9bs3CbM/Ys7d+RTW3KprflM3je6Sb49L5oBtpM9eqRy
hWrYPJwM+SaTkYk4xsmkPAFO51RQUqYX/4hfikwm87KuyWh4POTJRryjgHcv
hz4Zuz1iswfMVs+wyTNsBry7SfYwUOAZRDoJjyEY75O855BJEWf7aDBEJk8D
mQBUhCNB1PBIdT/gOhMMQj0VQOdMzONTK9eid0iCX1oMbPco+CQL7X1mo5Ek
ASBsp/RhOjbFbM1ocuN+wuQI+lgmwuiEIUHsiHd0vwhsB9T32Z4PESWPq5Zi
+dg626ficaLwI9PxBIw15IxMCIOBF1UpFNlwZFM8ngtH4t6QRqZGTzgtljEy
lUQlwpNtbdEVI6SI1NF6Nx1+wPDYA94jOQR7ciKezMbik6m0x+GiehvqMYJP
BtOOMUq1SGtkcOinEJhAKxU4GsVd89R4Yao0jFbHGM2MnaMCM9TOz8mfKXiL
FQ+o90aVrVddzSrbrnCdqnu54l6tui/UPBdrnkt1/lLNfanGXapyFxpuNJD3
TS8A/Erbh3q7HboKoroduboUB2JfW0qgS6QeuVwOnlsMdk4Hai/55n/Cv/Q9
5y//18iPv2b+7ucHv/px3Wffo/2ro6p37ZU9vE20d4rZkaWnk9QY6Gcn5bNS
LivlhOvFSJlATKp7W6cBnfQEI2oS/ICfTkn2YiAyGMmjQfACfjXEQN+uI1HZ
Y6CaUFclzHAR0wg0JlhGMgs312hJEgwqBdIKplqv996Gon9TSTwAMox/BlOA
ke8fGpC0gXhE/v/ZaOGp/mwD8szKNecDOSIcFGytgfBmFMr+qnxFr3PRbOho
1r4o7Jv63wl2AVqhI0DT40GhX6N7DfrfOZqm1xfA96+V0yroRlXYWKcmnSzZ
RwO30iDjC6MwahigzIOU1U5xcGYGqdgYMzUj3jkn27dfeewdxvd/2PSJz9m+
/jX2e9/2/PJHsRMvpgvF8VZn4tLSxNVbe373C9/PslTeJnZZ6JEh2gTPSRQ7
ZlYkYO/tKbwWDCywnVq/4gS69zQYQ9b6CROmwDYDZXRI2GGJSYHpvMRk3goT
qKoUOoVSm82m9t43PTOGG5xFRyJOJW+XuKC9TeSwUiNO/Dg+Fw3Cw2GmLIPU
kBbPYfieFXC1AtsVKrVabzQMDBuNwwO6YbfVlQz4ObPdqWN9iqCficBYAPO4
MlF0yFMYC+0S+VKu+J7Nmx68f/O+ufy+HUB4slJ1+ySAXcD77i3ZXVswycwO
xHtqdiK1dSI1GUxPy2enxNvgzcBpgG4luXzQNJwI+UG3I9vjwSQfYLV2OY5x
emxnkO3SAOfKhf3jQU827B0LetJed9LNxkm+X7/F6jWZvSZCeBP63oHVxG1O
VieR+dOkb30tKpTQgKj0IKkE17Dfk+6BAME7oToaut+B7cIuooJUFtiuZ/Qe
FZ/g/Mmgd9igJ0tERWQXbH2ETkyLto3pcllQxehgDxFDpJN51Z5zBsPXkd5g
6FrvrWBC/wzGOgpIF/w2CPkIzqJC46jbI2UkZP0UDgCVYoVvxDXmj7iHHXqp
XolnnQSjEymRQqQA62UAJqcYqHphcQSIn4Qkf8Dy+CZ283gslosngO2o251C
DmHMMyAh655kjELOCBDATBdwHkK9vy+qRE7h9txyWgGiSyPSAd4NzICNdm2h
dn1F/bVysF5wlBftlaKzWmLrZVejAhqeX6p6Vqve83X/hWbwcjN4sR281A1d
WgpfaYcv1iLnyuGlxVDnlL/2In/2F+6Xv+t87pu2Hzxj+uYnB7/0Ht1HHle/
54D8kd3iQ5tEu7LMpgQ15kGPB0prC+UYQGIPEkUtqGj8sPAOSX+EoBaMcFul
6vkl1tgLahMFtrqvZtckLl4yffz2MbvGt7uIh7u9k03AFfiQu0zeo+UaNtfr
fZORzeL/RybLSHr8tZbCSkbZxjbkXtlaRbqhwcbnf8uj/v+bnNrYWSje8kkV
ve5g/aXl/W9G0btX0ctw2/8+ha6BVIS+T61eH2sIIwvsJTVk7NAbTawPhdA3
pcUxAoyV9EKFDK/QVS6MTaA30ROf2ABlGaLsNsoFA4GsaGaT9L49msPjkpxd
4rSIrRZmZEhkgtMbzhzoU8heqBJmHemo29eoTq3BnXrLAbyyRJhAmxEzIkwf
Rkm0Up1GplXiKFsuoqQSRiaXqrU6w9Fju9/77v3ve/zg4/v2TkUmWIPXonSY
JBarbMSqsA7RwwZqAHoHMBCTWmEAyGjUjFoFQwOJSiFXKtQalU6v0mg1asN4
MvLo4d37dmzKhPwek9On8/mlwSAVCdJRIZDGS4cA75zIFxwMbM9PHL5vZt+O
/MFd04D3vSSTGJR7tuV2byVsx42ZRgXPzNaJ9FQ0PanYMiXeztFeJAMtkcpk
A0OD8SDo9mg2GswnQkm33662SPCLImMZwnapVAJsH0eq8yDdx5HtXJrnEiwb
dWLSMJ/F4gP1brIg24eHhdjFtaCXVM/ZHiBRjiFiQZJq4C6wE/8MUn1NsaMD
x49sx2WnvLfnk+nPpQLGdYyOU3FRzhcPeIRdsInTQ2ykjHEmDZ90TJ/LhWJC
0CPynLhickJ4TDDUwzsgXXDCxGIkAF4geXzNFdOT8RgPifVcOBrnfVJMsU4J
ggFTuDAqrURHwCIjYVcMyeIuQYbL9XKxEHfECGEzcE0Bn+HMd4i4nZqDu/SH
s+zoRCKFuj2Z8jvd0AaQjhu+YLQtZneEpxJMJJzGwnYDZI9sEgBJLlJaocJT
C/BuMDIGB+PeSx14iXupEe5Uva2Gr9Xyd7rBlU5kpRldqsZaZ0OVV/2F57iT
P3I9908jP/yq+R8/Y/zC+3UfOqZ6cp/8kW2S+5L0WAhDtvwOym2i7AZqWEsN
wFVJJnChD5UqENoyEiQgh3EEmBJLILZK4Lair4EVd6li1UatK1/Hi+JtSbuR
xgJO72GvrG89ZCFIN2J248Pfit+7bv45kt/7Qj1ik2dAmUTq9z5z/w0LfcHb
sH2tJ/pztvFNbnzaP9N+rRdT3H2QaH4aKxuZ/9bX+j/uPuTrnWnv5+tzXvit
QYepVOueJbUAfy36//U6GvS8TktmHGAgphNBXaOBU5dWETZid0AWnyJppZQC
OgsjPTjIDBuZQeCnklErGLUQ1rJRt0tpCSaHBFBLtFBCnXor2OmNYh7D6pDw
EolIKhPJAe9quVYhU0slqOGdFufeXbPZcNQ3yA2Jh6BjUkt0SplGKdHo5PpB
g3lYa9YxWnjbYPDxRThHKepn2ybBNjA0oPEClcpVNpv9gR3Txw/MPXJgx2OH
d+3ZnIvzHreR5RU+PxMO0ZGwOO6nIyDgvXTQLfJ4lN7NydGDuzahdMeVqpOC
yx10O4B9V29vprHtk+ltEyDd05viqUnF5k2SnW7KTzZ4koglUp1xIOr3TaVi
wPbxaCDG+q2KYRFxtpOIPmS7Qi4Pcmwu6s9FfGBjAU/G60652YSLJTkhXQGC
d68ZZ1T5oaG1+dB1tguoB6QDzwP9QEf/mlZf1+0ZItpHe2z399juD8S8fZ9M
/weS0mIDo2eVXITzRrycsFOq4JMZpAaSzNi0ZPvYwPhEOI5p2EGrk3DH3qKk
MK42FeIeBZ6vUV2oELbH8pGeXCfw7wXJ5EKRtD+kV2LQjgxTDSBUhUiV/gUi
JX4Y+F2Rujqpbkg7tHHMKCxTxRwF9MC4fPKQ7omMNJvh4lPJzGQ8xVtdeCUy
CsxWRPXnhtaUSd/DL/gThaB6wDtecYwSznkF8WMYRMYB0VCYjnzN8uVXA6d+
5PjZt23//BXz1//a+PT7tB99SPX4buW+KcmWDJ0LU3GW8lopF4ya9YhuJdlB
G9QyQAB3/ZZjTwSDBbkShwZghNK0goAa6nKyK6tCsHUhvSZWN9r6Eem60T1g
9pXtW2wjWokJevgevAvP/Gfx+GexKbvb5Bsqb8/Yt+C6/6Gk/c8ov9dktFx2
t1Zf+05ktGDrzpn1B+KHVRDrPVwKZxpZFL/+tPf0cXcNBLCxQvZWI09Lrd31
9j3dPd/Vvd/tXT+TvD8o2NhG0T8x1owcUZEZEOwIVNgpED1A+n0cFPTdPhpG
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
4XOHrw32XR8auHbp+PG+fZ3tqqalsWjrz+r3UL+ZUvP75QdwaTYPp83lVZU1
5aVVRQVldfVao4lra7e9f/n4B5f63ie6Nnjs6uCRKxcPX754ZPjC4csXjly5
cOTqxaPYYv/QlczFwWNXBo9eHeobOn/k1Mn9+/b32NttFGVtrNGUFlXn55bk
5+MWqmKSjVlUXJJfWIDGHniPqfPlpeXlJZhTWVtZU19R21CH4Rp9o86os1g1
BkuL1gSfrbZW01JvZCo5Uz5VgjX/8/KzC8pKqpo02lZF1VUaC7OKtrZMbqYT
aVrqereDaRd2d8p7tsmA9942qdcBbOe7Fa4Lq/5aHSwmutusRsWC1v3tcUsZ
604gjxF1rAOWicNkwu+k2GPGtGdiLx2kpEwrcfIZ096x9Wy7wBs1zVnvJJ8A
nItyCuuK6iryK7M2k2Tyge0mYHteu6PW0S3Zt/GyZLQ0V9XAD2szY/XtaUbv
hFN+GV15N5byi2X3vOKi4qqq6vr6Rm2ThjWaJIsVhqrtEgwlapeMswMHzxcX
Fr59n4LC4uqGxobyJlOpQVPY0lTaVFVcmZvzP9xt+vZrboaAsnIKgdv5ZaU5
5bU5TYY82pTPUpWcZBEYA9VU1VBRWEXOyy6Be6oKa1qq9dt0Hf+R+Yt5y1cL
xltzulsLhtEFcO+GsXnDHXDmiy3ji5o7Tj2AHag+4tRBe3seBQ5/dEEL7YhL
N+rVjgX1k0HjVNg8E7PMJ6yLcauThL6dccYVI0Y9RM2ErDNh60wQowFgFGeB
8GF6Lso6Y6w3zvqijC9mDQDMY0B1jIfHMgIrnmYT6MZJOGVZWEX7La6mxdUU
jyLxkzVyHc15ml1b5tbS3GpaWF8S11PC3TSYcOkJAfVToDHgGvvK0xXl+bLy
PC0/XUF0PwV6r8kvVlEv16QX6xK2q9LzZenlsvLNivzNmvpqXf52Q/puQ3q9
Jr5ck1+tSC+WBYD/U1AaRgH565T8eEl+kpSekPZxQnyYANRL9+PSvZh0Pybe
i8uPouLjiPggLNyPCg+iwv0wv46S7iLzpbtR5V5I2ggK6yFpJSitYRUvIR0U
UwEpHRCX/NAB7EsrAXkN2qCwjM+C2FSQS4WEpSCfwEIxUiIsJENkXAjzWEkg
DPznMP5DOA+E90e5QJTzRfEn74cWfguY/ImrGO4I4w4yriDrDnPOEIy81llM
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
mxlGG7C9mbc181bSAbjTzPY0dfY0dQHhrU1dBOMoznHSYsUAvLcB2HsHOnoH
O/qHOgeGuwaG2iH6RzsGge0jnYMd9e252XjKkkQqEe+fbrun2Mmx0KnJqQV5
RbVKJW0yaQxsaXlFTlpOOpVeJVKok5haibKUKoNVrIaSa8WsPolTSXVcmWHc
OnrA6pjoGTnY64CYsNnhyoR11NE9DDFuGx2zjoxZh+09Q46eIXh5AG7oGRmz
jTrIxdFuiAF794ADomvQ0dk/1j043j3o6OqHiyOd/aNdA8PtvcPtNohBWM5g
+Wju6W/p7mvu7IXFrrG1p6Glu6GJRHNnXVOnpamNb+iqb+1qaGkllUpoy+xv
oTbvU72RZRo/UZ3FzH9i13N1NNNqNjcajakSaTqVXEHl/HnVV07NLx5V/v10
9a9ctTc98rtzyvse2S2X7Pqs4rpTft0tu+7Bjn+3vLV35hT3ffKH86Delc6g
0h1Qe4KauYDWG8TqlcCSajGkXAL1TnKeI2u6KMmUi4fpjTC9HTE8jfHPo7hV
+jqGlaRvMU0deC7g3fghZvwYN3yIGwDsP8TYjxgg140/RE2A5d+A2I5hMsy/
RYHtpn+N8f8qpLgILkqUR88Ew0h2NnFzE3m+Bvrc+JtV4w+rRgD4+zXDe1Da
S8a3xB55i0jk0PcOkZeL3Nsg/3aJJ3PD6wAEB+OreeaVn309b3gJZCasfuaj
n87R2x7mqYcBsf3US2/P6YHPEJse/aZbv+nSbzq1G27dpku74dRhzGrWZ7Xr
Tm3ChbEO4dTF3fq4UxcDmM/oE9NMYoZJzDIJJx2f1cWc8JYe5y4mDqj3Mutz
EIBofjvAPAsyuwFml2S/vwgadjFAn2Ph6tN5w9Y8B0vAup9b93GbXm7Dx2/O
GzbmDeswBoDq3NNFHsEe4l+FTW8i5rfA9rj5Q9TyMW75AZCeMH9cN+Nk0/Rx
0/xxy/IDmQDkP24ZP2yZAPgftiwwATH/btsIYH8DsYHq/dW68eWG8cUG/2yd
f7rJP90wCLG1YdjcZDc3uM11bmOdSawzgPe1BA0CPhTVByO64BrtX9P7wlrv
mtq5op5e0z5Z00ytoidzl9gyt4OKawHF1XkINYzfBSHk3y7Ivl1QfDcvu4KJ
NMo7q6pHgPc1zYOQ9mZAd3Ve/43P8I2P//Z2y59f6h45ONh9ZNR2dKz32EQ/
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
lWqJqkYEYM9M3+8VY7ZwoNgxI+X46IWjdtw/JWy/eHJMcGM+E9xvxLv9cyGJ
8eyYsFv6+fkDQkrM5bOkq8yZCbKFCveMfXF+4ssLk1+enwTR/qXAebjn3Jgg
+Pf8nJ8m1ZA2BQLGiaVDmsCTHVV4uWfXkFRMzHgnHcY+tRTb6xJMOtIA8EG6
nz8Gwn7gzOG+M4f6zh3qP3ew79SE1ZCrs0ha+OR6YLtGzKgkmiKqJIWCJ5fU
XElOuihtvyyIEkvEEmlyXl6Jpb6xu39Ax5mycgorq5Vq2qxmTGrGyJnrLHWW
9kbzUGd9f0ddr7Cp2mLEHdVGrqO+vaOuHRgOY0ddW5u5VXiJLk1DJ2E+Eh5G
dGyaeohvYzPRfEZycnZ6WkpyUkZmRn5+UWlpNawo8ImWvv5ahaakpLIgr+gn
Dc+x8jRdkl6QUpguTk+mkvKpglqJUiZRVYvkcrGWSTJzyXVKqbbD2OToGRpo
6wXpDmwH5IIOH+7oH+kEtiPSQbEPEw0Pqh5JDtEz5OgdEW7G6BkSAq6AmAeJ
jnY9CHWU8TgHetu7BgW2C/7MCEr9vQ/CugBfCwGcH+oYGOwY6qm3tvOtwP8x
mwPZPjg50GlrrzO3mY2kS9j+tikJsotqAKrX6fUg40G9o4AnYN8jP6h3Ld1u
tOhqldmU+A9Lz/vpq7M119yymy75zVnl9Vlk+1WX/NpszVWi22/MKm46VTfd
qjsuxQO38iHiXfXYo5rxItudHhg1CPk5FQp4n3p+Thv06pd8uiW/dmlevzyn
XfbrVue1K/O6sJ+O+NnoPBsLMutBdmuB3Qwy20FmZxH7lj9f5V+t8W9WTW9X
sBjn3RqpzY9w30e57yMGwP47bMNi+rBqhMm7FeP3K1j+8w4Dkf79Mvc92un8
axixEwua5yjXfQwBOIh29pmPgB1ijt326rd8ZHuUxI5XD1d2XNrtGc3GtCbx
WBl+hO7K2owy8ki1fFvt/JXs7p+X/uN/zv1v59K/tKccbpV0mcQWPcXKKU0V
pSylaoqosjyqsIAqhN8uGAtxXkQmxflUUR5VAO/mUgU5VF42lZtD5cM8l1zM
pwrJWzCWFlIV5VRNDSVXiTW8tK4t2WbPOHSx4NJ/Lvmvf1H5d98or93WPZrS
zz3Wzz/Q+h5oFx7rFp26lTk6MsfG/GwiSM7pCHLotC+CdOdIZjuHVBfwjp3E
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
uxEE+zOgOqj0GLoxL9CQMe1FwgJa/Xkc3fWXW6YX6/zThPFpwvIMR8P2Or+V
MG4TsMfiHEQkxqyCXI8xy1F2MUoHo9j+1x/V+8K0N6x1kgwZ54p2JqR9EtI+
XgVWqx+E1PcQ7Oq7Qc29RdXtJWxEcBPVu+p2ENiuvTevA8I/XNI8DgHYee9K
y4NfdPz8jLX3yKjtzOTw0eHBmvTKSqq6ViwrFZXCf94MUXoKlZqblXfAPnj+
uOPU0eGThwdPHh4AyAvHbVwgx14Ip28IbN8vC0WGI2AvjH9xEd3yywLqSTr6
F/vCG+KrS4K1smfFCDr8p3r+S0L7nxGAY24k+aBA+N/67DC5f+JnF4WLE/Bt
PxMIf2FCcOYFzl8+6xB8fniy+EIwiDDNcuKrs5NfCK0PsNJq7MJJ+/kT2JSG
9ITHs/kunx8dqq8zUFx9cgst5RViTbmoCkRFmaQc8A6/h6n4i5qcjHmhEjQ8
KImUwuz3VFFabmp+eXENY2xobLVWVcjKiytUGsZc19ze0jTYbenvNIN0B7b3
tRp720ytdW0d9WQLtb69p6lrj/OYG4OJMRA2wnkCeau12drV1NHS3DjsGB2Z
PHTo1JmegcHK6tqi/CJFjcraakP3BvMkrYPdfbSW/WmejFQkzUzKzk8pzJGA
OsqtlGC9LbI9zcIkmXWZ3EBrr0D1T4kun14SzmNOox3F+YiQ5SgAGQuXbKME
1KR2iRQf4fVeu4O4OvANAHYsbrKN7i0HiPFhxz7biWIfGbeOjQtJ7NaxycGj
k/bDwPaDo4cGmm3tBmB7h6PH4egdc/SN2/vHOhuayRFL/I9mO1HmP/Z+J/5M
Ha1vENq/C1uraM58ahrMNtLYgow0h2dbzZa8zOwkSpRDpTaL6T+r+F03dz1A
3wWqT9d8h3iXA8yv7Kl3+XfA9lnFN9OKb6eV300rrszIr80or88qbs4o7k6r
7s6q7ztVwPlHLvWsU+NyaT0urc+lmQf1DhO3ft6tW/Bo5z3aBY8e2I4CHmS8
h1mZY1e9zCoSnon4mNg8E/MzUT8gnYsC2/0C2wHsbAJ06QKO8QVu3W9Y9xkS
fsOGn9uc49bn+ISPX/caEm5DfJaLzhrCTjY8Q6881q1M6Zem9Iv3df47urnb
Gu8N9ew11ZMryoe/lt36RdWVv6n55e8U/rxNNGAWt/Kiei3FySltNaUoFVUX
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
0UlG0O0aCdumbR8l9B7t2tseFXZLMQESs2X6hBjp7ifXhYSZPsEbF9JphIKj
4f08GWHXVVgahuE7958F9gNXBAQ+5kAOj3aODLf2j7QNjHXZJ20HJwcPoycz
fuTA8EFbQ3c702S1dDmsDnuP3W51jPSOdjU1t5n5NnLQ3ie2N/3kuD0gdjO7
t5faKLg0n/Ih2U9NZrAJsKDn6/T6ZpNJI1eJKVGaKBXkTSGVz1Pak+nDf1P7
By7+2hxzA6D9qOabR7VfT8l//QioLv/1E9mvpuVfP1H86nHtr57Ifv2k9usZ
xTezym/QsVFec6lvu1X33KoHLu1jl/aJRzM9p3X5NB6fxjsHofd5dH6vLjCn
X/TSS3MQDBnZkI8N+/QRPxP2G6LEdYn6DCTIxG+I4A1cZI4JewjVPXwUR8Oa
EyM8y644mZCLhWeBFScdIrHi1K/O6ldmYWTWpiHYtSfsypRh+RGzOEUvPtQF
bmq8dxn/Xyp+aRUP6sV0NVVTgEI9M1mUnibNSk/OyUrLywUIZxXkZRfk5Rbl
5RQV5Jbk5hTlZBfkA5mzYVIIE2B7Vnpeekp2clKGVJIiESdBiEVSCIlYCLiS
nCRJSZampiSlZ6Rmw1oAH8/PLS7MLy0oKC2AMa8EI5/M80sKC0qLCstwklOc
n1Wck16QlZKXnVyQnVSYDUo+paI6VVWX3tovGf2f5X/jaww7uZDXEvZaonOm
6DwR7fOmeBBtmcSiKbFkQrmOuh1F++aScWuZ3w6Zd1YsOyvG7TDg3bIbrnuB
bLegOI+hVt9NmHdjFojnMSMBu3Enxm0nMB/mKQp10xaodJLEngCkR7lY2BCO
GSJA9YhhKYpUX47ql8L0fJjxhwHsejc5mMO1JlQqqR6H1I9CAHYtmjAh1f0l
5d0gdpK541ehaF9QAtgB6XfnVPfmNPfmVHd9yvtz8vuL+uk1o9tbf/2vmn/3
XNvQuK1tcsR22N57/siYzWSB3+FqsbxMVJEjyk2n0lNEqaDyeBN98dQEgP3U
ocFTh4dPHOw/eWjg1JHBk4f6AOxnj0IMnjs2TCZDJO1khNgy40JDSNxXPbN3
1sZnmJfiICWoyHxiwkwQnk98BRgHvJMgVwQ9Pw7iHC3080I7ggmC/QNw8auL
QmrNuGC8wNrx5T7VQbd/dWmSlEE5Pj8Hfxxmv5MHB8F1d8A9SPWz4xdOjRCj
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
0PDDo9eHr1y/DHb1xvDV68NXr12+cvXyNZD3Vy9fvn55GB66gS4YvXYJbogu
QA8NwVxgBO4P2L8yeGH0woUrF7/+7VdnLhyPk0YTCdhiKI0KbP4U3YhtJmXz
edFJialKdXKqKio2gS+WsgUiMI5AxET6XEBnsqg0GjI6nc5g0lks+B+FsrmJ
NT4uqqaiqLne11id31STv6M6r77CXVvqqi7J2d9at29XzZ7GqvbGqj2NFXsa
K1G/qbptR3lLQ7CtIdBUFWyurmyuDtaXeXfWBQJ+T1RczCePClrEJf6ngN+W
8UjIo8kamQZancBkEVgcAkdMjkqip8iZcg1Ta2SZ9RyzkqFJpiZHU2NiaQlx
jCRZrNJuNOVlGD0ZRuB5UaalMMPkSTeCFaRHqA4Y1/gc+qIMrS/LUIxIDoSH
k1rsIR2w3YvM4DYZ7cn6ovT8gNvnycgD3V7s9Hgd+VVF5eWeYLralGOwF6S5
fDnegLukoqiiJlhTW1Fbi7Hd48jPMWTk27JLC4IA9nJfRaWvLN+ZmZNuiuh2
IHykrB7yrmAdp2lLkJs2wyOB5ABqzP1i2roGe8o24bHAmEgnx2rNxjzt2VvO
mU+63WopcGQlxMZhIZEEJo4uJUTHEBKj8XFSkoSDp9O3dTsyIh2FTQLbhVXe
upbKzsbSvS01BzC244R4fiwhIZ6UKCZLKzz1kVIDTaX7dlaA7YG//I7K1saK
3Tsr9u6q3N9a09FW07Grat/e+oM+VxmTyBHjo+QEtYqsS+Eoo7gxNCLTbslu
b+1vqu9oqGnfWbuntW5PW117S317a8P+ltr2tvr9bXX74Ewr6nfsrtu/p3bf
7tq9LVW7W2v3tDWgh1pq2uDKXdV7WmtQru49lR3d1d0Hyzt7K3v7Kw4dKT92
omzgVNnZgbLzFyqHBquGR8tGrgWvflV64+f+67/yXf+t//rvfF/+0f/1N75f
/MH3q2/8v7lV+sdv2v5YnFnDpAr/xQcIAx+ZJpHG+CyBX7p/8Tvdr36Z+vPf
KH7+jeFX32b8+vdZP/+94+d/cHz9u4yf/Tbrq1+mjf4qbfiG4vTFuJ6zsQcG
YvYel7T2iXb0CuoP8Cvb+eU7+f4qZkG7Yve5psEzzWcHWs6ebjt9es/AwJ4z
x/ee7N17pK/jSM/+Qz0HDnd1HO4/cLivsw9D9KHOg/1dXYe6uw939xw52NXX
iRh+EGN4fyfAvKun42BPZ8+hru7+ni70lM4uZF3d2JluUONHDvYd7uw/3NHd
e2LgdHVlLQlPIePJYrw0UoIzGh/Px4sbapoGzp7vO3z00LETh4+fOnLyNLLj
A4ePnT584hTY8VMDmiSFCCeUEeQxhFgOjifgxO/r7z9x7uyx06eOnT55/Myp
Y2cGDp0+deTMaQR21A4MXh6GrwwPx4+lxAvwArRNCZQpkRzD58cLBbF8XqJQ
kCIUZFt0u+qDrYCR+pLdqM51CWaI7c1VRS6zLpErjrCdSyJHFlKRbqfQxDQG
j0A26FRHYa5w8fS5i6cvIKf4+cGhCxcxJwwodlDpw8NIhGMyezBiIJ5HRoGx
Q6NXkEXQDfgFDmPsBRpvEhuk+NXrl28Aoq9eGoXDL0ZGbgwPX8f8MNdHhuGy
L0avfDFy7Ysr129cuXZjFLXXR67eGEEXI+wD/y8jQ2wfiQwEI9c2Ff4XX175
+a++/OoXXw5duLCnsVkjUwj4IgqZTqZQaXQ6BUEeWipa6scgTySTqTQmg8Fh
MDkMFgdkOZPDY/H4TA6XzmLDxcgTQoyU6PgUpcKm05wZhrbmspZGf0sD4N0L
1lTnaahyA96rg67+/c097U3d7U29e3d2tzf2H2jpO7Crd18zHPbt33Wos62v
o62no7X3YFvfwdbefTsPd7X19bZXVgaVcgUT8yD9H5OIzakEvHY8WvZF2VHQ
Z4DOJHO4FD6fxmdT2CwSk0lkcKgcIVMYI4yVJcjMOkN2pt2f7wx6HH53Rokr
LehKD2TbA9lWf5a51Gn3Z5ki4rwoUw9g9zuMHru6MF1bkKYpsGvy7Vq3Re22
qt02TZ5dk63VpKcYfJmg1Yu9Gfluk6PYWViU7akqKgO2Z2isOYa0fLuryFkY
yCupLK6oClQB2+uqGirLa73ZHpch05OWC3q+3Fte5auo9pcXZjtz0swumyWy
C8m5Hd8SgfaWDneYN+NhgPaRIcCx5ZbJxgqtOiIeeNNWYAzS6tZIbExkFdVt
t0O76ZbBOm67rcDh4HN5mOOdgpWdjYslJUYRY7h4Dh1tWSJusZ3AQDGTxDi2
pKaorrWqo6miY2fV/sToFCLG9hh8fBwpUUKPrirZ1VbXFcipTpe5rClZdqXD
osiyqZw2pdOhcWfrC7LUbqfW4zYWuUyFfIqYjeMl4uUakjGJrYjmxdKJ7KQ4
tcddlptZApbnCObnBD25wWJ3aXFuGUz+ygrrSgtqKwobaooaa4oaaosaarz1
Df7GHf4dYA2Bxuaq1h1lzTsrdu2sbGmubm2uadtZ3bKzpq25fndzfXtT/e6m
hvaWnZ2tjfvbmw/sad63v3Vf+87W/a3721sOtu/s3NfcebCls6e1Y1/jno6d
ezua9nU0dezfeaCzrftgO6Dz+I7aNpPWxOMJqHQmjyuKlcQrZWqDQZcaF59E
lqaSY+Tk+ER8dGaceUdOoCqzoMpRUO0sqIbWVVDhyA7YHUZRihhHF+GoPByJ
iyPATCDScnA4+EtAx6I0HejsPdBxsKOja39H14GO7s4DvV1d/Z1dvQe7eru7
+nq6geSo7es51NPT1917pLvneFf30Z6eY93dR7qA9l3o+oPdhw72HjrY09PV
C2DvO9DTf6C7DxncCvo9/V09oNj7+3uO9Pcd7e493H3oaE//UVDmA+cu+LzB
SOb/GHycjKhKJsgkuJgoZkxPZ+/J02f7j588fHrgyOmBoydOHT01cOQkgP00
9AfODGhTVAKcQEZCbGfj+EJ2fMehIycunDsCPD998tjAqWMDJ4+dAbYPHD0H
kD95ZujSvt37oojiKFK0kCBk4pl0Ap1CoIi43CSJGEQ7sD1JLEwSCdJ0ipaG
0t2NpW2YSgTpDtaOpHugqbo412ZI5ku5JBqHhPalomh2DO9CKgN0O59ElctS
+k8cOj80AKL94qXzQ0ODl4YGhy5fHEK+F+RUQd6V4QuoM4okOhyCjB8FNX5l
6NrV4evXR0avDl8BSl8bBiZf+2IUIHz12ggcAuERk69dvn7j8rUbI1cR7YHb
o1dQO3L1C+RFh8PrAPaIof4oXHkdaH/jcmSwgAFiW97DC4CT174c+fkvv/j1
r7/+anSkd3dHsaNIKVVwcCwmhR0TFRsdFUsiA8+JwHYWm8sXi8VSMZfHAzVO
IP3XwPZ/J+p2n0ohmXSy5lrfwfaK9l2+3Y2+3Tv97U0lLXW+phpPA0j3Sndt
masX2L53J1h/R0t/R2v/gTZAOoC9f/+uvo6Wns49XR2t3Qdauw609Bxo6d3f
0rMPzree6D947HDvvo7dFZXB9Iz0mNgYGgoq49BoDBQnQyD8G963ohS2C0UR
N+PdySSYanCYbCFXGCWOToxPCpQU9vW0Hz20r+dgy8F9Ow/u37l/z47OfU0H
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
2K8+9qlP/GZd7OXEDIPEGqSMvmR+eMp8My56Cr/U/fJxpd6v0YdP1P4jtfdY
7T9R+o9OfAdK76Had6T2oVbjP9EGVNqgUuNX6wIarV+l9ar1fpXepzL44e1K
Q0BpCKpMIZUJ2oDa7FeavCqTV2nyKM1epdGtMnk0Zo/W7NOavBZLwAZhC+tM
vhOj60hPhM6hNLhmFnaW53fSMTwew2JxDNieSuXApTFUyZ3FElg8nvTa3ItT
H+VM4YhUNtHXBzGukEOMEbuMzb957tDs21AVwQ6E+Xhbf7yj2dtSb6/NTj0f
ZIslFLaIwoQQU1liGusP3tkkyvOnrzL5MsqQ4EWgejZfxnIlLF/OFvM4eHo+
j2Vza2s786sneyr35pF9bd+8savb2jVs7hqWd3WLu9r5Hc3StmZlU7WyqV7d
gla5snmytHG8vHa8sqZcWVcurh4trh0vrB4sru8tbR7Mru7Prh0sbh4vrBws
ruwvrR8urO6tbh9vHqhlkgH4J5aT5S+prwHvE5RJGbn/47uFrcOT5a2D5a2j
1Z3j1e3Dja2jza2jwyPlZP+4hCSboD0dooyAt3Moojn4w9SGvQPV0bHy8OA4
msGKp228Ua+edWuN5qT4mZTSL6f18SkCNoXNhB8IXzQklQPYR6SSYdQC4UWD
IuHr8WGP6STs1IWc6JF2YbeGeMIpery1x6xUri8+k/VL0PwpA5BO5NuB6mwI
OBTS6AOKvkQq3r5snF42Ly87RBkM4jmiOsrJnF9enlbR7EGp1qrWWpUG3GF0
6hAtuDs5q7fOWp2zVve83em2iSx95+K6c3ndOb9qnV22Lm9OL28717fdT3fn
N5/PANe3yMYv7x5vbh+u7h6v7x4/3T7cfCLi8+Pt7ePNp2+Xt98v7v+6/PHP
7cPjbbfVCjg9G/PLT/onpFSpkCbiAd6YIhEbxkeJjCsfkAwN94/3o0d3wQ9D
wuMA+rhsLl/aN/Dm9dz2/tGe+ujt9Lvh0WGRRMpgsZlsJp1BYzLoHCaDx2YK
uGwRnyPkscV8zsz003hcXUhZsbAhGdBBpAL6tF+L+kFd1KNEeHcrg479gHXH
b97xGXYdmg0cPDwZySWjeDySS0ULWLSYjRaB6ulwKR0qZ+PlbLKCJ8uZeDHV
E+ZoIRUB/pcAoXiiiMWApYV0pFBI5fLx2fnp3oKkXkFm7z8y+f89JP1Z80Ql
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
2Z0ppzvjcCTt9qTVlrBY4lYbCpsd2XjQnwn5sYAP0bsXAU8y6EmHAhhEJIRH
w9lICA4TLmdIb/apjV6l0aM0eaeX9tbnt7PJYjqVz2RyyUwxni712J5J57F0
Hhze6wouvZztY4rGZATYFX1AdYD8mFwxIpNPv3xi1+w59YcO7YFdd2jXHdhQ
ic+efn994fmLEY5ESuPwyfQe3sXoKRW/HjwkINGeDI/GM3i+VAe250vVSqmc
L5XxSrFQzueLxUKxUqw0jo81W7s6syerc2Z0rrTelTG4Mb0bMwSKBg9u9uEW
f84M9h7IGvyYPpA1BnPmUM4WztvDYOnFQLTsDRdd4bwzVnDHS+542Zco+RPF
AES85I+XfLGSL1n2Jsr+RDWZP4VPDYiVkCKepEw9o70cIo8B3lVHlmypHU7X
QplGONMIZerZamd2eklIEo9SJwepo/BvzSALDrVwQ9DxpOqhbGN150hjsdXO
uhefrpen1+GCQeYwh8xjU1DdI5POPT7Wzr1blLOFqPRRLkPqLhaNAttFwqcD
/fqTnYjHEHCoAe9hlyrq0UbcmhDazh0kafnlUJ+MxRJQ6YS3/2E7Q8xgypgc
MYvjcJkvPnXPLjvXN+e3qLIR2oubT6h/++W61CipzXo/no/Wmol6M9VoJ1rd
WOc81bnInl5nuxCX2bMLDMU5dnaV6d5gZ5+wM2hvMuc3ye5lsnsBEeucJbrn
sYuL5PUNdvsld/0l2Th1xTC11rk6t/t29OMY5+kAbWyQMdxHVwCFREyhkCmA
4NF5QrZQypVKeVLguYAt5DH5XAYPqM6k8zh8uXzsycv5pbVjtdLl2rfaNHbj
w1+3gPEvX28ev909/vhy/3jz9fHz14dPRL39mcl4PCyXIGNn0pCx08jAdhGN
8mJIGnAcZWPmdFgPYCfYbgK2g7qn/NqkX5f0a6NeVch94ifSMl7TttuwCZYO
PK8CsRHbI9ABzlcy0SqeAFev5dP1QoZosVoOq+RSRSxRzCaqpVQZgF9IVovp
Sj4BAWwv4WDyyRIMDXiqWc6dVot4PG7S69bX1l69fD02Mtbf16dQKMYHh18/
ndre2HQ57LlMxuN2LcxNK2RyFp3DYQnEIrlM2getkC8RCqRCvhTua8QciYQj
kXFlMo5cDsFSiChiMVk8xhp81/9qf2bbq7fA3Ue7muvWC60SfMNJPBfP5VJ4
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
AjPTK1BHck5UufT2CoBrNohiGJSE6c2EIrajCdndxfltYs50e/E/bN9ZWthd
XtxFGF8AmPeS7b2sO8TO4sLWAtwCvJ9/+WpC0jfEl0wMjaAdftCqJYaMLBui
Dyto/UKaiENiPx95bjN6fdaY354wqJ1sJp/4ZRcOMobkVMXTvhcea9RvT658
2NucUXpAvPVBmyU80v+ETqLBTfoY9ckwd1ImGgaP2No58XrSFlMYwG63EWB3
JN2uJEi+05n0eNJ2Z9IBHu5M2p0JpzvtdKUdTjjMeP2FYDAfDuRi4WIkiMdC
APl80J/x+9NeX8rmAKQnfoMdtS43KHoSLB3w7vQk4DfR7ok7wNiB7Z6ozR0B
1JucYbMrYobWETS7Qgubh4vzGxhWSGby2Wwpnytn0dpP6BewTCGDZL4Q8EcW
3y4OcBVjsv4nA4OEuvdPQNvXPyaTz72asqp33cYjl+HYqT9y6A9B3Y3KDfX+
ysqbt6NcsZTaYzvi+f/2dtq4fCCdydXrLUB6vdaq1dv1BgQcAuRB3ZvNzqnN
5lhePwCMG1F2PWf04sB2a6BgBUsHtgeK9hBoOQpwdSTq8Sp4O7QQBNvLnkTF
m6yiSFV9qWYw0wQ/jyCk/2J7LNtM5JqxbD2ea8J5aKPZyvAw+qeUkfvGKc9G
qU8lpL7X43PpQiuOl6NZ0Kzu5u4Ji8SBez0pBdguZpC4S3uqePnUmy6Fc3Wl
yqpR6j88nQZpl9EVHDIyWDqFKZD0YzB+NTtYFt9eXu1jC/q5ghGQdpGIyMmI
ge2A+t3VjxGfFtge9ujDHpB2fdRriHj0IYfKot2eefmkj8MlvL03nfoL73Ao
YzJ5VPrWzhba0QttGnNxTSRkbu4ue4v9b7/efPpy4Q7YfZkMSrN0LzPd8+z5
Ze7yqnhzU7m7az4+th+/VT7dwfgVjmXVJ5bVud3X49OjggkFtb+PPNBP7ZfR
pFKGVMyUipgiLp3HJuQc/oIQvbQ5BI/JQ+WJDDaTxmZRuUwqn8+XD4w9ebOw
sQP3+KlMvN5Kdc/T51fRzmm41oTw12rBWjVUrUXr9VijHq3V4o2Gt1TYN+vz
zdzPvx/++uv+x89HiO/fvz0C3r/dfX24ffx2V2vk3719JeHyQNcFdJKATga8
Q8i49JO9OSxmxmOWUtxWStqLCVs+ZslFzcjhQzo8ApDXJHzEjKrjANjuM+00
8tlWIdfM46gt5Gp5ZOntSq5dwXtsR2WHAORKplmFFs1aNsrQApnxFrom20YO
n4GLe+/qVPOtaq5Vw+HiZjVbr2A1eEs126oVQMvrFTifa0KLII+jhEyj3KqW
muVCq1oEtrdrxWalAHHaqFyetU5b1XgicqI8fv76FV8IdkqhUVk8tkjEkwLk
xQKZkCfjoh3VUAuE57OEPKZAxJaIORIxSyJiiUUMsYgu4ZL5YjoMx7Knsiez
kzNr79fU2yf7s+vb7xb2F7aONvaUu4e6I7VJaTRrLVaT3Wawa3aVG9Mrmx9X
tATbTScWs8YO14C0b8336lVmN4m1oijHPtvTcmTmG7/3DejVSaJ8+9zM1tyv
PEwvekXsv7PoROLlt5/3GA5y3sM7sH1vZamH9x7bUQ5nEf7cD3MvX0+KFTIq
d7xvSCFB5e40Eo1HFgzQhgYA3fR+AUk4NfzChdbvR1y2qPLExmJwge18uIY+
qKD2vRh847HH3LbY8oedzTmV2xxzWeLLszvwdaQoG/NklPVsQDDOpotfvZl1
+9I2a9yJdD1ltyZcrpQLGO6Mu91JpyvudAON0y53yulKutxJN/DZFfd6EgB/
jzuFZkID2UgoFw7i0WA2GMB8/rTLm/L4UsQbUb7FAW/xJp1AdTjpTULfDQF9
D2pdfhROf9LhT9q8cQirN2p1h62ukMkVXNk7mZ1bT6fzaQwt5M/nKni2CGBH
C0KxIjAfsT0QBbYrWNIxef/TwaGJvv6etIO9j8hkMy+f2dBc6hGEXXvgNBzZ
dPtm1abueH3l7ZsRjqDn7cRTof+DdzgUkeijUnk6lW02T2sE2BvQqXegrTc7
QPhGs91qt5xO58rGodWPW4PEtKkvbwnkQdotwTyIuh1cHdQ9UnZGyw4iAOnO
GAK7J1n3IZhX/el6IF33E4HAjgHAG7FsI443I9k6GDuAPZlvQZvItVExTLaW
rZ8brSEWhSsk84cp44D3EfKEhDSg0rgylVY4Ax52tntsYJA4MqpCQpWLKGLw
9qUdZap0GkyVgrmK0eL9+GxWQlb00QbENCmbzOXSeCQSdU+la366ydUbWKG4
vbLezxEM8ARjUhlKuQPbJcjbxyTSraX3Qbca2A48D6OCGR1APuLWxZxah353
4dXUIJePHoeNplOZf7ydyMyweBTa8urK6VX7Au0Vc/Hp83VvIdLdl5sbYsOu
688X7ojbnUnmr67Ld5+rX+9r91+qNzdYrRlMZrVmz+bGyesnsxOi54P0ITmp
T07u76cNDDEHBpiKYXYftAIqn0MFnguB6hAcOu/PZCibzqZTGeiZjGS01JvB
lfSNPgOeH5scXnCG7mXp80Pp60Pu0w12cZbsdJLtVrTdirU7ic5pvHMWbzUT
rUai1Yw3G6lWK9VsAOGVNluqmPn5z+N3MPafj99+QOfb958Pj399efh29/D9
S7tbXZ2bk/IEEhZdxKQKGKhuSYye6EfZW32LhY25mLkct/fYnosC2035mDEX
0WMBbcqvSQe0CY86ZD8I2ve85m0Q9TZwtZhvFnPQaQNdQb+BupVcp1ZsVwsA
8E4NcI1I3iZcHdANcK6XAOzwEjA5T7yEDtu13Gm92Ibrge01vFXPterQ5tGZ
av60XmpU8sDtVhU4D2DPtRtFYHu3VT9tVIHtp80q4nyl2KyiaMBltWKnUz8/
a3dgzMCjFrN+Zna2v3+EzRJQSSw6DK8cKY+Pgs+T8thilKthCYXg8yyhGBUm
EZDnSAUsEZ8p5NB4PKpQQAafl/Yx5GP8gWeysQ/jr1feLh6v7eoOjqzwgbB5
3DYXhGr/ZP3j8vb0qm5HpTvUG0/MZrVNvX+MsigIxfNEccv078zMdG/lUW/O
tLfrF8q9z830+E+UrM/+WZq0NfcL6eDquwvzYO97C/M783N/plD3VhZ/2fvS
wv7K4i97X5zfX1mC88D2zdmP8y9eTYgV/SyhnCkY6x+iUWlkVNmOtnsdpI8M
0odlVNmLkRdOs99ri7jt8ZNjM4POppKoAooIvF1B63sz8DboSbudsfm36zuL
Gq8jrVd7UN0pKqSZGGFODQueitkDMvm4xRa02WLg525X2u1KedxptyfjdCQ8
bkA3nASSJ53u3vmUG2gMJ6H1JDyoTfr8mWAggyZDAexBAHsmQLRuL7A9Aa3b
n/IE0k449KaB7W4iPCD2wQy0nkAGLnD7kp5gxhVIOfwJZyBp88dA483usNkT
Xj1Qzc9vJ9OFDF7OZMsZrITjZRwlZIo5NKlaTKbyoWBs6f1SH/sX20HdewFs
H5ZJP0xNmlXbTt2hx3gCeHcbT+y6fZtmR3e0tvbu9TBXIKGx/ng7kXhH0g5s
B28fFktiiVS7c1Gvd2rI2DtA9VrrtN4+bbS6DbD2btfr9SxtHtqCOVsYs4dx
G0J63hYpQNijeXes6IoRYI+AoldRJGqeVM2Xrvuwhj9T92cagUwD5VtyrQje
jOWA4T2MA9vhfA2COGwShO9E0TVwcR2rns/OrAKeZGT5JG1qHO0zM/Bk+H00
V43Az6p6undsYpG4wHYxWSqkiKgkxtziXrp8GkgWA3jZ6vQ/Ez+Tk0AhFFwK
j0PhM8kcoagvUy4XOi28Xoe78f2tnT6uqI8rQNkYCVHiLhL2CL82+y6A9mxX
BZ0aBHaXDtqoWx9zaR2GvaU3L4f5QhGdCWz/bexoLlXG4kAwyZT3szP1y+b5
LVqpdHN79enT9ee7T58fbr/+/fWvfz3+83/9jGJJTySWzJe9gZj6xLw0vfFq
/MO4dErO6BORJRKKRE6Ty6jyfubgEHtYweyT0eVyukxCE/HRvoVcHpUHQxXY
IIcB0s7mMrh0MpOCnmrHJFFZaNJvaHRqaWnXaLZns+nuefX+W/P7j+bjz8qX
v4q39/lPX7IXF9h5Fz8/y56fYefn6e5p+ryLnXUz3W6KAD7gPdlsZjsdvNPR
2J3RTPrbz4eHn1+//vMVWrRZAZGi+frX3dcfX64/dQ/W12U8kYzDkjDp6PF/
TKqURRPTSauzz3Gw9LgFqF6M2wpxK3h7PmbOR414yIAFDajc3a9LuFUR51HQ
fuA2bwGlAartKrJlaE8rxW6lBHyGOG9XT5uVdqMEyO02q+1aqVOHKJ8CjRvF
0xpcAy+V4WSbiA6ieqHbqMAFLWJn0FoVb9ZyTTD2Wr5dL561ys0KDAT5NmJ7
rtMqtRqFThP9QWftereJogN4b1Q6reppq9xtVyBO25V2u9yu5y/blbuLztXl
aalRDIQD+9sHL5+/gSGOSmNTKCwalc1mCoQcVDwp5kmEQHg24jkP5c0EXAaf
xxZyWQI+W9jjPJfOF9AEfCpfSBXI6JJhjuKJZPjN2Mu1D4snW4dape5w+3B9
enl/YdN8pDerLCal1aS2qg4O0IYDC3Ob87O/1hzNzPTKYAhu/8qo/zpJgB1a
FL+T7QjyaKoUrTNFKXSUYyES6WhFfS/lgk7uriz8yroTbO/hfe+3xm8vwR/9
Ye7F60lJ/wBTJKSwpRyhQox26aeT6Dwyv582NAR4Zwy+Hn/tsvg89ijBdgv8
lGgktNZpgAHerng39C7oSTns4fkPa9uLKr8XezrxmkGi91OHRpnPBvmTcsEw
jyU5ODH4/JjTnnAhthMAd2VcbsztTnk9KDyetMcLh2mvF/N4M15P2usDLGPe
AETG4wM+Z4DPfn/GH0ARCGBwF+APwUtpCB9cE0AY9wbSvmAGwT8A/Yw/jPlC
qAPvRZCHV+EwlHKHUq5g0u6L2Xwxiydi8UU2jrWz81uJTDGDV1LZcjpbTmFl
HC/lAO94CcuW0lghHIivflge4Egn+gamhkdQWmZgYALUfWBgvE8x/fyJRb0D
ut7LybiMx3bdnl2zYzne2p5+OwKfMyLN/icnI/1VA8mRkBnDYmk0nmy2L+qN
0563A9XrnU6zewpcrzfaZ2cXfr9/eevQGck5ollnOOuM4I5I3hErOBIFVwz3
Jwq+RNlD5NW9iao/VQsA0tOI6oF0DWk53ghlG5FcA8D+i+H5Fhg7RCzbjCF1
r8XwRu8lID9cH883wlgtWeq6IykJX84j8UYoY2OUyWHymJjcp9Y7E5V2qto9
VFqYJI6UopBQpIS3M6Znd1Klji+RD+eqBoMLjB3YLiSJGCQmh8KjkjhHOtPN
X/els1au08Cq+f3d7QG+TM7iT8jlED2qQwyJhCsf3wSdv2ZRwy4iOUN0IJym
vdWPr0YFEhF6+DXjV6b9dwDbeVTG6/cf2p86d98+PXz//PNf3/75nx8/fjze
fbo+bbQxf9yi1L9/Pv2k78UofxxuQiVETYWcDgBXKJjgPH0yJmBcLKAIhWB0
NAEPFB3MnMZDmxMy+BBwCBygk1ioGIHEJJGZPLFiZOrtzPb2icsXLNQL15et
x8/dn4+1xy/l+8/V+/vy5/vK3WP58/fal/vq57vyp9vcxQV+ScTVFX55mUWz
t3B4nTm/THe76U47227nT7uVqwtTwOuLh+///vr1X1/v/7n//s/Xn//z+POf
b49/P9z9vL//8XDz5UJ1tKcQy+RcjphBEzMA7HRgu4hGnn0zkQzoCnFbCdie
6KVlrIWEORcx5sLGbNiIR8xJnybuUYUdh0H7vte6g0CNdgMqtcGQCXQjwgPb
GwjUPXqfNkqdRpmgeqXbqKK2Wem1nQaBdxgC4LJWpVMrtWAIgFfbtSYQvlGC
88ToUAHawwWnvcM2ur7ZLLdg+GjVLs4aF6fNi07zqts+azfgvd1O7fy0fn5a
O+s2zrrNTqfSbCCr79ZhrKm0T2sXl53bq/PLi9N8OWu2m5dW18Ynn3A5Ahox
7DKoTBFHKGCjOqVelgbhHUZntJBXwGHxIQD1PJaAx+AJiFJVLpXLJ3NFFL6Y
xBeReTKWbIA3MioZmxp6tvx26Wj1UL+vcajN5mPl0doq6PT20vwGwe3eNl+r
v/cW6G20/vuZGjMg2FsLs8Qe7NP/5e1Eyn1+juA5qoHZnZ/bX0B9ogxmAaQd
2N4jeS/lDrr+p91dnt9ahBuBjzPPX0yI5H0MUEouh0QfkfWxGeiRhUwSQ0KW
DdNHh+jD7599cNt8TmvY404cHRhBSOCXV0gWIbZTFB/GP4Z9Gbs1NPNudXdD
fbCnZ5Hh/l0yTJscYT8bEI1z6JJXr+a8gZTNnnA6kiDqRI49DXj3ujME5JMe
V8rry3p9uN+X9fsxvw9DnVDWF8x6AebQBvAe24H2wG04A9IOeA+GMOICDF0c
wnzhbACJPRYMwKsI6XCyx3zoeMNYIIoFw1gkgoejmCeUBLBbQd19Ubs/uqfU
LSxuJTFgO5C8mMXLwPMsDvaO2J6B85l8OBSDwXqQKxuVKaZGhicH+p8MDEwO
ohhTKD4+n0BzqQZA+r7TcOg0Hjr0+3bNrl25sz3zdoQvENF6dTKs/wI78nYp
hTkolASj8U73Cry9CaLeOau3TsHbG6enjQ4S+NOzq1AkubJ56AxiTmB7EHOH
cXek4I4W3fGiD5WpF/zxQjBVCaKCRlTx4k/XgO3BTCOK15P5VirXAoCHAeaF
TjzfTgDh8RZieA7wjhy+x39E+x7bs9VYrh7NorKZRKW7uLTDIrHl5IEJylPA
u5SkeP1kNlpophvnGo2LReJLKX1iigw+GAwS++P0ZqLYiOUrmUp78f2egjw8
wpwYZI32s4aHuRN9/BGjzhmLYKl8sXJ1DpKnVB4NCuX9XOGYTDpGLE0dEaN6
yCGhcPndC2B72A1I1wcJtofcupBLB63Hsrc593KELxbSmSIGk8A7Gw2gTA6x
FSRfQGa9fPqy0io2O1UsFvcYnccbh6svF1/Kn43zxuRUuYQqlTHkoOJSmkzB
GpCz+qVMhZCGljqKGBIRTQjmxqZwOBBo/pfLRqv52Uwag0lhEE+so9FJXACn
uG/02fvZLZXengjnz1rtx29X//y8+dc/lz/+On38Wv9yV729rd19bj3c1+/v
G1+/VR++g8DX77824KW7u/Ltp+LNVe76Knd1hZ2fla4uCtfXwHbsAg7P8xdn
1cuLytlF/erWnog7wr67H1/u//3w/V8PP//9+Ne/Hv76+/Hb3w9ffz58+fb4
+esnvUHVJ5MpeDwZmwl4B3uXQ4dGfft0JOrW5mPWEkK6FcBeSlrzcROqh4yY
syEjMZ2qTXrVUceR37brtmyftRBUL9q1y3b1olXr1GunjVqnVr5o1y/bDcD+
ebsOcdYBqSao3qp227WzVu2q1bhqN65Pa1dd9GqPydC57DbPOo1z+Fy3at1m
rduuIv1u1eHVi07jrF3rtGq97eXgzPlp+7zTOe92LiFOW9fd9uVp85x4+1W3
ddltnXcbF936xVnzvNu8Ojs9P22dturdTuO0Uz/toF8dwPvV9cXVp8vzq9NS
OWd3WNc2Np8+fSkW9jFpfDoFbu34XCafzeBzWUIC73y41+IweRw0RcJDJk8E
j8kH1ZdxJAq2TMIQSeli8HkhfDzIfD5JAD4zxB+eUjx9PfT87eiLmanXi2/f
rUx/QAa+0NvppbcbACHzxNRqr459i9D73vKl3kJUVCQzj3aJgeitUUJpmcX5
/cUFOCREfX5/dWlvdZGA+a9sTC96Z7aXYMj4uDU/PT31bEIo62cKZXT0TD0x
U6AQSKlorzCGgCQcYYyNUsZf9L90mlwOW9jhjO5tK6lk+FQjtoPSD9D7Pkx+
DHrTTnt4+t3q1trJ2PAzUDg5ZXCUMTUieCrlDMoloyZLCBTd5sh4PFkC5mmf
B/N506DrPg/0035fxusDSqN8SwDROwuSHwzhATiEFkUuGM4h1AfxcBgPAcBD
cGXWD3gPw6swCmDBCB4IZ0O9V4NY7xo4D1QPhNFLgQgWimHxRD6dLCZTuVAs
5Q4mPMGEKxDzR5I6g2VpcSORLmayBTxXKuSrQPhMNk9wvphJo13Qw9Hgxszi
EA+tVwK2PxlExv5kaPDJ0ACY/MzLpzbNrkN/6NAdgLSDwCPCa/ftqh3k7XyR
kIaWLCGkI7b/IrycwZVR2X08qS8YBoCDsTdbvTwMqHu3cdptdQHv0F5F4rm1
zSOHL+WEm44QsD0LePdGC75YEaQ9mCoH4qVAvOBPloMZEPVmL68OnWCq5Aim
g8lSsnDqiRa11lAoUUvg7SjejCLgE4THm6FMT+/rERyo3kCB12LZajhTjhQa
nhguE6JH5o2Qx0bJ48OkUTltyOyMYs0LtdbBBraTFeADfLIIJHb63XIshTtt
0ZNN63Ph9Avux6f8V4OcsUHO6DAP2D4k4ShknIFB2dj0wkoyj1ksxlHZgILN
H5fKCbwTQXQWXk/5bMqIVx90aCBCTm3AoQ04tUGXzmM92F58NSKAXzS2mMqR
M/j9TAnEAFsK0c+WymgiOUs2Jhsb5A320fukqNpcJKKIxHRxPxtI3idhysVM
GZ8uRDlzGp9DQyuquFQehwpyzuczkLBBcKhs+MxTSFRiOxQKicLiCfvGn774
uLGrAjnA68Wrm8u/f97+6+/bf/99/fOv7rdv7cfH1tevpw/3ra9fml8fmvf3
nceHUzQ5+x3YXn/8q/Hte+vhofP4CC9Vbj9Vbm+KN9f5q8vi9WX16qJ0fVW4
uqrcXFeuryrX181Pn1o31927u2ihZAsGbh8+P/77+89/f//7399//Ovx+8/H
v/5+ePz58PX7w/3jF4fDMtDXJ+Vxe2kZCYMuZdKFVPLUqCJoO87FrIWkLZ+0
lFO2chIE3lKIm/NxcyZkSAd0SZ824VZFnUchB/L28w4gF+hdvQIsNxsXrfZF
p30GnU4LYIuwD3HaQvQGvINRE1J9BtGug2xfdupXp030iFoALzC5A0wGPsMX
acLbL0/hYw1vrJ7BwIHMnPBz+LKnrZuzzqfz0+uz07PTzhl6IC300RNrr7qd
qzNAffsC2H7WvjxrIas/71xdnt1cnF92u/DS1XnzCj1+pXsOF1ycnnXbHfj2
ztp3d9df7m8/399d396Ua1V/ILC0vCCT9Al5Ug5LyKDxGHQek84FtkMA2FlM
HpNBDOV0NpuBsm18Bl+IIA8mD58NvoghlDDFEhbcNor4VBGHLOCQIPh8slBK
lwxyFGOCgWfysbfDz+afv1l6827l/QeUe5mf3UYl6PO9WdSNueleOc3W3Eyv
cobYsBeBfWdhgVh/CgK/eLC0CHjfX1rcXUTevrOMSH6wukTk25d6YIfDg1Xw
9rnNxenNhenZ588nRApgu4IlFsKHmcqD75ZH5vPQg8Ulg5ShSfrTMdq4dkvr
98bd7tjBropCYsCdtYAsHGIN9zP+H9be+rGtXtv7NDMzYxiapGFmZk7DZAo4
XEzbNEyOme1AuSk/fM555/3bZmm7fc65974z88u4q4osa2/byd4ffbUkLUnv
phbPzdjHRmZLC+uTddlMIoeHFyqIWjUtScbUMoi8qsqGqdnlsXH7+Lh9cnJl
EiT61AooczTLBYUFWJ6fsc/NLM/O2mfnVubnV+bmV0yI26tmM+I5oHvetDln
2jKbt0wI4z/YDtrbat1IZCBFhWZI16xWVAGOxdJ1s2XDYt20WNct1jWLbW1x
adMO9F55sLi0vri8ZltcBTE8Y7JNm2ydXX0VZXV2EOobWxubDzc2QLej8VNI
wdaA8KubZstcdUGpgiXUisXJwHYlKHYZpElKpV4uy03Wj3TVA9UnB9qmBtvR
AtXepomeppG2urr8XC1PxEUBZCiAd/7PKe4JtotJDDGNPzs7v79/+BS6lE9f
PH364tkO2lIC8P5sF+3x+Wz32Lq4UVbVCGyfMq2Nzi5PgHQ3IbZjeH8wvYiW
lM4n1h+hyY3b86tPLaugyXeaOgd0yRntA+PLD/faeqaV6qzGttHFjRcg461r
z9E0dRRDYNu8+jhhppUt6/oD28Yj69oDy+rDhc1nZvujtUf7JcV1RBxVBg03
XqcmaPg4Qcnd5o0nx91DI9BZE+CkIpxUilfJidosQU6ButhAz1QSDCqyTk5R
88kCHoXHpwmEbImELxfxJCK+RMAV0imstOSMns5ug0IrpND1IuSTMUqleokY
TC0UFKQap4faTFM9lqle20y/dX7QOje4OD9km+ydHmypuZuh40gUZImCIlVR
5WqKQoWZjCiVEsVSkkSEF/JxfCFBJKVIRWQhcpVT+CwiE652DolDxdPRREQU
r4ye2BiCRqTRSCg0JcCciCMlop7gcBQai6/QJGfnl3f2jZhWN7b2D/d93pPL
uOPq+iwWPwwGjvz+A6933+Pb8wT2vb4jn3/P593zePY87n2fZ8/n3/X5D1G5
D8i/Cxbw7/n9qBVwu7cd52CPzpE9Pj3ZPjt5en4G6c7F2b7zYt/hPDw/Pzg/
OvGe33/2dHRu7sR95o8C24PhWCgcDYQiPn/Y5w96PAGP0++aN03r1Roxhy1m
0EG3C2kUMB6JZFAK5u41b4BoXx7dArCD2Uc3FoY3bAOr1v412wCa5T7VtTjd
aZ1otY63zI00Hh88BwP8Hu09Pdl7hnC99zeZnx/v7gCrjxFpnwLPD0En7z3H
qIv0yN4eyGlQ1wjmx/s7AGd0CHY4NA3owH049jkyhOidA6gJr6KNDpHb/AQk
9z4S7Qf7L06O9o8OXpwc7gGxj1Ec/t1EGM/Dw92Dgxfw9OTo4OTo+Pjg8ARV
2Dk+2gMD5p+eHIBBhbOTg/OTQ0ihCTg9RRtdeTynq3ZrbmpuTWFNXUltTlqe
UqYTCRQsBo+GLY8ik+gkEoVEppIpVAqZSiFRaWQaQB5SLMNgUhisRLwIOp9L
43OoAh5NyKWiEDc86PcReSCAOTgOB8fmE7h8Ik9MFcpYEp1QlarU5eiTi9Iz
y3KyqwpyqwrvYiOnBYkZjA0lJchKS+qKEmEEihpLilvKShuL0YgqlGMzZIr/
luvNFWVgQHhIW0DSlxXVoXkyefkpKUa+VE7j80hMOp5GwVNBsdPwDFBfIoJU
RdAmUVOMxJRifenslNViWW1t7SbgyFQcHc2BpCmlZEluapFp1j4+PF1wp4JL
FHBwPBlOqSLqlQwDE89P0mTMzS5OTS/NzK1OTS5OTUEeOdLnZldMcwjp0C7M
Ti/NoXWjS/Pz9rk5gPySCaluhGUEdqC0BagOXL1vtawDyS3WDYsZMhuAcZt1
w4YKEeGxEsggwoOZLOtm24YFDOosbC4vPwCqLy9vYYYGRheWgPbL89bFGbNt
et7W1t5dVla7uLJpX1tf23wAMEdIX0cpGlFd31pbXV+0WuqKK+UMnkYkSFIp
klRKALtRoQS2w9PEWOr0UPvUQNtEfyvgfbS3cby34V5nfS2wnS8EtrPxJMA7
D8BOov3tkwG2g86cnp7Z29sDtj9+9gJ0+3OM6s/39p/u7j/bg4v+eMm+UV7T
ODRpG5ywjc2vTc6vT1kQ1WexiAFTtvvTiw9m7Y9nMbcMUH1+ddu2+nxxY7es
tpnNF9W294HCT80s43ClOXerrPZnto0d68YzEPbWdcR2EzIA+0PzypZ5dcu8
ch8gv7CxPTgwf0dRVJFUX5ZSA7KEheOoCBoNUS/GSeQs46L92cj0NB3H0hCM
KcSsLGp+Dq0wmZQBdWREpQhNaEfqF2jJoDCZNBaJkAAmjkQkUSlULpsvFcry
su6maJKEFNrPae0S5HiXSAxiSWFK8vRgl3lycHq4Z6irub2prq60vDLj7l1V
SjJPpaZIpHiRAq5VklxBkMnxUhleAqkUL5ESxGK8iI/ncQkcNoHNJDBpeDoN
R0tEnqTgyVQChU6k00kMKtrOj4r5WECZE7FYhHDHijWG1LySmqa+eyO2xaXn
zwHCp9GII3Z5Eb08DQWPAoE9L2Dcf+j7af4AFB4Hgoe+wIk/cOz3J+wkiMoP
IR/ACgP+I7/vMOBHJXCI13/g8e67PLtO957LfXDhPHK5j3zQTHj2Xe5zr8/p
8527XSBbHZ4zaFKm52cPHPuBiD8SjcSi8D8UiPr9kaAv5HUH3J6ga23ZkqLR
iZhMMZOBdDuVIqKBgKcoRIzJ4Yb7y6ObSyMPVkYfroxCCvk126Dd0rdi7lud
7wO8L8x0WSZbLePNwHa0pez+M+T32Nve33uyt/sMeAsi/GRv9+jFzun+/tnB
AZLie6jO8cEuEs8HL/b3np4evDg73EN2tI8OOdw7OUCsTqhuaAKOD4D2cIYX
UI7QfQj03jsEeX8I4nv38GQP7ZmCIfrkeP/09PD0CE4FoD4CVp8c76EU7OgQ
kH50cHB+fHBxcnR+egiVT46h2uEPOwaeQ/mR4/T47OTw+HQf6pw7jk/ODk/P
jiyzM9ma9Laqxp7G9pbK+urCyoaKhtrymqpSIG6BXCrjsNkMGoNCohDxcG0Q
iAQyEY/2eAXOU8k0KplKQw46BHzQ9kwqh03lcWg8LpUPGgb0vBB6jpBSBXwK
dC25PAKfhWMB7Xk4Lh/HFeA4EqpQTBcqWBKDQJkm19/Rpxal3Sm/k1+TX1Rf
WNpQUpoYGwVut5SXIdFejA2noikxhfUg/jH3e8PPYVYQ7c3I5V6cGMktSElL
Esh5JAYBh+2GjvZ6RvE1SXgK9CzkeKWOYEwjZ2XQcnJV5a11Qw1VHdDjToyl
qmkaMUFckF1snl26NzSZm1ZIxzFFeImKqNNQjEqqXs7U3dHkF6VV1Ja2TU4s
zs0CzO2gsRG65+xg81AyjaWzy0B10zzYCjITEvAAcDOm3s3WLav1Puh2qwUy
wPZ1a4LklvUF6waYzQqifdUCot2yZrUlUI8JeKi5sA5yd2Fxawn5Ye4vLUFm
CztqfcG2YrUuzZkR22cti20dvaWltfaV+2sbyBWztr65vgEaHiCPRDsqWV23
mc21RRUyBlcjFqVoVD/YLgew/5vtU4NIt0/0tSQIP9HXNNpVX1eYq+ELuEQq
mwBshw4yJcF2NB+SwhCTmUqGaGp8avfF7vPnu9vPge0vnu+8ePZid2d//xmw
fRfky+Hq5oOa+ubO/tH0OyWjU0sz5s3qlt7ROfvMwoNp29bc8gMTihjwaGrp
EYh2M5oV88QCsnxtu6CshsERFNe0js4sylUGHl+Slpk7a9tYfLBn2XhuWntq
WtsGm1vdnl95Yl55ZLI/BIMTztgfWJcfZiruinFSLV5vIKdoUTQ5lYZgMBJS
pXgpG8frbhsfGpwyktIy8DlZpLsZ5DwjMY1PENIIDAqBRsZTEvsdE4lkAgFh
U6JRJmVnJmdlJvbrhPuFyxTA8wxdqpzO0QlESVJ5kkSRIlGnCLUpAl2a0Jij
ysqUpBsYOhVRpSSoRDiRAKQ4TiDGicQ4MWAceC7BiwV4Hh+7a9h4FgNPTxgd
R6eBYsFTwECTU4gUMhHyZDKO+B+7VlBwRBabq1QZ7uSXNbT0D00uLT082D8K
+M+isfNYzBGLHIUChwEfAHzfDRY4QAocYfwoEDz+24Khk3DoLBQ6C4QcgaAz
FHKFwxehsCMYOgsGwU6hQih0AplQ4DwUgJJzqBkMXoQiZ77IuTfs8IWcvpA7
ELoI+C8CPlfA7w0AtKHQs/384cHJ8/MLx8Ts1M7RcxDtYJFYOBQL+WMhTzTk
DfncAZc37H60Zb9jSBIxGEI6QjrgXUgDwpNFbOpgTzWIdky637u/PHIfSzcW
h1esg3ZT38p839Jcr2222zrZZkJRZRoRgQ92IAU5DZwHLX0KAD8AUO+fHCAN
jDL7CYYDh/fPj49AVx8f7wNIgbenh7tQDhnH8QFkThD8d09AgR+8gJLzo30g
PxAY6Hx8jFB8dIjofXZ66Dg7cpwfXpxhWD7D9kk5PTw7Pjw/PYZMQo1j0D47
P3Wcn4GdOBwn5+cnZ8BwzLDznJyeQP1jB7x6dupwnJ6doYlSp2cnZ+dHF84z
8/T0HU1Ge3VTW00T2mgjv7yjtrWrvm24f2ikd7Ayr6Qir7D8bmFRblF2Wq5O
pRcKBEwmE65kFCwfRyTiiGQ8iUwgJ4JZorD0oFZINDAamc4gM9gUFo/CFdNE
UoZEBClTCnnIiGliEUUoQrHoRTyigEcQQNeSh4OrVyDAC4XQ36TKVGx1ktiY
oUzO0afdTc4oycypyi2oystvLMUmtFeWNFQUN1WWNVeWtVSVN1eUYrNlSuHV
hlI0CbOqIP9uckqKVMGjMH+ETcb92KYFUiJax0Rl4dgSvFRPSEomZBrImQZ6
hpQohwYI7i8tEe1uX5xdumBZm5oyGRWpApxESzFiuzgZ5GQU2p1DFrFofBFT
XlfRNjeHkXxu1YQ86nZQ+/NzywB8EOoAdot5xWpesZhWzSZUbjatmM2rVhPg
GtR4Yi3qJopkAkSybQLDbdbNRdv9BSuAet1qXcUUO6h9wDXgfW3Btgrottmg
fNWysG6xrS8sbCRscWFzwbyxYAYRvmK1LJmsS7OI7QttXf0lpdUo4ABIdAR2
tM/R6vrm6trm6sb9pbWNFfuazWyrK65QcPhaiThZpTIoQLqrkpSqZDWkyhzM
JzM12DrV3wZgnx5sn4ZMX8u9ztqmkjy9UMQlIbZzMLwLkNcdTZLBprszFTT+
1Nj4weE+QvrOzu6LF8D5nT3Q7aDe97d3Xuzs7W48eFxaWlVSXssTynPuVjS2
9BiSs4tKGjsHZi3rT00rj+dXHs3aHnT1zU3aHprXtyeXNudXH80tbGXlFnN4
wqTU9LslpUKJjCcQK9X6joF7tk00bcYMdVafzK0+Q24c+2MUXgZah+XHs4v3
ZwHv5o1MfT6XwOOReBK8TEswpJAyAODZ5IJUcqaGoM9g5eZyizOJucmEdDVe
C9cnFUcj4yh4wDaeBDqH8CNyK9wROJVeu+t2uOORqQWbSCQj4ImgIpgEjkGS
lCIxahgyDV2uY6g0dLWKrAGRoMRrFTg1mBKnUuCkMpxQiheICdCp5AoIPDae
ycGz0Y4DeDoVR6WiLic0GMBtEgneGtEbmhMiCc1g+c8g4XhocRh0lkRpSM8t
rqyrr2npHFve2tw73feEziOXruilKxJ1hkOnPt+B07Xvdh54Pfse94HHfezx
nXhDJ77QKWI1xudQ4CQQPA0EAennIURyZxhgHnCGghdYCug+DwLAQ4BxZyjq
jMbPQ5GLSMQZCbijIXck7IlEPJGYKxT3hGO+SMwXivmCUW844otEgtFoIBzx
gwUDq+apZfM9x8XxhGnu0e7jYNQfiAcjl5FIPByIh92xoC/i94V8/rD3+fP7
+RlpYhYTYzsZYzsivIBF7W6veLAytrl0774ddPv449VxgDygfg0tUO1fMfUv
zvcuzHabJ1vMmE/m9HjvBNPeJyCbj/cdJ8Dq3bNjEMz7Jwm6Hh+dHx06wFDm
yHV67jw9uzg7BQOpfIpB/uL0yHly5DhBMD8/OkCHHB86UMmhA8P4GZzq9OgE
k9lux4nz/Pji/MSJMieu81OP49ztOHeco82wHBenp+dHp+fHgHHH+anz3OE8
v7iAF89P4Qea4Ap4Ry+dnJ/BSU6h2jlUPoMU2A4N47nTgVoC4LzL6ZgaHc1W
pXfWtLfXtjSV1VXeLe+sa+uqax/o7O9qbCvLLqm/W9leXt/T0NnfOjDQPdzf
N9Td3dvQ2FpSXG6AbiZPRGew0C6HeNJ/Cz+f2OUbjEwk00DYkxkMMgu56ykc
PpUnoApEdJGELZWypTKWDJgPJqNLxVSJkCzmE0V8kphLEPEJYj5OKCKgKbhi
olhCEkspEhVLoRWqU+SGTFVyviGzNDWn9k5RQ35Jc0l5S1lFc3llc3lFc0VF
fUlJXkpKulanksgwnKN/JNTpgLvy3/cCCcX7pUHfVkaQqgkaAznJQEsxUlKS
qWkynKoyq9I6a68qalAQNVqiUUnWyggKGVmlYOn4dDGXJRQKZByWsKSwyjSP
gjGiOI1zAPCVhAcGE+og5qFw2TwPhLcjM60g1wqkJjQ2arEAzDdt1i2bZQMM
2A7CG9KlhQeLNsR21C4AwzHpbgbBb0FPge2LCbzbVs2WVSi0WdYW0dYbawvQ
FlhWFqx2q2Vh3myZs9jmF2zt3QPFJZWL9jUA+yYCO5Luq9gedisbm8jW4E3t
NYVlMgZHIxIBzI1KBHajQpmsVhoU8txkw0hn/eRA62Q/5nJHYG+d7Gke6apr
qcjXC4UcAoVFIP9kOy0RfEBCYcppHCmVMz4wfHh09PTZzjbAHQT8zu72HuoJ
b+/vP95BY/+bDx7n5pYak+4IJAoB2oJHLZaqNOrkzKyS7qHZaeiJbDydBZLf
Ke0cmBictJU39EyZ1mz2xyBGuTyRQCRDJpTxwXiSnILyWft929qThdWH0C6g
1Uz2xyho2OKD+YRoX9yaXtqaW31U3dxHxrMI6DJgwMUGvTkDLiWXUniXWpxO
vJNGyEghpKrxKg6KNkAiIZaSaQS6XKjgUrnI0YFHe9nDZQ6XvEAiKS6pyErJ
ZjM4AHzsJTINz2TjuGLkTpHLcAoZXinFKSVgeLkYJxPj0D47MoJESOBx8AwW
0ht0FhLkVGA4GQ/dZEJCjfzYpQe7v37eZfAecI+RaQyOVK5JTc8tr23qHx1e
2bC/OHxx5nEGr+O+gGd5bWXH5Tz1hQ4vfPtO/77Ts+90Hbk9Zx7vsdtz6PEi
f4vXu+90Qh40+Zk/mNDhDkx+XwDGgeegrhHYI65QBIE9FHQGQ54gmoDuDkZc
YKGoOxJzR6KecNQfi/qjQX8sHIxFgrFoIAZUj/oj0WD0ElnkKhiDDKRXgPdg
JOwPB+yWifmRlrPTnSmbaWP7fjAKLUAgHAuDBeNBXxxaiqA74PYFXPv7TwsL
coQspoTJAKqL6VRIRVQKn0ZuaSh+uDb2cGX00crYA8y2kIvm3pptYN06uG4Z
XDH3L833mifbzBOtpnvNpyf7oKIR2E8PLs4OXaeHztMjzPtxdHoKKvrIdXbi
Oj1D68BOT5wnZ+6zCzDn2TnYxdnJxfmxE2H2BGomDnQcH1+cnlyAnD45Alnu
RPvSHl+gPQqPTy8QvZ1OtB0t2qPKeea4OHNfXHicF27nhdPpuHA6HFgKeYfj
DGDucTs9LpcLXrxwuC4uwDwep9vjQDtnIZifQubiArAPqdPp8rjdHrfLhXIu
r8/jGRseydFkAts76toaSmvL88vba1vbq1vGekf6WjrLsktrcspaS6o7att6
Wnv7u4buDYxNT8zNjM9PDo81VjeV5pUVF5aVVlYXFpblZOWlJaWLhGIGk0mm
UH/uZfjjOkSblWM7jUAfFnUbiVQ6kUYl0RgUJpvKRluxsAQilkjMlgjZYiFT
LGbKpCylhKGQMhQyplJKV4jJUgEReqYiLl7IwvE5OKEAdVolCpxCQ1DrKVoD
XZfCNmYI0+7IM/NU2QW6OxnyZJ1Io1doQT5hg0aEhB8ycb/gfn6yxJ0DtxIb
xwIZryRojOTkFGq6AZ+cyclO4qQrcToDKVVF1SlYKjlTBR9MwJCgDQXYAhqV
LRCqu3vGgOHzs5h3fXoJRVCfs4MyB6qDdEdrThNUN9ttQGkTRmkT5pxBg6QJ
XzqyBesadBNsZkjXoRqo+gXrptW8BtxGwXtB+Zt/sN1mTUh3u8WybLHYLdaV
Bdv6Ikh3G1RbspiXrdZlk2Vh1myZtdrmbQudvUP5RaWL9pWtzfvrCOxbAPOV
9Y21DVDvG6uI7ZuLCyt1pZVKlkArFqdo1CkaLWI7crarjHJFbrJ+uKN2EhtL
nexvBdE+A3jvbRnraWytLEgRyzh4KgtPBrCjoIUkqohME1FoYjJDSmaJycyh
9p79/cMnz/aQPd9/urP/+MXew739x/t7j3Z3t3d37j/ezsstkUhUAomcJ5Jy
hRKuQCIUyYVihVqVnJ5+t7y6qbG1V5+UXlBYlp1TLJEaBvtnluzbGTlFYqFE
IVdqlBqNWquGlp8nNRgy7s0vWlcf2+wP5pceziwhfw6aQgn6f/XR/OrDudUH
s6sPTBuPLZtPGlp75HIN6mziGDycIIWckUXOTcal64nJUoIMlDOmjUEkk6jY
FFlgO0gRNpFNwVMQ2AlkEpFCIlGwccnE8CQCPgh7aAioeBoLx+LieTw8Hw0/
4blcPBdSKGTgGLQEwxOGJ1GgF4zUPhHtl4z791Wa2OgBusVUGo3L4UqFYrlU
oZardWpde1fHk/2dY8eJO+gNX4WjV6FwLBiM+ANhL1oB5Dqfs1k2d1+cePyH
Tv+hG5S5/wT0ucd3BvrcEzz0Iv/5kccHLx36fKcB4HkIUhDkzlDIASI8HHaB
Dg+HE+aPRn3hsDsEgjzmjUR80ZgvDCUxTzTuBVDHkPniEf9VzH8VD8ZjgRik
l4D3QBQJ8TBo8fhlKB5HkI+/hJfC8ajX73n8cMk20/vs8Rr0cdcebcApg7FA
KA6tA8b2mN8d9nsDHn/AfXS0U1ZeKGKzRXQqMhoYWUKj8EnE+rKczYWhB/Z7
D5bvPVwZe7Q6BgIe2L6BwkIOrZrRVh2g223TXeaxNvNYK4DX5QLGnjidJ66L
Y9f5sQt07xnIZuDwictx6nOcec/PvI5zz8W52+VwuwCwSBuD0nYDbxGHzx0X
CMguBGSknC8cZ1AHGWScZ04E3nN4cuFxeLwOaBvO3KcOzwWQ2IX987jcbmA4
+uFyupxejxtD+oXP7fK64SnUAV5fwFsD2NFL7guo5kKV4dNAqwAHoqce7OH2
+rxev9cT9Hn9Y0NDefqs7rrOzvr2upKasvzynsau9urW8Z57vU0dJZlFNXfL
O8rru2rage2D3UMj/aNj96YnxmaHegary+rKc8rri+t62vv6OwdGeocmBoda
a6ury0pK8/PyMtJSDVqVQiYSCLgsFo1M+Q+1/MMxgnzgmML/ub0UlUqh06gM
Bo3NpvH4DLGQLpEy5Qq2WsnRyBhKOUstYyLai+kyCV0mpsqkVIWcolRQlCqy
GkXlJailOJUcp1LiNGCQF+ClLDyHgqMScQQQXcB2Iu7fOy/+545XcPOCcsM8
6lodwWDEp6SSMlJImUmkjCRauo6RhJCONkNBxqJxKBQaHEWncesauibnFicn
LTNTKADvzOTizNTSzMzy3BxyyMzO2jHUL1rml0zzS1hw9ZUfjnfzWmIOjBnN
h9kwAclN6wvzILkB75jHxrxqs6wnDLUIiPYI7GbTsslst1rtIN2B7SbLismK
Md8CzMd2uzYtzplsMybbrHVhxmKZsSy0dfcVFZUsLoNC31paXbWvbyDbgHR9
eW3Dvra+Yod2wV5TUq5gCfViabJKlaxSp2q0kCarIaPJSzEMddRMDLSM9TdO
DbaAaAewT/W2jvU2ttcUp4rlQiKTS0Sr4/lEChLtgHcKHaS7mMSUkNm9za17
+wdPX4AhsG9j82SevkBrl548fwGZp89e3M0rZrN4PAES4XyhhC+Q8vgSoVAm
FsiFfJlYJJdKlCKBQiLWyGUaLldcVlI/Nm7NyMzNSk3Jz87ISUvJyUi5m5mu
V2iUUvWo2bqyvb/88IX94d7Sgxf2R7uLm8+Wt56jeY9L902LmxMzC4ND001N
XeVVdXkFJWKeDK1cIGr0BKMEJwWhzsAzgdJwhRIx9wuZQGESWUwCE4yHwu4x
SJhuxzbDpJLICO+I85hhh5ChIcBG8GkJpwoRuTEJFERyIgXLE/6txv8PDzKF
zGQxeXyeVCTWyhQ6uVItk6qkUoVQJIO+CovDY3DujQ6F4n6PD1Td2ZkHcefC
53J5XaDY3UHAgWNuyXZ/5+m5L3js8Z94g+f+0EUA0sBFIOIIhE8DoWN/8NQf
PnEHTuHVUAj5WAJBFxLnINeRVvckXCvRsCca8kVDgUgYWO2Nxb3xmD9+5Y9e
+iNxf+zKHweJHga5jth+GfXGQcDHQrHL0CVgPBaKX8bi1xHAe+wqHL8Kx+Lh
y5vg1VX4Mua6ODNP9HbX3bWMdc/Mj6/cXw1HQwD28GU4FA8B5AMxvxetYPJ7
Q95zx2FLU62YxxWzGGIGTUQlC6lECY0sopKq8zNQMJmViQf2UUR4NJw6voUC
ywytA9utg3ZMty/OdC9Od1vH29zuM68XAH3qvDh1uVCshnNgMcZMYKfH5fA5
HT4X6GeHy3WOmQPDrBMkNCAXsRThFPiL6Aq4hsMwYl8Ab92eCzi5E9oCJ1Dd
6/OBeTxQgraddXu9Xjgc/gf9gYDf5/N7An6PH4jsRa9AScDnC/r8AXQYFlTH
50HmdXm9qEGAN8UMvT+c1udz+X1uf9DrC3h9qHYwEAgN9/fm6bK76jo661rr
SqrLCyq66jtAxo/1jHbUtBZnFlbnV7SXNXRWt3W39PR3DQz1j46OTI6PTg/3
j1SX1lbkVjSU1Pa19fW39Q109g1297ZUVjSVFTdha46aSktQFHe0p8bd8ry8
rPS0lCSjVq1WyORCnpDFYFNBARGJ/+nM+Q+3DhG0EAh7GhrrZzKITA4VDdHy
aPwEXQV0kYghkbIUCqZKyVEr2RoZXaVi6HRMo56epKUblSStjKgWoXC+PBqO
TsFRQBphYP8vdxLyveOJdAKDR+ALCWI5Qakm6tQErYyglBIVcrJKSlaKqDIm
Fc0dolNZDDqbBn0OIhFEVHbO3XuT5vmFtWmTzWxZspqXbRbQzxu2xS2LbdMM
UnwBqXGLBXOVWDAyWzCeW5CZsPmNNusmYjtwfn7FPLdihXQec+CYVpAfxoQg
b5lfNc3a4VUwkO4m1Ewsms3LoM/N5iWTedlkWjablhDV5xfmTQtz89bZeQvC
+5xlZt4yabK09vQW5ReZoWFYX1tcsS+vrS+trgHkE5nl1TX78rrNvFxVWCZn
CnVCWZpOk4KQrk5Ra1K12hS1CnT7YEf11Ejz+ED9RH/DZE/TZHfzeHfTeG9T
e01RukQmgb8RkcIhkEC3C8mg2GliCtqhQ0JmigmMjsaG53u720/3Hm3vPHr6
4snzve0dsB1E9ecvdoDz28+Li4u5HAFfIObzwUSQ4fHFAoFUKJCJhUrMFGKh
SiRSicRqgVCuVBpq69qys3Izk1OL7tzJz87Oy0jPTU8xKLRasaapubWtd6ih
ZaCmtqestLm4oPFuenWWtjBNkZskytLy0hV0vZyigSuEjeNScHQ2gYeCfxKl
oKgJuB+XJRCbQqYRCSR0QeLJdDydg2fzSQIZVSokChgEtAafTKBSiDTkfSRg
HnigfcJRA2wnUBOoT3jIiUj8//fLD94LGgUqlcbhciVSqVavz8pOKym+W1dT
0VBXmZ2aBBwT0BhCKlVKpYupDD6ZwiOhqL98CpVNpHR0tDh9QBDkC74AUnnd
F3630+92B7zOYMAf9CytLG89fXLuC5z4/Gf+0LkfgR1kuQMYHgqf+/zPTk5P
XcEXO8dHZ+5Dp+/YGfAEo16k1UOuSMgdDbsR2CPAat9lxBcJ+SMRgHbgKu6/
uvZf3vjj177opTca98fjyBsTCQXjkWAs4o/GgPmheCR8GQldRoLRWCh6GY1d
RqKI7bF4LBqPhi6B+THn2bF1vMc80jHdW9/fWrW0bA6GE/4c6INAyxAGdR+6
DAWuIu5Y4NR93NHRLBEIJGymhEUH0S6gEUU0kphCKs00PrCN3l8ef7A8+gR0
O5Lu44+W0QLVzYWRVcsg2kd1vm95vtcy1WYdb/F5nWAeDwhyJxLPgE1AJ6AR
076IxEDOAHDZ7YNiD0p9PmSAc8CyH2jtw5gNDz9iqh89RceG/ABkOBPgGsDr
Dfj9GNz9UCfg9waDgVAQkkAwEAzBIxJG3zcQCgVDUBJGzyMRSEMRVAUwHQqF
wyF0iB97HvRjB6NTwF8Y2gYoCUGFaDgcCYYjfqgKmYG+rixNRk9jZ1d9W10p
xva6DlDpY933OmraSrIKa/IrOsqbeuo6epp7BnsGx0YmpsbnJkZnRvpHaktr
y++UNpbWDXUMIOsaHB0Yaqupbiwrqsd206gtuFuT/2O1aT2KIVBUA+UlxTUl
RVVFRaUF+YV5OTlZGekpKckGg1qpFgulXA6fwWCRKTS4lXD/dYTopxsfYRW6
p2hyJpFMJdOxdbVsDo2H4E8RyOgKJUOtYmrkNJWMqhSRZDySAG5J6D6jrm5i
qsyPRRrI/U7GkRl4BHYeXsDF8aBLDn1nJp4F3XM0K5hIo6PZ/tDvYLHoPC5L
wKCxSGgXcxKbwTHqUtMNuXnJZYVppeWZZVW5VbUFdbUlTQ3V3Y01vW0Ng71t
9wa7xoa7xib6pqYGpmdH52fGLNMT1rnZJZPJjg2Mri+hvZAe2ZcfLi/dX0IT
1DeXl9fXV7ZWlzbgplxZwaY1Lm0tLW4sL24sLWwuL20sL62BLS6uLizaFyGD
9j9dW1hYAbNY7RbbitlmN1uXTJZlyMxZFiYsFuhalYJuty9v3N9cWVu1b6yv
bm2ubG6Begcpv7aBIrrbF1dqSytVHIlBrMgw6gDv6YjwCPLA9rupSUPdNdNj
LePDjZOD9TODTbNDbdPIRdPS1VCarVJJyAwWgcQB3U6iCkGuU5BhAp4hJtL7
OtscznMUWPz07Bi6wQ7X8fnZwfnx7tnx7unJ3un53sFJeUWFkC8VCeQCnlTA
lQp5MhFXJuZIRSyZkCWTcJTQdZJzVHK2Ws7SKJgaFU2dLE7T81N0LJ0G/uh0
tYKqlJKlUqJMhrzZUj5y3Il5OCEfTT6RIC83Ti3DqSU4BeRleLWCqBXhFSy8
kEcUSikyNoFDxlPwmDOEQqYw6AwqlU7APOd4jNgI7wQ6h8AR4PkSklhIEgrI
aHEHaAMSgYKqYeLhv+mHvx01VFD+VDqXxRTyOGIhXyEVq+XSvJzMjvb6gf6m
8XutM1M9ptl+69yAZbrfPNk/2t+Sk6znU6lMPIFHIgkpFCGFKqBShMioQrQl
E6WhvsbhOXe5wRwAqAuPyxVwe0KgCH3OoB/Yvra+vPFw68wXOPUFAOyOYBgb
/UTzW8AuvL4n20/293cXTeb7m1vQzu4egLS/9AQjnnAEA3vUHb70AahjYe9l
3BcJX3gugPb+y8vAZTx8dRm5vArFroNR0OGXIaTPo6EYGFLswehlKBYOA+rj
0WAcOA8aHsAej8TjsfhlJB4Lx6Og252Ok4f2+dNnW9ax3s76EpN5OhCBFiEa
vYnGXsaubi5vbq7iLy9fvn/tiwedAcfgcL9EJJZyGGImRcwgi+gkEZ0soZIL
UjVrpsFHK5MP7WPA9h+2Ov4Q8L5wb90ytGpCeF+Y7bLNdFgm2/wep9+PxLAP
iWgkjD3AbaSfAyFfOOwLB/3hIEATPgykCMj+KGpzEEQBrABbQC4YxupAOBzA
+BuKRcLQ5wgh5PoCYb8/5A9CexeB/k4wFA1FoImLhsHgHNFIJGHwDuFI4kcY
zf2MxMEi0Ti8dSgMhVAbslE0/IDqhVE2GolGYxFswCIE54tdX8av47FYPB6N
QXsaD3R3td0xZPU0drTXNNeX11QXVXc1dALVx3tBt7cVZxRUF1S0ljb01LWD
Mh/s7h8ZujcxNjM1MTfYO1hbUlOZW9pS2TjSNTTcNXSvd2Swt7+1urKpHMV+
+Xsb0zpse9Pan8EE0NZ4YIUFWFzf/GqoVlJYU1xYVVRYUVBQWVRYVnA3/05W
TmZGapJRp1SpZTKJQMhl82k0JhE6sv+HuwaPTW5EMomMJoNRaQQ6jUADqU8j
MGh4Oja5Fyl2NHsTy1CQF5RMw1Pp+ERnGQwyNBrWd6bgkBKjEqmJafxUCoNB
53BYQg5TwGMJ2QwuHc32ZDFI0CUnMXBsAU4uwilEOLkQJxOi0TE54EKIk0vx
SgVBDR0BOV6ho+gMFIOelmSgpySz01P5GWmirAxJVo48N0+VX6AvKk4qLkkp
KUkprsquqM2rbCioaSqqbS6ub6pobKpqaantaKvr6m7q7W0ZGGgbGuoYHuke
hsZ0uGcYOcoGUDh9sPHhqfGh6bHBqfGR2fF7s2Mj0+NjM8MjowOjI02tLXm5
eVNzc8vLyytLy2srq6t2+8qyfXV5xb64vLK4vLq0YjOZq4pLNRx5kkiToTGk
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
oSFXOo3KoDNZzLT0FBb84vFEgUzJE0vQWQh4FpcrlEo5AgFcDPjE0rf/OvaD
xvuJFB5PwGRxCcQfEyBJeCqLAc2/TCJUsLnyKdvCruNke/dgZGRcI9ZIWVyD
TGKQSg0yoLosGQVhk+TmGKcm2xamB23TfZbpnoXZQet0P6DeNN03OdJanZet
YHM4JBKYgEpNuNkB7GI6XcJgANtTk5KeH+y4A64L78WF78Llx3wyAZcvhOJr
BSOBnZ1nFvuiw+9zBcM+gGkk6g1BBkl3bzAUjEZfPHvQ11jR11DZVFmWl501
YzL7wlF3OOpFI6SXgdhlIH7lDoQcbj+S5QHf9qJ1ZWLM6/aG4zeR+DVytsTj
APMI8qUD1S9/KHasJBQJnp0e+NznZ0f7Ttd5IBo4OdrbffrwyQP7kwcrfq8z
EIR3CzqO9k39TaaOsvH28qHBTofPEbu5jN3EYtexKPJMoCk2obgf5PD3f/56
cXqWl5IpZbOlLJqERpYD22lkKY2s5NLG++qA6g/t49vrk0/Xp7dXp7ZXxh/Z
720sDmzYQLf3rZlBtHdYZ9pNE60AzzdvESIRq99/fPf+89t3n968+wT5N+8/
vv3wEWj55v0tevrh0+vbz2Bvbr+8//T1PaQfvny4/fLh45d3H7+8vf384ePX
T5+/Q8n7208fbj99/Pjl9vbrh9vP79CxH19/uH11++HVp9s3Hz+/vUWHvPv4
+d2Hjx8+3r77+Ontx09vwG4/vf3w4cPth/e3kH58//7j7e0t/P9we/v+wwfU
kgDCP8Enevvuw7t3n96/vX339vY9HP4O3vQj+lRvPn188xG+xZd37z9dvozX
VNVVZBYNtPV21bbVF1TVFFV3N3R11HdMDIw0ldaUZBbWFVZ1VDR313f0dQwM
949PjZtmZqxT06a+7sGaworqvNK22o6hjpGRzuHxwYn+rs6myqKEbk+wPaHb
USxfLAgAUuxFRVh8sIIf4hxIXoz8NrWJJgAFb//ptAHZn4jfjrEdZX7uo4ft
ylHcgEUMa6ooAWusBBlfhlR9eVF9ObQLeeV3srLUejVXJKZx5Gwhg0RN8Dzh
rEGLqhCBQa1T0e3N5BLRFGUyjU6nMaDnzaYxGBQqnYohgELGfO8UGpAB3b9E
CoPGYTP4NCoLj+KHENESKDQFmvw/R9D+5wMDUWLELTEFDk3OxKY3o34ECE5o
IBIznIFFZAIqJ+Lx0ORQCSQKnkgjkMGwDJRghUTMhYTWDhCxxSxYUAgCnIec
mM+PGcoziNC+UGgEKp1AgwwDMshBQWFiTirUPOETaEUDE4lJ15TEQkj0CckA
Wyoa0UjMwcZjRkx0hRKVsXkgaI4fBc3xI5DRU/jVELDvSIB3hD4UGB3JbKiP
KpB+esz+K5n/m/0//i5R24qQjVxpVCqFw2KwodFl0bloowK2SMiVSwUapcig
Fhs14hS9NNUgS0uSpxnlKXqZUSc16mRJerlRr2LQGEwWX6LRMTgAauJ/kvzH
bF14/EcbAlcCi82UyiTJqXqNXp2Wm9MxPFxQWQdCn8kQs2giBkWYc7fqwc6L
50d7L/YOJqemjUqDjMMBoZ6EAmyicGFJcplRJsu9kzQ+2rY0O7w4N2Cb7bPN
9kNqne4zT/VNj3bUFeWpeTwQ7RwSkUchA9ITDhkxjS5lMvlkilGre7r31BNw
X3idTp/L6Xd7/G4f2rfIHwh5I7HQzv7O3KL1wuPxB0M+fwip5wgKwuULRjyB
MLD97OjFQENlS0VRQ1X5nYz00akxVyjgDkX8kUvQ7YEopLGdvYMHD7YjoOQ9
LtNwX29tyZbVfHRw5PZBrUj4CjB+HUX+jXjs6gr5gdE09ng0Fg2G/fc3Fqxj
/fPD3Q82VqKXkaP9nXvdjSNdVbP3Olznh4EgSPeA6+zYOtxt7aic76rs76w9
dBzErq9j11fxm9j1q/gVpDexyLU/GPP9/q9fgW/lpRUyPlfGoktoJCTdGVQ5
iyJlUwY6Kp4iP8zk9vr49trk07Xp7ZWJB8sjm0uDG7b+TVv/ynzX4lyXbabL
Ot35/tO3tx8Rlj9++n77+ZePX3/59PnbJ8h8/v4R0i+/fvj6/d3Xr++/fnv/
7Rewd99+/fD919tffvn47fvHb798+vbrp++/ff7l98+//Pb51z8+//rXp2+/
f/n229fvv3399tuXr79+/frb56+/QeGnX3798Mu399+/vPv+7faXbx9++frx
l++3qASe/vLh+3ewj9+/ffr+9Rbe7tu3D3D+L98/ff3+6cu3T5D5/PXjl8+3
3z7efv0EGWTfPn36+vHj50/vP3+5hQ//8euHT58/fP784RNqNd5/vr16c1lZ
UlWdVTLQ0ttR21qbX9lQUtfT0AU2PTjSWFpdll1cV1DVXt7U3dAx0D00PDA+
OTY/PW2ZmjL1dA/VFFXUFVZ0NvQMd42NdI6M9o3393Q1VWJ0LSvChlAxZzum
3rEMqPRCtCtH4U+qYzL+B9sxqv/Y1APDO9ojLxG/Fwspg+IMJDbRwzIozC+W
b6mqAKoj3V5T0Yhi/xY3lhc1lhVW5N7JUmtVLKGMyc/OSId+9E8cEGhUeNCw
1eJErE9NpHF4+syspIxMCo3+39hB+PmAu5pGQ4dCOQhyFpOXmZlTXFhaeLeo
4G5R7p38O5k5Odl5Odm5qcmpapVKqVTIFdCrV4olEpFYIhCKuDw+dAbodCaN
zqDRoOGgA5EAzHiAHJ70PyBG+Ik7Au5/MO7/hXf/vzz+T+f//3jPxMJJ4g83
F56M4vYgA/LTkIP675U4BMzQK0QiWtFApzE5TI6AJ2CDeoZOFKQsOpvNEgi4
EpFQKhEhESwVquQinVqmV8m0KglmYqNOAohO0UMqSTfIMpNkWanSO2my7GTZ
nVTFnRRFXpoKLDdVAZaTIgPLMkrBMqGyAVJphlaSqhElaaUCsVgkV4rkcgab
DY0EFkWADM0/1t7+24sDlwGHQ9eqpRmp+juZSZnphuwMQ0qSurCk5MnB4YnH
8+xgf+3xM9vmw+ml1acnZ89OTlG01oODOdN8hjZJxmanqJTAdhDtBokkSSZL
VijuZBrHxzqWZods0/2L8wjv1hksJuR0/+xYV0tFvlrA55JJAHawxCgqCHiA
vIzFFFJoWoVqe+eJJ+hx+JyugNsBejrgCQS9YCDPI7HA/snejM184fKAZA8G
wqEQGjpMzMHwh0L+cOj8aHeqvXmgrryxoiQvM7O7r31798mZw+n1BYH8IZDu
gZB1fr5/oP/c4wwF/fNjAw1luSD1J3s7nz9+GIuHwvFIJHYJTUb86vrq5joW
i/jc8FncXteFw3n8cMs60990r6VqcqDT53GcHu7NDLaPd9YOdlYd7N/HIj36
PU6H9d7gTHPZTGtZa3Pls9Pdy1cvo9fXaET1FYj26NVNNHYT9Ee94UvokDhq
qqulPI6cxZAhZztJSqOoONCgEtobCwDsj1cnnqxNbG8A2ydBtz+233uwNHR/
cXDd0rtq6raburGpMl2fv//+8dtvn77/8eX7P8C+/vLX11/+/P7rX99/+ev7
7399/f3Pr7//9e2Pf3z7/a8vf/z55fe/Pv/2zy+//+sLpFDz13+gl/75z+//
/F+//Ot/ff/nv77965+//OOv3/7x52//+Mdvf/3rj7/+L7Df/vrf3//839/+
+Oe3P/76/Oefn/9E6Zc//vj+5+9f//r945+/f/7zDyj5hNLfvvz526ffwX7/
/Mcfn3/78+Mvv99Cw/Hbn59//fPjr79+/PUbtAifvkOD8svn71++/PLlI7QF
379B03P7Fch/i4APTcAnxPbo61h5SWV1dml/Y2dbdXNNfmVdUU1vQ3dPQ+fU
wHBDUWVpdlFDYXVbRVNnfXtf1+Dw4MTkmGl6xjo5Md/XMwxsryko627qH+6a
AOk+2jfR39PdXF1aXwpMRuEc64oSQ6gFSMNjHnUM3WhWTF1J0d9Pa4v+luuF
VQU/XTTFBVhASGwDjh+BHzGeY5BHcdorsdiPFWXNleXNlaXNVWBlP9gOVlZU
lZ+bpdHJmQIhlZ17905KVhqHxZMr1SnZaUKRkM3m8Ng8IVuQrEttbuzsHZka
n1uYnV/qGxrPLSrjCxR/oyzRH8f//CGVSxksNGNHIpDVVlR1t7T0d3YNtHf2
trV3NDT0dXUPQRvY1d1eX9teV9Pd3NTd1tzR2tDRWtfWWN1SX93e1NDZAoWt
/Z2d/V3dA9DTqauvqqiubWyqa2qqrKyuqKhuaGytqm4qKK4uLq2Dvk5qSrZc
oZYpVHyBWCAU6vRqiRjubCafK9BodDp9klZnVKkhY9DrDdCU6HRGrVYvhzZF
KhVKxCKZTCSV8EVCGostUajkWoNUrZOptVIVmE6q0kuUepnKKFNCRsflSxg0
JoPBotKg40KHHHRiwJjQlQE9KuTJZQK5RKCWi9VyiU4tN6jlRo1Cq5RJBXwO
lc6l0tlkCptE4ZCpXAoNjE+jC+kMAYVh0Ou6RoaHJmaGZk0T1qVp25LZvrKw
vrb+4MHGg0dPnjw92N8bHOhP1miSDcokvQJSsFSDKtWoSjcqs1PUuRnavHRN
dooyPUmWZpRlJMsyk6WA8SyjKNsozjAIMg38DL0w0yjONCDLTpIiM0qQJcFT
SaZRkqYXp+klwPYMALsRjpWnQ7uglxp0MkOyQZeUJFfK+eirkMk0MgqASiPD
l2dz2BIxT6UUpSRJ7t5RF+Ya8+/oczK1eVn6wtzkzFTtnZzcpa37T48Od45O
908de2eO3Yvz52dHz08Od44Pnx8dmqyWLH0qYjs2NwbwrpdKkhVysOwU7dhw
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
+h17tm+dnABXvgMEbN+9fdvUxMT09h3TO4DzJruxvLy4oqhYymZJqmn04iJe
TY2Ux1EJuSoBV8Vlq3ksBbtKwa0W1dAMUh5QV8ei1atF3R5jX5Op221stWvb
nbpWm7rVom4xq9vtmuZasVHClrIqGvWKpU32lZ0u0LJ2+7Il9qVd9f1d9T2t
xp5mQ3djbX+Luckotcv5FjHHKmE7pawGJU/BrKwVsapLi4vzc8sKc/iVpapq
moJeWcunixhlS7rbD7xzYPqtKZTi/vY+wPv+t6aB7dMHdk/t371rahIcTFJ0
VFJIUGKQr1fJoQFxgYtLC6idrYZlXbbl3balnZZlXdYVwPkl5p4WbXcrismA
b1+CrLuq0SG7cuPe3K17l2/dvXz7/sWbjy7denzp9pPLd55cvv308p2nl+89
vXQf2sdz9x5dvffoOrR3H83de3zjwZOrcPMOurx6/+HcvXtz9x7AA3P3Hl65
d//y3ftweeXOvSt37l67c/vq7bsXr9+5cP3mhRtI56/fuHDtxoWr1y/MXb9w
5dqFK3Pn5q6cu3r57JVLpy9dPoPp7OW5sxeB/+fPnJ89e+HsmXOzJ8/DXGAW
dOIcaAZNAc7OHj1zGvh/5MzJT8+c+OTMic9OnThy8uiR40c+OXr002Ond+yb
zs8t5ZeztEKFhCFkF9WIaAIFT26Q68zqWnphBT0f7DRDVMNV8WUGud5aa3fY
3S6nx2atUwpVNUX06qJyjURTqzDrFUazzq6VSQWMsvmQeyUy3qz5xPV5tiNu
e7esYuF36CMnX1aKkiQxtkPLxuIwAOf5s1DnqY68OhaWqfKadv7rgAz/P6z7
G7bDp9Pyge2E+ICwaL+gkEW+/gsXo7g2Cv8u8l+40H/hosCFC8N8AmtobJvd
bbEB0j1Wa6Pd1mi1eoDtVmuD3ep2OZo87naj1VyYl8Opook4nJoqGpvBZNIY
cqFEJZZy6QxWZWWtTKXg8lnl5UJGjVomVoqFGqlEp1AY1BqDUmnRaS0arUmq
MkkUtWIZLTe/KC29urhEyKwpLygg4Aj4BAIRRyAloA3+mWQSPjEBFxeTm57G
rqnRKGW0smIBt6axwem0mJxWu9PmdFhsdQ5HQ31DQ12d213naXA5bFY7TDzs
TqfZYjcZbXqD02ByGg11FnRpMWikIm5hSbGrubWzd2lHV19Hd397V/8SoHpH
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
WgpI77av6EJR95VdMJUw97Tqe1pru5vU3W51T4O6q17V4VS8/P7n59/99PT7
H59+/9Pj73/+/PtfP//hT89++uXZj3989sMfn//4y+c//PHx93988sPPT5F+
fPL9D0+///7Jd98++ea7x998+/Cbbx58/fWDb755CO3Xrx589erhqy+RXr54
+PLpwxef33/x4u6L5zeffX776RPQrSePbz1+dPvJo1uPHt14+PDGwwfXH96/
9gA8/8Or9+5fuXfn0t3bl+7cvHj7+sVbVy/dun751o0Lt27O3rw2e+Pq7PW5
GUxnr16embt8du7SzJVLpy5fOnnxIkD+6PkzRy6cOgJ4nz356dnjJ2bObt87
lUXNktB5GoFCSOfVFFZLayQKrsSo0BkU+tLc0uoi+J/AEjO5wHa4Y9VbXQ6P
ywXmtk7GkwL52WVMvUxvVBgB79ZaB7CdRy9DaSo0wDvaasTEVkvRoup8QAaL
0mCOnVX+n/uSMLBXQKcc3AVG8oo3wfbXSY/YJXb4tdfG80CMKn4NgL2ST5t3
9Tx6JRo1yspoRQUY28MQ2xfOs/21aV/ov2hRwMIFYb5B7Bqew4nYDkj/D3ms
SOg+WHddrSWdQi1Jz+KV01gVtOqikurCYm45nV1Ck3CEvGqWjMMHw2zW6ThV
FWBxiQlJ5EQCBQx5THxFJpVTmMnIS2eVFDJLiuEvkkdJTYmMJycmJ0fF4iIB
WcmpRHJRXn5JfkFxXlEmNYOckizjcwx6nV6vdTc0uBs8TQ1um8ki5QnEzBpm
RXENvVTErRGyaFUF+YUZWQVZWfTiEimfSy8vK8xMqyzILs/PLM/LrCjIrijI
ykslluRk5qaSC3MKGt3t3cDzHkD6ABj4zh6sRXf6Ozp7m9pbeTw+PiKJGIXL
IpOyYTggEb2QB/cObFfwqlwGuR2orpc6DQjvTr3UphHCXJuVnQ2+PXShT+jC
xV62Y2CfryoTs9g/J43av3bZ2tGRNUPIqwPSwaoPjo6tHR5eNzy8ZnhoaP36
+uY2ApFAwEVhwXbUEjEPTybEIKOOC0e4xkeBe0eUhkvMlhNw8FIEPhGZebDr
GOpDk+KDoU3BIdSTkiOISZFeSw8whwdIKWD1w+cDNYB6HBoaklBAJjjZ+54w
EUiJ8Y4vZEIcQjpMHADm2M15thPjSaTE1NTktNRkIhVvbKxbvWl8zdjI2vWj
a9ePrV2P2L5u06bV61G2TOeKvurKsoTgcFJ8QkZyMjUxMTUpMS0Zl5qUkIFP
0IpqWup0YNrBrgPkm12a1gZdu0vbZlNYpawCIjHSPzDc1zfSzy8mIBCrNjBf
cwDYHuUfoNQqJ/YA27cC2wHsKOS+Z14Y3icbl7RUVJQxSysElXROeWVBIdj2
gpriUjmzQs0q17DLjTy6kcvQs+gGaHkMNYumY9OtQqZLynFKWC4Z4J1jkyJZ
xEyQQ8quk7HNIoZBWG0W1RiFDLOY6VRwW3SiRq3AoxO7ddJWs6bDrm83qZq1
shadxMyj2yVsgwDaGreKZxLSzKJyBac8N78gNz8/Jy8rLz+LW15gFnNanBZn
nXXH1PaDbx9AKe6H904fmt57cHr/wd3eAvDTBydbWj1EXFJCWEhCcEB8oB8K
uQf7AtuzkuMb7bLlXShJZkWXdWWndWWXdWmHGfn2Fr3XtyO2g3V3Kb7+09+/
/fPfv/7zb1/++c+v/vzbV7/+9ctff3uF6Ut0869f/Okvr/70l69++cuXf/zt
iz/++eUvv76E9udfnv3887Offn7+w0/Pfvj52Y8/f/7jj89+/OEF6PvvP//2
m6fffPn5t68ef/3Fo69ePfryiwevXj744uX9L17ce/Hs/otnD148vff88e1n
j25//vDGkwfXnzy48RTah1ce37/88O7c/btX7t+du4d05d7di/fvXLx3+9yd
mxdu3zx36+bMrRszN6+du3F99vq12WvA+bnTc1dOXLl07PK5o5dmjl+YOXru
7GczJ8HPb52cLEjPEtewlUKpgM5lFVdLmGI5R2JS6mpl2or8cmA7t4IprOGo
BEow89ZaxPYGV5PdWidhimh55Zxytl5Wa1QajGqTRWdXSaQCRiWfXoF8OxJm
wrEgDLv837uZvBua2OWl/466l5S8WV3lvI7eoP788XllXseOEiCroAXHXsFn
VHHplbzqSujwqjHOozXWSriJvqS8jFZYANPehKBwYHvwIl8/b7z9tWlHbF+0
IMwviM3kO12NFgtg3AOCjs3aaEWm3WO3gYd3O53NGp01g0Sl5eSUpaXRc3L5
VZWMoqICclpaAp5fxdTJlQqhGNw7h0bLT6fGhYVHBoVGhUREh0aGB4ZQE2LL
00m0LCojP6syN6siL4eaCICJwkfFxQYHx4SCh0zMy8zKzcjOTs3ITc9Np6SX
FRY4zOZmT7PL5nLaXW3NrR6XR8IVMcvLizLTCzNTywqydRKRViQozsoqyc4u
z83Lz8gQcxgwmOankfPTSHmphHwKMY9MKASkp5IK08lluZnlBSUeT1vPUgTz
7r5lvf3LwcB398FlPyJ8Z2/LklaBQIiPxBGjcVkkxHZQJomQTSbmkIl5FKKC
W9lgVnpNu6NWitZS0QFMIruEy8rJSQgIDl/kB2yP8EEl3L2K8vGP9w+KWuSX
QSb3rVmKTvYdxjQyhuHd696B7YPDG8aalnQQiCRCUhSFMB/QJqRE4ZPn4y0g
FIFJifTGYYDwpCTk4YH5AHYiDgAeQUqOQkY9MQSf4A2th1JTIqkpUUQ0NKCV
VkJCCGpxYQQM8lgAJwyL3oe+DtGEefsoBIRFhIj4GDI+FsZpEgZ5uIlPjk5J
icbj44jEhLS05KwsQjIxUem0rdm8fu346Jrx0XUb1g9uBLBvXrtp05pNG1eN
j/etWcFiMJJCo8kJiekpyUB1Kg7hPR0Z+HgFj9ZWbwCeY+kxmmbgfL22tU7X
4tTY1PwiKiXcH1tLxfYuzReTwWIy8eg8aD+BWLRt18TWya1bJ7dsR1uWgOo7
oLNzz/aJqR079+3u7OtiV1dxyyuElTRueWVRQWFpcRGXXqrmVdllXKdSUK8W
u2QCt0JUJ+O7tAqXXl2vV7ZYNR1OXUedrsdt7PWYuj3mVpumXitqNIhbjJJ2
k9StETTqRV121RKLrMMq66/X9Lt1PS51f0Ptyhb7us76we76Vc3mda3W5W59
q1HYbpW0WyRLG1TLGtVLbOIOm9CqZheVFOUVFxeXFFSVFsjoZXYFr6+9vsHj
2LFr28FDB/Yf3L/v0N5pwDvKgZye2r97Cjvco6enk0oix4UEJaLtSz5xAYvi
g3wSAn3J0eENVvGKHuuyTvPKLsuqbsvSJea+diOoq1nX06jua9T0eebx/v3f
//c3f/+vb//xz2//8ffv/vFf3/4N6evf/uv7v/zzx9/+/t1f//btX3/75q9/
+e6333749W/fAvn//CsaBX799eWffgXOf/Hzn7/46U8vf/rl+U9/fPHTzy9/
+un5jz9+/sN3T7//5tl33z7+7ptH337z+OuvH3/16slXr+6/enX/i5fA+Tsv
Pr/74smdF4/vPMPM/NPHN54+uvn08fWnD68+unft0YNrjx9cfYTCOFfu3r18
/87le7cv3rl56faNCzevn7t1Y/bmrdkbN2cB7zeQjT997copJIT3ExdRTP7Y
+bOnL85u3Lo5l5oh5wpUYrmIzmeVVMs5UilLbFLqtVJ1WW4ZsJ1XxRSxeGqR
yqw0mPUWAHtjQ4vV5JIyJJxiBq+Sp5PVolphSoNFb1eLxILqClRMprIU3Du7
8nXqY2kJ5tVL3yAdozeCNgiVlCkuwoCM5cxgJJ8PzqN+2Wv37k1ur5iPwKO4
upftoApeNdrBxK+mAdvZaNZQUQVsxyUmBIZF+QUB2/2x3TR+XtO+cGHAIjDw
C0L8g7gcocMxH4oBWdBaqttsawC2w31gu93RpNHbqERKYUYGLS+nOj8X5hSl
WdngyWOCI0gxuJKsXGZVVV5WFjEpARcTHRYYHOgTEOIfHBaIUnEK0lOri3IZ
+bkiJkPIqgGnnU2mFKSllaanl6SnwYwUxiY2vTInPZ1FryjNy6ssKZFLeNxq
eq1KCz9wq8nmtDnVMrlerZZyOWI2V69W6mQSp0ZtVShqSoqlrBo5h1WZnw8/
eqmQLqwo4Bbl8ApzRKUFksoiYVm+oDRXUJ5flZ+Vl57rcbf29iO29/Qu6+kZ
6O7p6+tf2gOXfcvAw7d0LOHzBfgIHDEqMYdCBeueRSZmkAjQZqPlVLyMXVFn
kjtqZfUmpcuoALbb9IjtDjmvJj8PsX2hbyhW4zfS1/8N28G3A9tT8aSeZf1D
4+PrhkaGR8aGRoHqI0Nj6HB3YDtodOP4kq7ONAqFhI9OJceDP0drlynR2KIq
EDscPPYbqoOTpxBiSN5IexI8huhNwloiLoySEknBR5KSwkBUfAQ5GYmIsZ2U
FD7f4kLBvZNQtkwEBR9FxkI9yPmjkQLFavDwGD6GQoxPo+BSyYnYRidQHFpX
xcficBEpKbFkciI1NSkzk4QnJSms5rVb1mOOfXx486bhzZuHNm8Z3Lx57cYN
azaMLhtaK+KLksJiSXHxmXg8WHcwHqm4hAzgfFK8mFXeWlfb2qAHvLdgy6kt
LrDx+iaXzqoTlmRSo4ICQxb7RPj5R2HBdm+2TGxgIGK7rz+Tw57Ys33rrokJ
VEZmYmIXWkvF2L5z+9Tkzn1TA8v6pNwaJYuhF3FVAp6gpsZWq2lxGXobbava
3Mtb3H0ee2+9cZnHvKLZvqqnZXl3c29bQ/8Sz4qullW9rav7W9cMtK3sa+5o
MLXY1Eucmt4GfU+dbolF0+3Q9dXre+t1Sz361W2GlW21fW59T4O+v9m0utO5
tqduoLF2RWPtmnbLilbjyiXGvnoVDAF9zVrA7LIWQ6tDTasqKa8o5jErVdxq
DZvuVPGWdTQ0emxbt28+cOgg5ttRivtejO17D+4B3w7tshV96WnUmOBgXEgg
ym8P8oE2IdAvJTzUqucs70FgX9ltWtVjXtpl7utAbO9vM/Y16/sadf2NOi/b
f/7nf33/j39+949/fPePv3/zt79//ds/vvnLP7/+9e/f/Pm373799es//fTV
Lz+9+uWHV3/67ouffnj2ww/Pvv/22fffALoff/vt02+/+/ybbx9/9eWjr768
/+XLR1++uP/qxd1Xr+5+8cX9l1/ce/Hy3svnoLvPQU/vfv4YMfwJYPzJ9ceP
rz9+cP3R/WsP719/eO/ag9tXH9xGLv3uvSt3bl+6fev83Zvnbl+/cOv6+ZtX
L9yaO3cTi8bMofXWU3NzJ+eunr58+czli2cvoXzLExdmTl2YPXlu5ti505/N
nvxs5sQnZ46fOHd6cHhNLjldzZdoRUohnccsoim4EgVHWqvUycWKksxiRhGd
T2MpeDK9RGtWGc1Gm9vlaahrslnqZTUiVlE1r4Krl+kNSoNBbbTU2lSI7ejc
0vnTqMuKvQkw7Hn9O2GmprT4jSeHx16XHcCKz1TN30e1BWgVWAe8ejm8M5f2
2r3TK9AEAcYRIHx1OeBdUEPD1nAB+MjPc2gw88zPwCXhQsC3hwSj7ZD/EZDB
fLv/ggWh/sFcrhjojRy7DSHdZK03W+qtdrfD2QRgt1garI5mrd5GIpLzs7Py
wbcX5LPKimNCwoJ9AyP8w9KSU7JJAKFYXERcdGhEVEhoeFBIgI9/oK9fsH9A
sK9/JpFUlJVZnJ7BKCqpLioqzc4qysrmVFVLmSwBjaHgC/UyIeC9LD9HxKmu
Li5glBXXVJaX5xdaDEan3VrvtDtMVotOV4fyHVUeu6vO5qwz28xyubCivDov
j1lURMvNLUtPr8zOYORnSMrzRKU5krI8aXk+vyiblZcuKMkVol26MCnIcbvb
+nuX9fYt6+lb2tXb39sHYF8Kl939y9p7+jG288G3k6JxuanUTED6a+uOVlRJ
eAmj1GWUOQ3yOqMC5DTInEY5tCY5FwYvXFBY6ALfsEW+EYv9It/49sV+KDiz
OJCSROga6F83PrZqaGhwFNg+j3Qv29cOD41sGO/s6c5Mo8JPk0KKJWAAB7aT
8XFklJ3iXSoNQ3YdhI+iENFNFHtHVI8kE+DJKCrcx0elkWLTSHHQoWBZjumk
2FRiDAWR3Mt5lBiJ0iCxO2koHxLaGCr2PBl7f3grGGKA7WRCXBolEcYaKjkO
2jQKdOIppATw7QRCHCU1MS0Dn5VNIVMJ0lr96o3j6zZsGNq0eWjTxtEtW4a2
bh3csmXNxvXA9pWjg3KpLDkijhAbn4HHcpBSkoHwwPZUXBy/uqS1HrG9GcDu
1re5gfC6Fpfe7VRbtPyybIBYUCjMhvyxIpCBATFYhgxie0hQlH9AWVXphu3j
E1PbUU472pGK+fY9O3ZMTU5OTe7eN7V69XIFnylh0JU8jorPlvOYUjFHJeWa
5HyrDKvDL+NaJCyQFe4oBCCTjGdVC60avk3Ld9Ty6/SCRoPUBZcqrlXFtirZ
diXHoWDZZTUWaY1Nya3XiTpdmjanyq7j2jVMq4Zh1fMaLFK7guGUM1wqlkPJ
dGjYJmlNrYhhkNboJdUGGUsv5bBrKumVJXxGmaimTMQoVbKrdEKmWSPdunX9
gbcPAtj3YmmQGNinpg7snt43OXVwcs3QyoK83Piw8MTQQFwwCrbHB/knBPon
hQbrZIyVvbYVXeYVXcZV3ablPcaBLmC7YaDN0Nus723UAtt7PdpOl+JP//W3
H//+tx//9tfv//KXL//066tffnn2w0/Pv//+yTdfPnz1/PGLJ4+ePr776N6N
h3euP7h97e7ta7dvXrp55dz1ixeuzV28Ojc7d3l27tLslQszV86dnZs9Mzd7
+sq501dmz85hl1dmzl6Znb10fubi+bMXZ5AuzMxePDcDTL40c/LizOkLM2cu
nj118fTxC6dOXDh96vzMmfNnT54/ffLcmROzZ4/NnDw6c/zo7NFj544enT1+
7Mzxo6dPfHL65GenTx05eezIiaNHThz59PhnHx77+COkjz489uEHRz/68MhH
7x/58JMTH/UNdOUQ09Q8sYIr5lYya4oqVTyZhCUy6czA9rKskupCGreKBWZe
J9YYVUaTydbg9NQ53VZznYIlqcmr4lfyjQpDrcpg0BitBrtSJBIyaChsguXJ
MLF6X/MZMuWl3Mp5o/7v5PY3sZeKck45tt0JqzDjfYyNrajyUBmBcnhDPjAc
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
a3XPs72lQYeCM/W6BqfaZRQzC7OSQ0Pgp4rFZFDIPcrf73XZgZBIPz9qFnlo
8/A2bBV1Ep3Ns2PXnp27ge17ENunDuwZHhvSKFU6uVyn02kNtXqjwWg2uers
jY0utxumgmaHTWfQSnRKgV4pNGokBrXQVCt22dRNbmtzs6ul2dna4nS7zfUN
JlBdXW2dTVtv0daZ1A1mTXuTowkeaHf39ncuX9bT3dnY0mxra3W0tdpami1t
jeaWBmO9Xe0wyKwasVkL1lFk1mMfoRIC0jVilkkpcGokVpXYoBIYZJxaEVMr
468dXb3/8L59byGw70MBGWD71BRaToW/0e4NW8YY1ZXRISGJIcB2/1j/xcB2
XAhYdz9JdcnKLvvSdtOyTiNie5dpxRLj8nZDf6u+H1X61Xc2aDvq1e0uxfPP
737+7M6zF/dfgJ7ff/7s4bMXjz7/4sHTl3efvLzz+Is7D764/fDFvScvHjx9
8fDx8/sPn9x89Oz2kxe3nzy/8+DxzfsPb6A8xye3Hzy5c//h9Qf3rz94cOvB
/Vv37l67e+/a3QfXbj+4cvPhpdsPr9y8M3ft9tzV23PX7s5dvXPp2q0L1+9d
vHxzdu7GOdDFa+fOz82eA5N/+czZiyfPXjh5+vyJk+ePnbxw7NT5I6dnjpw6
8+mJUx8dOf3Rp6c+/PT4h58d++CTI+95K9x8/NnvoP3gk8N/+Ojw798/hDH/
rfc/ebvOZc8n52qEcsA7p7yGU86Q86QijthaaxMxhaUZRaxihoDGk3NlWokW
2G611nnc7Q0NLVajC9jOKaJJ6QKj0gRsr9VYbBanUigQMegiBk1Qjeo0sitL
ULXGqvI3cRiswGMZmHlGaRHrtTmfrwZZPr8d1bsFFcN7hXd3Ksp1p5WjxHVU
1xdVG8BiMojtAHkw7YB9Hubhsdg7jUWvYNLLqwoL0uIS4wNCInwDAtGupQVv
wO7njbcvWBAVFCYWq2x1zciuOzx2VxOYdgC71Q7u3WNzNpltHrOjUak2JcTj
/Hx8fRf54GMTGAUFsaFhIagcjJ/fYp8Q/8CwgKAQ/yC/xX6+PgjsfuhcD/+I
4BBcVAw+ITEuIhKeAdSHB4eEBAQG+wVEBYdScLhMYhI+Oiodn8gsyxVVFCro
JSJge0U+uyQnm5hSmZNZlZ1ZTqGWp6VWZaXRctMqsqgFxKTSVDI9K7M8lcIu
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
LxwMINiDe6G9g+jBbnhvL7y3Hwnshg93QoH9yMFeZH8vhKvJTiS0EQrswe4g
FN7D7QOaQgcxtOhhZdmPEbuJWGz/6Khwuho4Pj08OQ8ex8OnseBJDFaBg0Tk
8CR2AHg/iYbO4vASRiIWPUkcnR1HT45j56DqT9b8m68GnrdVVA+QSUQaJLCd
OtLVNUAmv+ylKQVLNpPYUqjxq+cD3q16vlUrMGsE3JXpIQqFuJr6pKa4mGA7
qvfG8gpke1VVTUUpV8q4ypyeXJ+c3pyc3JwdX5+fJc8vUufX6UsQ7Y/dOtCf
uUzmrjB/JnOdwkPJ5CUQHgX8DR5Q5m+Ibk3oz9zgIWz65jZFcBjpenOXunlI
X98nIf4/rt6Cva1kWds+O2SG2A4nZpAsyTKzxczMzIxmdphhJhnc+937nO+P
fk/1sj1zzlx19bRarbXkJL7rWdXV1b/9f+A8k/Gk6inq/ud/WPTmPxSH+fPf
0PCEdyAaTuFPUul//Pqf3y5D/f/5g/Iq/0PK/Hfo8//5558M7FTC9//9+s9/
U2nfP/4H83/9nT0doIUT+e1/fmdfEo8h3//48weeMl6+f7W+vNrX1fmgp73v
zj+g2B923H7QfuvenRvqFSF0+xkV4Iqd1CMgPNh+VA3vFf1cWGY37/mf39/+
929v/vvXN1Rh4MeLf39//u+fz6nkIyv8+Me3E4D9l8+0EZXS2j8dAOw/vd/7
8W7n5zdNWkt9t/2VLadybH//svThRenD8/Ln55XPFxWw/dN5+eN56f1Z/t1p
7s1RmgoOHJN0B97B9hf7iRcHMdrEBLzvhinRfYdy3dneJYA9xE56pfrtx3VW
FrLiPaoH96HbWd77ScV5XHHtFdwA+17edZB372adjYyjmLCsingLk/Nug9Ou
MctXJIoVhcvgMKiMiWjarLUs8+eI7VsGk8bisXiDxPYcNCHYDvibFCbJHDSz
JuAJ+TxhvycSDocsBqVOypJkLqMrV9EYOvN07ToHRsnIzyXGqNh6q+q6eszV
3iXl+v8qQcDR+zKbnQ7sW9NtcRV9Lwd10k2DTKKXbukkWxik85tWlsD2p133
+lsoAtxKeY//9X9iMm3/9V/ddG7FY6oUdf/p6INnY4+GRh8OjtznOsPjj4Ym
nj6bHHw29uTx5NMh3tNRwdAE/9n49NAUf2iKNzQ1PcwTjE4LRnjCsSnRBE8w
NiGamBBNTcxMjs9MTc1M8kSTfNGUQDwlmuWJFqZFc9NC2KJodlEkXpoRL86I
FmeES2LRknhmUTyzMEPtvGhmQTQ3L5hbnllYFi0szSwsieeXZxdW55ZX51ZW
Z1fW5lZXxSur4qX1+ZW1+dX1RdjK+sLK1uLq5uLyxvLS1iraxfXlpc3VFcna
qmRjXb61JduUyMm25FKJTLallEvl0i2VTKaRy9UymVou1yqUeqVCvrY28WT0
yb0HIuG0SCgUTPP5U5OX6n1qanVuJumzcor9SrTbUwF7wmcNO/US8czj1p6+
m1dgv82BvQX2oKXt3p3W4YEB5daaQa3Qq3E7qUGhMCqUNq3GqtFY1WqLUmVW
a0w6mNqkVZq0aoNGadaqbUqNQwONoddrdXqdQavRGvV6s8FoMRiMWp3FYDQb
tDCDTq3XqtAxoqPTGA0Gk9FkMZstJpPFZEbHYNQbTHqzxWhCazJYzAazUW+h
SVaT1WawWM0Wi9XCNlTaLFa7DWZz2GEWq9VmtzscdjTo0ajTZXN4LA6Hy+3w
UHUWdyDgD4b83oDHG3BB6wTpVSjkh+ZJRCNUSDcaiYVCcZvNvTy3KObxxFNT
wtERsB0mBNsHB0Vjo0G3vlzwF9JugL1WCJSyXrIUzBdwajEfWp0rBcnSIBnb
29oH2jrudXT293RuSlbzhQwUQaGczZczuVK6UM7gYa5UyRXLuWqtUqvVK5VK
uVysVIqNOjx5uVotNerVeq3SqFVr1XK9WqlVq9Vak0vHLVTKhVopXy3CCo1K
vlnO10vFZrlYLxXqxWKjVKihXynVK4VqGY+MlToJCfpUuZArZAvQGOVisVTK
4xuUyulCPlXIpIvpTCmdKeYzBUiZUiZTSGZyMWihbDqaTUcyqWgmFUkloqlE
nA6HysSTqVgykUgmY4lkIhWPxkOAEZRXMBqAOd2urfV1aI/x4af3Olr6bv8D
YH/Ucftxyy3pLO+oHj1vQg/HYScNgjwE/GE1dFAJsTRI1//321uA/X9+eUUV
Bn4+//dPZ//v+/k/f2IVfb+e/PEFiv34F8pp3/uFctp3f4FR4UdC+rc3zW/v
tr+93f78pvnpJcVkPjDd/vF5+cNZ8cM56fZPFxX03x5n3zCqM9GeurRjqvTL
bU19TmyPUPGBHWoZ2wMnLBrDFfs9oophVIjgqMpSZSru/bKL0iCLTlD9sOjZ
zzn3cnTmSDPnzMetKwL+mmDRrXdYILeXpMoVldviBtWTkbRJZVwTLkoXZZot
o1ULUesL+WLpdKnc2M/lK/Fw0ig3yBYkBqnO7w75PeGQPxYM+o06Oau1u35d
NIDboATTsKTE6/CLYoWS26+3oF4Xh7ws4X61wHoN9r8HZK6yZS47OvSlm1oW
kAHeuQn4rGxleW6c97hj4O6dju5bLW1/C7b/PVWm48bNjn+QMfizZVY23nnj
ZtfNm503bnTdvNF961bXrZt4FqYjnm9RlkLvnTt377SwqPIdPCajpZd32DFD
t2/33L55t+VWb8utuy23+1puo6VfxrbWvrbWu60tlOTQ1tbPjH4x25m1td+9
09ZHpW8wp72vvfNuW2dPa3vXnZaetrae1tae1rZezGnt6KV3uzChv6Orv61z
ANbeMdDZ3t/ehpaso/1+d+c9WFfH/a6OB92dj+/efdjTA3vU24P+074BtM/6
+58N9D/r77uy/qH79wfv3Xs8MPBwoP/R/YGx0VGxWCyYnp7m8/C7A9HOm5xa
YfH2bNBBOZBsRZXlyTg4tkvnxM/a+gZutnGKHWznTly6D7DfvvOovXP04cOJ
p0/4g0OCoWHes6e8Z88Eg4PCoaHpwWfsCNEh/tAgb2iQPzwM4xH3Rq5slDc0
PDU0ODk8ODH8bHJkCB1M4KYJRkeoDxk8OswbI0OfPzIyPUp7aXkjo9Pj4/zR
Uf7Y6NTIEH9shDc2RHPGRwXjVMRYOIFpo7yxkenxUf7EqHByAp+i3bjsVEEq
kkY108YE42OCMbTjwgmq2s7Dlakaw8T05LiQNwET8SaFUxPCqXE+PjJFNSlm
+ELxtGiW2RxPOM8TzcOzz8wszYrhx8Vwl3RIx7BgZHjq2VPR2IjfpauUAqWc
twwD5PPeQs5bouphvqjXsMibGGhp77pNMZm7La0UcmcHp95r7+hrbx8bHhSL
oQkW5hcWZ9EuLS3AFhdnF8jECwtzixAIy/MLy4sLK8uLq6vLa0uLK8tLKxtr
G2vLaytLq0sLKyvLqyv039ri0vLKyurS8urC0jJsaWV1cXl5fnFpcQlvYGQJ
15xbXMRd5pcW8RY+t7q6ijeXllYWl1bxHeYXluYX8ZGVWXSWV3HrhUWML83N
z4lnxbPzc7Pz82Rzc/jOaEWzszNz8zNzczNz6MyKZmbFQvxvfkYwKxLMCgVi
aoUiPp83IxKIREIBlIeQqraJhCIxXk3zJ4YGH3S13G+7+aj99sM7N1amRw6r
4efQ7duxi53E+XbitBk9rAb3Kv7dkn+34CO2//r2v3+8+p8fL//7+/l/fz/7
z89n//r59J8/nf3z29nvpNiPON3+/SOV8/3+rvnrh+1f3je+M7kO+/wair3J
rPHxTe3jq/Knl5WPLyofLspcWOb936oNQLeztdT0q8PUy4PEK4q301F6z3ej
jPBUJQw8v8yEZJV+6YQOIL3hpyNfCfJ0BDZLknEdVon2ewXHXtG1D+mede7n
3NsZRz3rKKUcy9O8rZlFj8llURlky1L1mprOOdfbk5GUQaFbEy7LlhV6qcmu
cfqs3rA/kclUS7W9XKESCcU1mxrlotSiMIHtHmcoHkwFgwGdWmaQA7AbV2wn
uy7he11hgMXe11iU5rLl9qty66pX51+vXlH6bxuXttZY9uM60+eXu5aupTuM
Yzs3qFhZnZ/gP+4a6KPVvZbW/8v2f+DZFr8mnTdvtd+82XHrVvutW223YTfb
Wb/j9u1Osluc9bS09LTeoZbszt22lrsQTrC2lt6WFrzsI3S397EqH/RWW2t/
O72L9m47m9DRRp32lv6OtnvAbye0FpDeig5oPNBBbR/9knbc7ejo6+xE29Pe
BuvtaL/byUY6O7lxtP1dXf3dXf2dXfd7eu51dw90d93v7ekHz3u67nd3PfiL
5D0Pe7sf3e3h7HFf7+OBu4/67z7qI3vS3/90YODpvYFn9+49vdf/7P7Ak3sD
D/v7Hw70PUB7/8H4+PjMzAykO9U4o31MkyuzorjXko+6AfZCzJMF3iNOlgxp
j7hMkvnZZ50DA7fars7jAOEpGsNq/HYMD9wnOD8b5A0OCwjXQ4xsQ5CjMIo8
Uwh6hD9CxKZ2ZFgwOjY9Mor2qjMqHAOKR7mT/gTojI8IGZyFROlRtCI8MU2O
C8ZGhHSeyAiNj49gRMTmiCa5j4/wxslAcnYEyQRoPD2JB64pwcSkEDY5KZqc
wkt0YAIG8xkejxuhagyYzOcJudJCvCkhn0cdtkIh4lOtBvxxCXl8kEg8TYbJ
Yj5vls+HzQkEMLB9QTwjmpgSjdKBVnBzotFhl01RKfrLeT/hveAr5n35vK+c
DxTTnpjXsCqYfNzeQ7qihZUdaOvovzwUu23o8eMZkVA8MyMUiUQzYuHMrHB2
QTi7KBDPTc/MoY+WBz8zMycAWOcWxLOLM7PA78oi8XaFUZfYu7C4DFIvLHC8
XgHKwfmVZUwDtJfn4TLm4CQWFoFodED2xRWO53AKq8uYura8tAy/wOF+cXll
bnlFtLAghouZg9NZ4q48N4+X80A6fAQuw+7IjVwavUfEhxuYmyNHtYjbwfCv
EW5hdkYMm2MdkQCPloJpHl+IP1uBaHzw8eOu1iedd+7dviEefrxXCr3YT0Ku
X+wkz5vxs0b0qBbcL/v3SoFdqhjm+w8U+/eX//n5Odj+n++nBPafz8D2f309
/+3zyfdPR7Dfvh6z4mD7P7/f/f62+StLkvlGu5YoFPPpTQP28VX1w6sKFDsh
/TkZp9jfnRbITnJvT6jmwEuiOpPr7GyOl/vxK8UefsG2L502/JTW3gxeUMg9
REeKXAfby96jyzRIHyv5yw7sKLsPSm4S7VnHUdF3kPc0svZ8wro8zZfOLXvo
QD0tdLt6TeUxu+16Ryqa1sm1awKwHTrc4NC7AvZgJJDMZGvl+mGhWA0Ho7pN
nXJBZpGb/e6wzx2JBZLRUMiokrKqjOuXYKdtpxSf4U7ouCwUtrJ8VQ3yMuP9
b3mPlx7hsmw7k+WXsXSW1q6Ts5M4WNKjhupAbl3nxnDJM3rZpk5G8RnN5oYS
bIdu74JubwfAWQVI2rXUzpZTIdcxyFnbzZutN24Q29G5ebOdjk+6DbZzhCe7
c7vzzu2ullvdsDtU0KO3pRVI7wXk21u679zuvt1CI61kdyGwqSXrbb3TB8Iz
yBPA29sAdtAe/XsksOkl925/R3s/wb/tLkje0dYLpLfhZXsvpD6mdXUMdAPs
VCL+bmfbNd4HiOrd/d09/V3dzLru9fSA9g97ex/2EtWvDWB/wOw+2r6+B313
H/b13e/t5ezB3bsYxMiDu32P+gce37/38N69B+g8eMjjQR+JhNMCIQQ8j7c6
NxP3WYsJbz7moqh71JWNOLNhqvcbc1tkSwtPO6DbWUzmVguJ9hawnTT8cP+D
qcEhgH2KGX94iLbtDFOHYs4jw1wLGkNv80iTk3qfhvaG6h4Z5Q+P8IdH6Tzu
cUI0EXuM7BrgHLrRp87fBsVAPdoJtOPcB4XszBFQnWO7EBBmQp3qXkKEj09M
X5VH45DO4Z1DOjeCjohRHWwnvE9eduhSxHaekGFfxJ8WTQvEAuHM9PTMtACc
B+3nBMLZ6elZgWCe2C6eF83gKYBF3UeEI0Meq6JaCtQKoVo+WMlDt/vzGR9X
FjIRMG7O8p929uJfWs/tO/0tVOCXdjC1tA49eDgjov9AO7CdTAyez0/PzILt
otkF0ey8UDwvEC8IxPMYF80tzpCBq4D5GtgOm52HyF/h2M5IvgLRTtAGrlkH
sAaHZ8FbUHp+EYbJEPEE6CXS/ysQ9yvr9MEl8gVwC/NwB8srs8vLs4tLRGiw
HUp+HtJ9cYHrQ9KTTyFvgkHx3CKkvnge3xzqne4FfU93hC8Qz6EzI5qdE88z
ts+S+hfBmUHFzwh500J4Xh5fzJsex7/aztsP227xn92vZHwXe6nne8mL3fTZ
Tvy0GTmqhfYrPjpfD3gv+P79y8W/fzz/908X//n54t8/nf/57fyPn87/+Hr6
+6fjXz8f/yA7QucXgvzhzx8Ofn4HsO9+e7vz9S2k+/anV3WKsUOuv6l+fF35
dF5+f1KgTalsOyrs7Un+zTEH9hxtXDrOvKCqMpkX+xRsJ93O2E7qfTv8YjvM
ojFcrbAwd6QIHQhIZ3NwlQcg3Vmspuo9vDqMCbZfcB0U3Ac512He3czbs2HT
0iRfOr/mNRLbpYub6jWlk5V8S0VTyi3luhDslevlRqfRG3AEQ954Grq9vpcv
VMLBiGZdo1xQgO0BTzRAh24lY6EI2K6TrHJFA7iaXdeCnAu/q9j2Ui4Of8Xw
NWaX4Zfrl3+rFUZ7Uami++aaRnrJbVotBfMlG5j8F+HRkW1eHq63uaFYXhaP
TnK6vfvWHWj1O2w5ldPtHTdudFLIhUjOsR3ttbXfus3sDsf2TmL7nS4w/M5t
8BzEhvXcoV0k0PA00tJ6tw0kb2HAb+25c9niXY7t/W2tTJy3MWMYJ0mPFo6g
pa+9DYK/v729r4NEe297O0GePQVQy0YA/75OaPhWYjvDO0l3WGfnQCfabmh4
JuC773d3P4D1kFC/YjtkfDeBnZH83t3e+313qQ+k36XOvV4aAdgfEuGh2wcA
9gdUQBd4f0SFLIWkCPlT/BWxKOGzFmLuXMyZDjvyMWc2Ys+A7QF7yKFXLC8M
d99jup3lPV6tpQ729E0+GaSgCsA+CLk+LASuhwBzyPVhJtopLsEFZKZHhqZJ
ug9Njw5zVP+beh9ltB+hUMzQ8PQoMZwwPnHJ9v9jkOtc51K0j5Nop8LFTPnz
L0vTj4qm/hfDOaF+SXhm19KdIzyn3jlfQPOZzqeymVPXkCf4g+2CKd7fDWwX
80m0z00L5oSiOdHMvHhmViQUwKEMDQuGBp16Sa0QqBdDADsZ+qVQA6hPh1Jh
k2SR/6z7buftO90Ub2952N5+H4r9/iOhgNQ6RSjEMwIKVogEIjH0ObM5zsBz
puTnRNRf4Ag/Ow+qk26fmyfAzjFiQzWTlL4iPOF3fmlxAX2oeIIwbJapaJLu
9O4ip8Y5qtMI4zahexl4X5lbWp5lSpxJd7oF91mwmm7HPQJcsn1BPE9fkn3h
BcEMRWkwDT/YrFgsZnL974qdnlIEQuG0UDDFpz9h7m9ncnzkQd+D1lsjD3pz
Sefpbup8J/F8L3WxlzzdpkLuezUqyXJQgXT3/uvH6b++n7El1Of/+nbxx9ez
P77BTn9nu1B/+XL849PRzx8PuPbnD3uwnyjYTpntn95AtNeB9I+vy59eVb68
rBLVL8ofzkswyPU3J3lOt785zr87zr8+zEK3vzpKvzpIvqBjUpOcYie279DZ
HBfEdkqSoTP1GkF2cCrp9kOq4k4lZY4oLBM4rHopJlP2kBWdewX7QdGzn3ft
pm1Q79tZe8ZvmB/lyRY2vSanWalXrEh0ErXT5HIZXdlYRr6pWJ8BhBXEdoPb
Zw8GvalsvlFp7OcLtZA/rFrVyOfkFrkl7En6XbFoIBUNRkwauU62pqPDj1gN
dgbqvxUBW5WvXS6tcqns1+Ga6yOWuJG/v2TnLq2rWe1Hgvkm9TUs3s6F2Q0y
CUuP2QLS9XKJTi7hciOVeB4c5z3q6Ou70u2s5sB/cdmP16K9/W9Iv4L8rdYb
sNttN2FX0v32nc7bt4F3hvTbgDbHdsL7ncv2yhjhCewtcAEUvWlrYYTnWkb1
jlZS7NDkbe29LcA7GUjeS3H1Vk6xQ8CjQwKeWQ+jPRvv4EI01/EZkL+v8y8l
D7aD5Peg4bu77vV23++FmGdGHUj3u8R2hnTAnGP7/bu9A7099zgZjxHC+717
ff3oPLp378nDJzyecIbF3ldnRdDtmYgjH3fkok4QnuXM0NbUqMdq2Fyf6L1/
72Y7tPr9lnZ2BHb7YG//xONnIDmPUR1snxqkvfaw6SvRziIwQDoLm48McYH0
a9EOqoPwHOcJ6ehwYp7pfHIBgDywPzrMyXV0mD4f5cjPSX2aOUYTBOOXSOeN
DRPhxyiuzmpdUrlLUtGs7iXEPIh9jXeO9v+L/BDwV3GbS8j/je0CHm31Ek7x
L43Hn4GMZzYrEIqnhbMi0Sz+UCHjZ0RioVAwOs4fHDSrNurFQC0fqBdCZMVg
reRvlEL1XDAdNSk2RM96+/CvtKfl9gM8+rW0DN5/SE9V7D8RIR2cgxHbp7nI
jIiMHh1mZqcBfNzwMkoDAb8A9T47tySeXYTNzy/Pzi2SQmY6mcIv0NDLFKXh
dPjC4hIXKZlnbF9gTJ6bm+fIjGlc1IU0+eLSPEd4gH1hSTw3B9E9R1EX8PzS
KVwTXswEOSfRxXPz3BMHpRKI5/lisXCOPkmRGEL6HOQ6eA4Tw40JZwR8AQwP
laLpafZYxOO8qnBy7Flfz5O7nemI6WwvcUZsT17sJU6bocOab7/uZ9KdIjP/
75fzf32/+Oe3s399O4eh8ydjO62iQq5/OYFuB9W/fz5iqY8A+y6MbVmCNT+9
rn18VfkMsL+ofHle/UxspwRIKPaPLOTOsR1Uf32QeXVAiv0NY/srirezGr8E
dhLt3FrqaSN0vh2h9BjCu/+Io3rtqlBYmdUKK3sPKt7Dknu/SKL9sOTaK7jA
9r2cA7abdaZ9+rnhKeWK3GNymRV62dKWVqJ2mV1eszsbScvXlRvideU6oG9w
Gt0+VzgYzOaKOxXo9nw1EoypVtXKRYVdbQ+64wEXna8SDYRNaqlBvn55sN3l
4RpcUJ3WUhVrlLuioPR1jKxdQ/760CVOzHNBmEvlzxwEGK6BSTbVWxtqVl6A
qM4O5gDG2XkcZFSLQLYFthP2odtXlucmpp52DfQT22+2/oMlQN640cGqLXXf
us2WR2923uKofoOT7q2c3brdynT7X2EZTsCD6ndaiO2M4QzpLX/Z7Ttdt291
32Fh+TtclIYp/JbbrKVxTuEza2FLq20Uw6EID3GeUN9GYp4UO7c/BdxmPOdg
Tgyn8Hs7p9tpnFkP5D3H9q6uB90997u6uTj8va7ue+A8CM+iMRzG7/X2DNAg
OE99GMl4CsvcfdDfz9nD/oH7/QMDd/vQQsYPPnk6LRDMzMxIlucTfguQXkg4
C3FXPu7KRl35mDsbtsV9DotUOtX/8P6ttkctHZDrD0mx944/fDL5ZGjqGS2M
MrAPTQ0xvA8P8inATlKcxWFIivOYXJ949gzT8JI/9BfSeUMM4FfxGfapYQ7s
TOSPcCOC0SuGs/gMC7z/FbHhBqev1Lvg6txAgJ3PmC+iI2JHBVNjHNv/ZhO0
TkrKkBT7NIvSz/B4MPZynMbRcmCfmpym8DuPK/Ev4k3P8AVigQB9UJ14zjEX
mBLQy0Wga1owMTRsUK3VCv56IdwshGu5INhOYC+hEyhmnFrpwkj/g66WO92t
t/ta7zzuv0scB7Gn8VdDMRkhE+3TgN4MYRxsF83MCkQz4KJQPEtLjjCIeQZ2
IcVqFoQzc3h3hgGWpDvxdo6J6jkuJL64uMRsmQVSQO9LLC9SRAUd0t6zpPSX
CM7zJLzFFCJfmKU+hedn2XopLkzhnPm/YE6En1vkfAT7htDqc9P4nrMA+ywP
fzZi0u0iMWQ6yXbwfFZEcRhGeDxIiikag5+WVlinyXtO48+Zj7+RuWmecHxk
6F5Pwq14fpA6308+P0w/P0ieNsJn9fBxncIyeyXfbtH3z+/P//zp4s+fgffz
Pwjsp39+PaOEdoD988kvn0m3//h4+NOHPbD927vdb+/2vr7d+URLqHXKe3xR
+/yiBsUOthPSyYpUBJLS2qkCJAvF5F4dZl4fpl4fpQF2dAB2lgDJllB3Ii9Y
+cfzbZbQ3gzDqChx3c9ltnM5kEdV3yGQXvIclMB5smMacXN5MpQDWQDbnbtZ
+37OGXMpZ56Nq1eVxHaKt0v0Uq3L5PRaPdloRj6/tTWzptpUGdR6h8nlcYTA
9kyxWds+yBUqfl9YvixXLCocOkfYlwq4EvFQKh6KWrRysJ10OwM7R3guJkMB
8LU1+eqKggvOXKXH/L3DZctwoRhuLfVqCRU83+RaLRUQXufYzi2bGuVS/aV0
30SHewu3wxUWJvmjPQ8ftXb33rzDJUB23GA5MDdvdcEoEwb9G+03INf/wYyd
33HjJozU+z9utd24XGa9XGClhBk4hVssZ+YOF3UB6rtJ0t+huE1LS+dVp+cq
esMFcAjjLW0M5hSuQb+vrY2F5TnFTgH2HibUid4czzs677Z3UFiGYjJMmXfS
CIVoGMlZAKcDPO+npdhOQnpXN9hOeO/tpRANKfnOgZ5OLtLOqI7OtVDvud/f
NwDC9/VBogPpXDvApPsDFpl5OPDgyf2HTx88mBgenREJlRur6aAtHyfFnmds
z8fdmZAzF7Kn/C7zlnT63pPHLZ0Pb7U+vtM+2H134uHjqSeD/GfDU08HecD7
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
f2oMNs0b402OTE2MTPMnePzxaeEkXzDBE0xMC2ndi4wUG+235wvxz50phukJ
wfS4UDQ+I54UCsenBeMC0QSPRyfgTU0+40095U+hMzgx8Wxycmji0oav+zz+
CJ8/MsUbGp8YmpwaGZ+kzvg45g9N0rThKdgUvtLQ5MTwxPizSVxnanBi8hls
fPzZxMQgs6eT40/Hx56OjjweGaHjoTkbG8XIEzpRdHRwYnx4YgIXxK/8yNjo
0OjI0NjYyOjo8NjY8Mjws9GRwXE6IG54Ymx4cmx4bHRwcnxocmxoikLQY7yx
YXR4E+iPCOiPaFjAH50RjC7M8Q0qaSrkKCQ8oHqBwO4kvMc8hZgnF6ZC7j6r
VqNcl8tXZLJF6eacfHNetjEHU0gWlNJF+dYcWvSlmwvyrUW5ZEkhXZRJFmTs
XY18SSGZl27Nybbm5VLMmZdtsXZjHpOV0mXMl0mWpFvLMsmKTIJ2WSFbUcpW
ldIV2dayQrKCDlrF1rJKsqySrmikdASAGiZdVeAt2SqbD1tWypbUihWVAldY
VCpXlIpVuWwJ31kpX1KilS4qJYsqyZKSmXwLX28Jd1fK1uTSVekmrrOB76CS
r+Hu8i32TaQrko1FyeaSnN1LyUwtX1UrlrXKdbViVa/e1Gs2tap1nWZdr9tU
a9aV2jW1flOj29Tqt0xGmdOuikXtxVyAAzva7XKsWQg3ixHo9krOm4k7fG69
WS8xqtctui2LUW40yowGiQEfN0iMhk2jSWIyS4ymLYNRYjTLjSYZWqtdabUp
0JrYiNWutsNsKqdd47ApYS6nxulQW9G3q9Fx2FUYsdtVcNVut8HtNHhcJp/b
5HUZPE5dwKsP+wwhrx4dn0fv8eh8PiNav88Y9BuDPmMkYAwHdNGwIRzUxiLG
aBhmigRN8Yg9HnUkIq542JmIOpJRRzxii0Vs8bgjHrenkq5k0plMO9IZdzrp
zqU92ZQrn3Hns54s2py7VPCVCt5i3lPIegspbyHtKeXchay9mHVUC85aEeZu
loONUhB+sFmN7Dbih7uJ830o9uzLg+yrQ7TpF/sZsJ1yC4mc/v2S748fR7//
dPLLT+ffvp3/+HL+x+fnf366+P3T8z8+n3//cPjlw943thH1p7fN7+93v75r
fn7T+EQ1wWqfXlS/vGp8eVH//Lzy9qzw/nn59VmepPtp4f1p4c1RhjaiHmde
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
436w3Z70syLtEQeLonvzUQ9aiq5HgXo/J9pLf3V8hZi7lKY11lLKxyl21oFB
PAeA6wLhPUBhnBQkd4T0MxPYBHBK5CY5XWHaHnjHYJlkub+aC1YI18B7iIl2
Bvbs5SDBnC5O45VcmIP531xG6Gp+qJYj2pdyeASgkAvH2CIX+Um4iywGXkh5
yKew8csOU+OEa/iCXJDiOURvxnaMk0TnRDu5gEzKy2I+vgIXHWIPFJU8+1ny
oWKWOSka9FeKoXIeSh5sD9VK0VoxyrgdvwI7cXi7FquXaZWzWgpB3hfzPjiR
KovJ1Eucj7vU7XWO7YVIoxBuFCLNQox+WDwaFANlcgpXi7Pl8E4lvF0JctYs
hZql4A7uW4zsleM7lchuDeSPNPBuNbxbj+7VKeq+V4vu1+N7tdghKN1IHDTi
bIRWSLnx3WoULYy9hfmRQ4AdgryRgDtgPgKPBjGKxm/H9+uRg0b0AC2bdrwN
9xFlS67R/SaeGmLQ6gcsjEMXr8fJNZCniEF1HzaihxSajh5WKBv8qB48oLor
4aPtMCT92U7iYo9y2l+f5l5TsfTcGzodo/DhvPL2uPjiKHO+D48QpQOyq6Hf
Pr/6/cvLX7+d//Lp9NcPJ+A51Y35ePDTh4Nv7/dhHNu/vtv9+nrny0sKxXx9
1fj6svGZdi1VuC2osHcnFPDhFkzf0ObTzKt9ovrz3eQLPETspZ7vJgjs2+Gz
Rvi8Eb5gwXaS8fXQaTVwUgHnI2A7eE5ynbadspICZfdh0X1QdO3lHSD8HmU8
unfydAZHM2drQK5nHXtZx07GsZt1NFLWWtJSjdqVS3Nz40Knzm7X27Wbaumy
1GP2OY2+bKzitfjXxavSRYlBonXpHT5bJBxM54rV5v5JrXmQSpVAJvkC2K73
usJ+TzTmS+UzFY/LYgbbZWt6ybpRsm7YWtdvkmKnSDuT7gA1nW1KBdjXVZdK
fo1T7xzb/yrhy+1U2qKdSnroc9qaRCuqRrmMozrozYXTdSwsA7Ab1HK9CqJd
CoCTSleSSqeFVAWhHkZ4V8kMSqlFrbSqVWYS9nKgngivlYPwME69m9RMtJOA
VzHpTrrdYcIjjNyqlYL/jO1Km0FlM6ovDYNGtdWggmEcapnYa+Cku4bTzy4T
C9QA3bSaqbObNPgI09Wk212X7gDin9HequUCNcA1sZ08CBPtJiWn3jkBj6cG
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
V7Ysco1T5wg64olwLp+v7R28qjQOstmKVe1SLSqNCpPPE/W64zF/Mp/Meu1W
k3KTag5sreg3V/VbYPsGW1Fd55LVr/Yo0RKqgiW007EajPOM+VTgi9WK2eJK
x6Cjlkm0tBeJLZLKWXRFQVL8UrpTIqJCr5LpiNJStKC0jcLmTKjLpUYZW9iV
bxoUGzCjasug3NQq1rXydY18XS1d08gpJVKv2DCpNylPRrVh1myaVBsG1YZR
s2VQb+k1Uq1apgXt1RKTatOq2bJqtzDHot40qzdN6i2zWmLWSIBWOyUxykxa
CaUdGuUkpLlVV53KrlPa1EqbVm3TqKwaJQvXK6xwCga1hWU2UrakUWrUbZqM
ErS4tUmzhS9j0UqserlFKzWq8X3WzdpNvXLNqFzHNzQq1/AFLBp8gU2zasOk
XLeqN23wPjopPJGVXJXcoCIPRavAOpkDTx9amV0nc+GxAr5Gr3bqNW6D2mvE
b5DCb1IFzCqfURm0GHwmY8Bi8puNAasxaDeEHIagXRt26BMeYypgK8YhzsF2
islwkXZo3VKSJUNGPSm3OWDHL6/Cqd9y6WUundSJPxndlkO3YVWvWRTrJuUG
XCT+ePXKDfyM9KetwY+Gvxr8UGtGxSoe/cxqqVWjsKtlDpXMqZLb5VKbbMvO
zCnbdCtlZvoLpb9Kk3KL8rKkGybppkW2aZZuWGUbtq11x+aGUyqxbq0Zpat6
yYpRtmqgEnYrOskqTIuOFCPr7BlzBXOs8g2zbN2i3KJd1bi4fMMoRWcDX9gm
W7VJl2zyVRu+m3zFrFg1ypZNMClsxSRfNctWLLJVowTtullKZpJsmCUbVqnE
QP/yl3WSJfXGgmZrUSNb0ilWtfIVvWJVjy+2RabdXNFureiUK2b9uscm9zgV
5YKPEg6r0X1a4qTVT4q0UxZ6pFL0hT0qnXJNIV2WrM5IlviS+amNmclNMVrY
xPrMxKpwbE04sSyYWOaNb4h4q8LxNdHYmnhiTTSxzB9fnp5c5qEzscQbW5oa
XZ4aWZwYWppEO7IwMbwwMTg//hQ2O/ZEPPp4dnxQNPxkfnx4fnxodmRwcXxE
PPJUMPhgevCeaOShcPihYPCecOiBaOih6NlD8eAj8bPHoif3Z548ED1+IHx8
X/AI9kDw6KHg4X3h44fo8B89HLnf9+x+z/DDu4P3ewfv9Tzr7xkZ6B3pvzs+
0D/Wf3esv2/8Xt/4wN3R/t6Ruz1Dvd2DPd3PujoHe7oG0e/tfgbr6Xzc0/mo
u/NJb8/j7q7Hnd2PO7oetLY/6e5+3NX5qLPjSVfncE/3/z9lfn5NYWFtaeGE
SKeWhlRg2d7WkN1Yl95SAx4qKU1pLEmpL0oCAFozrnA=
    "], {{0, 375}, {500, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJy1VmdYE+kW/mYmvdASkE7ozSBFIID0LiJIB1EJSYBQAoSEotgQUYEVRUSa
IsiqgAuuSpG1IBZsi2JDBd0gi4CyLhZsqNwJ/sD73P259zzPnHm/9znnfOec
+TGvdmxqUBwMAMggoC6IneUqFLJzguXQQ6gggx8v4HF9BSJePE/IioVQcpyM
OkAel3ppWopAJAzydmNEREYx8I8AAtSAItADWmxORhr4X4Pm4fsH3093mVJv
/NHxaeub0JZst89/Xt9iR/2H3B9NjsvL4KDlPFCcE4tejuJuFNNjQ4LcUXwP
AAKFm8LlAkCUoPz2+LkYUoI0Jv6HmGRxCh/lc6V8Co+dgeJdKNaLTUoTofiU
lBd+z706h3/IFfE4aD3SEMpTMsU89C6SdC/bskTSXLJ0fjonTSjF+Si25SSw
0RjyGRQv/N7/nGllSBfo6+luY2FnY8O0ZFowYpPZnCRGBoedLK36b5v0W31H
egcBkEV7a7/FEQszv3MYqcMCEpAFdKACNIEuMAJMYAlsgQNwAZ5gKQgAISAS
rAYckABSgBBkgVywGRSAIrAL7AVVoBY0gEbQAk6ADnAGXABXwA1wG9wHg0AC
RsFLMAXegxkIgvAQFaJBKpAWpA+ZQpYQC3KCPKFlUBAUCcVA8ZAAEkO50Bao
CCqFqqA6qBH6FToNXYCuQf3QI2gYmoDeQJ9hBKbAdFgDNoAXwSzYFfaDQ+BV
cDycDq+F8+GdcAVcDx+D2+EL8A34PiyBX8LTCEDIiBKijTARFuKOBCBRSBwi
RDYghUg5Uo+0IF1IL3IXkSCTyCcMDkPDMDBMjAPGBxOK4WDSMRswxZgqzFFM
O+YS5i5mGDOF+YalYtWxplh7rC82AhuPzcIWYMuxh7Ft2MvY+9hR7HscDqeE
M8TZ4nxwkbhE3DpcMW4/rhXXjevHjeCm8Xi8Ct4U74gPwLPxInwBvhJ/DH8e
fwc/iv9IIBO0CJYEL0IUQUDII5QTmgjnCHcIY4QZohxRn2hPDCByiTnEEmID
sYt4izhKnCHJkwxJjqQQUiJpM6mC1EK6TBoivSWTyTpkO/IKMp+8iVxBPk6+
Sh4mf6IoUEwo7pRoipiyk3KE0k15RHlLpVINqC7UKKqIupPaSL1IfUr9KEOT
MZPxleHKbJSplmmXuSPzSpYoqy/rKrtadq1suexJ2Vuyk3JEOQM5dzm23Aa5
arnTcgNy0/I0eQv5APkU+WL5Jvlr8uMKeAUDBU8FrkK+wiGFiwojNISmS3On
cWhbaA20y7RROo5uSPelJ9KL6L/Q++hTigqKixXDFLMVqxXPKkqUECUDJV+l
ZKUSpRNKD5Q+L9BY4LqAt2DHgpYFdxZ8UFZTdlHmKRcqtyrfV/6swlDxVElS
2a3SofJEFaNqorpCNUv1gOpl1Uk1upqDGketUO2E2mN1WN1EPUh9nfoh9Zvq
0xqaGt4aaRqVGhc1JjWVNF00EzXLNM9pTmjRtJy0+FplWue1XjAUGa6MZEYF
4xJjSltd20dbrF2n3ac9o2OoE6qTp9Oq80SXpMvSjdMt0+3RndLT0vPXy9Vr
1nusT9Rn6Sfo79Pv1f9gYGgQbrDNoMNg3FDZ0NdwrWGz4ZAR1cjZKN2o3uie
Mc6YZZxkvN/4tglsYm2SYFJtcssUNrUx5ZvuN+1fiF1ot1CwsH7hAJPCdGVm
MpuZw2ZKZsvM8sw6zF4t0lsUtWj3ot5F38ytzZPNG8wHLRQsllrkWXRZvLE0
seRYVlves6JaeVlttOq0er3YdDFv8YHFD61p1v7W26x7rL/a2NoIbVpsJmz1
bGNsa2wHWHRWIKuYddUOa+dmt9HujN0next7kf0J+78dmA5JDk0O40sMl/CW
NCwZcdRxZDvWOUqcGE4xTgedJM7azmzneudnLrouXJfDLmOuxq6JrsdcX7mZ
uwnd2tw+uNu7r3fv9kA8vD0KPfo8FTxDPas8n3rpeMV7NXtNeVt7r/Pu9sH6
+Pns9hnw1fDl+Db6Ti21Xbp+6SU/il+wX5Xfs2Umy4TLuvxh/6X+e/yHlusv
FyzvCAABvgF7Ap4EGgamB/62ArcicEX1iudBFkG5Qb3BtOA1wU3B70PcQkpC
BkONQsWhPWGyYdFhjWEfwj3CS8MlEYsi1kfciFSN5Ed2RuGjwqIOR02v9Fy5
d+VotHV0QfSDVYarslddW626Onn12TWya9hrTsZgY8JjmmK+sAPY9ezpWN/Y
mtgpjjtnH+cl14Vbxp3gOfJKeWNxjnGlcePxjvF74icSnBPKEyb57vwq/utE
n8TaxA9JAUlHkmaTw5NbUwgpMSmnBQqCJMGlVM3U7NT+NNO0gjRJun363vQp
oZ/wcAaUsSqjU0RHfzA3xUbireLhTKfM6syPWWFZJ7PlswXZN3NMcnbkjK31
WvvzOsw6zrqeXO3czbnD613X122ANsRu6NmouzF/4+gm701HN5M2J23+Pc88
rzTv3ZbwLV35Gvmb8ke2em9tLpApEBYMbHPYVrsds52/vW+H1Y7KHd8KuYXX
i8yLyou+FHOKr/9k8VPFT7M743b2ldiUHNiF2yXY9WC38+6jpfKla0tH9vjv
aS9jlBWWvdu7Zu+18sXltftI+8T7JBXLKjor9Sp3VX6pSqi6X+1W3VqjXrOj
5sN+7v47B1wOtNRq1BbVfj7IP/iwzruuvd6gvvwQ7lDmoecNYQ29P7N+bjys
erjo8NcjgiOSo0FHLzXaNjY2qTeVNMPN4uaJY9HHbv/i8UtnC7OlrlWpteg4
OC4+/uLXmF8fnPA70XOSdbLllP6pmjZaW2E71J7TPtWR0CHpjOzsP730dE+X
Q1fbb2a/HTmjfab6rOLZknOkc/nnZs+vPT/dndY9eSH+wkjPmp7BixEX711a
canvst/lq1e8rlzsde09f9Xx6plr9tdOX2dd77hhc6P9pvXNtt+tf2/rs+lr
v2V7q/O23e2u/iX95+4437lw1+PulXu+927cX36//0Hog4cD0QOSh9yH44+S
H71+nPl4ZnDTEHao8Inck/Kn6k/r/zD+o1ViIzk77DF881nws8ERzsjLPzP+
/DKa/5z6vHxMa6xx3HL8zITXxO0XK1+Mvkx7OTNZ8Jf8XzWvjF6d+tvl75tT
EVOjr4WvZ98Uv1V5e+Td4nc904HTT9+nvJ/5UPhR5ePRT6xPvZ/DP4/NZH3B
f6n4avy165vft6HZlNnZH7SJGSpLGPO6xIMXxxYnixhSweKempwqFjKC09gc
HoPJkIqY/5tOia0EoGMrAMqP5znUAr+/vuu2OYPAPxs8n4cooY8VSjXMc6n1
ALCmUX4XKnnnOPegEMYPe2AG8eJ4Qp4AHTWMz8viC+LR+QVcvoifKmDwBYz/
WtO/MvwPNt/nvGYW8bJFc32mpuUI+fEJIoZUpgsFbGlH7OS5ryOU9piRKhTx
xSkLGZbm5naozI+zspwrBVFQ7Yz9Y3b2rQEA+DIAvpbMzs7Uzc5+RXeBDALQ
Lf4PujHnQg==
      "], "RGB", "XYZ"], Interleaving -> True, MetaInformation -> 
    Association[
     "Exif" -> Association[
       "DateTime" -> 
        DateObject[{2017, 7, 11, 18, 44, 13.}, "Instant", "Gregorian", -5.], 
        "GPSDOP" -> 50., "GPSDateStamp" -> 
        DateObject[{2017, 7, 11}, "Day", "Gregorian", -5.], "GPSAltitudeRef" -> 
        "BelowSeaLevel", "GPSLongitudeRef" -> "West", "GPSLongitude" -> 
        Quantity[88.24766666666667, "AngularDegrees"], "GPSLatitudeRef" -> 
        "North", "GPSProcessingMethod" -> 
        "65 83 67 73 73 0 0 0 102 117 115 101 100", "GPSAltitude" -> 
        Quantity[0., "Meters"], "GPSVersionID" -> "2.20", "GPSImgDirection" -> 
        Quantity[222, "AngularDegrees"], "GPSTimeStamp" -> 
        TimeObject[{23, 44, 13.}, TimeZone -> -5.], "GPSImgDirectionRef" -> 
        "Magnetic direction", "GPSLatitude" -> 
        Quantity[40.03858333333333, "AngularDegrees"], "Model" -> "Pixel", 
        "ImageWidth" -> 4048, "ResolutionUnit" -> "inch", "YCbCrPositioning" -> 
        "Centered", "ImageLength" -> 3036, "YResolution" -> 72, "Orientation" -> 
        Association["CameraTopOrientation" -> Top, "Mirrored" -> False], 
        "Software" -> "HDR+ 1.0.147548766z", "ColorSpace" -> "RGBColor", 
        "FNumber" -> "f/2", "DateTimeDigitized" -> 
        DateObject[{2017, 7, 11, 18, 44, 13.}, "Instant", "Gregorian", -5.], 
        "SubjectDistanceRange" -> "Macro", "FocalLength" -> 
        Quantity[4.7, "Millimeters"], "ApertureValue" -> 2., "ExposureMode" -> 
        "Auto", "SubSecTimeDigitized" -> Quantity["709824", "Milliseconds"], 
        "PixelYDimension" -> 3036, "CustomRendered" -> "Custom process", 
        "MaxApertureValue" -> 2., "SceneCaptureType" -> "Standard", 
        "SceneType" -> "Directly photographed", "SubSecTimeOriginal" -> 
        Quantity["709824", "Milliseconds"], "Saturation" -> "Normal", 
        "ExposureProgram" -> "Auto", "Sharpness" -> "Normal", "WhiteBalance" -> 
        "Auto", "PixelXDimension" -> 4048, "ShutterSpeedValue" -> 5.91, 
        "SubSecTime" -> Quantity["709824", "Milliseconds"], "MeteringMode" -> 
        "Center weighted average", "DateTimeOriginal" -> 
        DateObject[{2017, 7, 11, 18, 44, 13.}, "Instant", "Gregorian", -5.], 
        "ComponentsConfiguration" -> "YCbCr", "SubjectDistance" -> 
        Quantity[0.87, "Meters"], "ExifVersion" -> "2.20", "FlashInfo" -> 
        Association[
         "FlashUsed" -> False, "FlashFiringStatus" -> 
          "No strobe return detection function", "FlashMode" -> 
          "Compulsory flash firing", "FlashFunctionPresent" -> True, 
          "RedEyeCorrection" -> False], "Contrast" -> "Normal", 
        "InteroperabilityIndex" -> "R98", "InteroperabilityVersion" -> "1.00",
         "ExposureBiasValue" -> Quantity[0., 
          IndependentUnit["exposure values"]], "BrightnessValue" -> 1.04, 
        "ISOSpeedRatings" -> 364, "SensingMethod" -> "One-chip color area", 
        "FlashpixVersion" -> "1.00", "ExposureTime" -> Quantity[
          Rational[1, 60], "Seconds"], "XResolution" -> 72, "Make" -> 
        "Google"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{500, 375},
  PlotRange->{{0, 500}, {0, 375}}]], "Output",
 CellChangeTimes->{
  3.708805766259864*^9},ExpressionUUID->"1a061811-2d5e-4773-a140-\
ced4c5cef727"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", "White"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088047570058804`*^9, 3.7088047609590793`*^9}, 
   3.708805037529831*^9},ExpressionUUID->"349743d9-87c5-4fed-9709-\
d4a054a4034f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[2016184889], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[2016184889]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1858464539][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1858464539][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1858464539][{1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1858464539][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1858464539][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1858464539][{2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1858464539][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1858464539][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1858464539][{3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1858464539][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1858464539][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1858464539][{4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1858464539][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1858464539][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1858464539][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1858464539]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1858464539][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1858464539][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1213008695], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1213008695]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   871878210][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210][{
                    1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    871878210][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   871878210][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210][{
                    2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    871878210][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   871878210][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210][{
                    3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    871878210][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   871878210][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210][{
                    4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    871878210][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   871878210][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 871878210]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[871878210][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[871878210][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[2034101976], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[2034101976]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293][{
                    1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    44570293][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293][{
                    2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    44570293][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293][{
                    3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    44570293][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293][{
                    4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    44570293][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 44570293]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][Null] -> 
             "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[44570293][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7088047613739777`*^9, 3.708804806953124*^9, {3.7088048598216515`*^9, 
   3.708804862792482*^9}, 3.7088049018915987`*^9, 3.7088049673310227`*^9, 
   3.7088050599365225`*^9},ExpressionUUID->"6fdaae58-aa28-4095-849c-\
917bb525deab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", "Black"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088047570058804`*^9, 3.7088047609590793`*^9}, {
   3.708804952437579*^9, 3.708804956905858*^9}, 
   3.70880502787936*^9},ExpressionUUID->"515131f2-5092-4114-8d69-\
ed1323359e3c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1856693699], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1856693699]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596][{
                    1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    61975596][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596][{
                    2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    61975596][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596][{
                    3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    61975596][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596][{
                    4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    61975596][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 61975596]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][Null] -> 
             "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[61975596][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[509903259], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[509903259]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   861096519][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519][{
                    1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    861096519][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   861096519][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519][{
                    2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    861096519][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   861096519][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519][{
                    3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    861096519][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   861096519][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519][{
                    4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    861096519][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   861096519][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 861096519]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[861096519][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[861096519][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[846005168], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[846005168]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1923183032][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1923183032][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1923183032][
                    {1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1923183032][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1923183032][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1923183032][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1923183032][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1923183032][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1923183032][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1923183032][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1923183032][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1923183032][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1923183032][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1923183032][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1923183032][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1923183032]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1923183032][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1923183032][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[
           TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{3.708804958439189*^9, 
  3.7088050609374747`*^9},ExpressionUUID->"6147f597-c785-4905-b7b2-\
30a0c0c3f3cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", "White"}], "]"}]], "Input",
 CellChangeTimes->{{3.7088047570058804`*^9, 3.7088047609590793`*^9}, {
   3.708804952437579*^9, 3.708804956905858*^9}, 3.70880502787936*^9, {
   3.708805074871391*^9, 
   3.7088050782257633`*^9}},ExpressionUUID->"d739dc5d-5478-4ae4-9064-\
a7ed9a82cd52"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[762831314], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[762831314]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1052414982][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1052414982][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1052414982][{1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1052414982][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1052414982][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1052414982][{2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1052414982][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1052414982][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1052414982][{3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1052414982][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1052414982][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1052414982][{4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1052414982][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1052414982][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1052414982][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1052414982]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1052414982][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1052414982][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[511616607], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[511616607]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   350975335][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335][{
                    1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    350975335][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   350975335][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335][{
                    2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    350975335][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   350975335][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335][{
                    3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    350975335][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   350975335][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335][{
                    4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    350975335][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   350975335][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 350975335]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[350975335][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[350975335][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1411437210], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1411437210]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2088088470][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   2088088470][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2088088470][{1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    2088088470][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   2088088470][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2088088470][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    2088088470][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   2088088470][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2088088470][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    2088088470][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   2088088470][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2088088470][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    2088088470][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   2088088470][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2088088470][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2088088470]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2088088470][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2088088470][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{
  3.708805079912942*^9},ExpressionUUID->"2acda811-aed3-4c96-b1df-\
873ebd0107f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", 
   RowBox[{"Hue", "[", "0", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7088051286534805`*^9, 
  3.7088051366232224`*^9}},ExpressionUUID->"a79c1212-16b9-4077-a6fe-\
ce364fdb577d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[326225129], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[326225129]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1412364153][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1412364153][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1412364153][{1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1412364153][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1412364153][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1412364153][{2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1412364153][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1412364153][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1412364153][{3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1412364153][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1412364153][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1412364153][{4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1412364153][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1412364153][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1412364153][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1412364153]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1412364153][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1412364153][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1467229525], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1467229525]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   377716974][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974][{
                    1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    377716974][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   377716974][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974][{
                    2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    377716974][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   377716974][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974][{
                    3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    377716974][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   377716974][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974][{
                    4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    377716974][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   377716974][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 377716974]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[377716974][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[377716974][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1373035457], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1373035457]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1080683977][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1080683977][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1080683977][{1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1080683977][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1080683977][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1080683977][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1080683977][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1080683977][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1080683977][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1080683977][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1080683977][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1080683977][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1080683977][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1080683977][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1080683977][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1080683977]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1080683977][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1080683977][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{
  3.708805138025513*^9},ExpressionUUID->"41a20889-c0c3-4a85-b536-\
f389ebfbee6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", 
   RowBox[{"Hue", "[", 
    RowBox[{"0", ",", "0.5", ",", "0.4"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7088051286534805`*^9, 
  3.7088052145229797`*^9}},ExpressionUUID->"9f82dd1d-78fd-49dc-a198-\
95eec7286741"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1021877435], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1021877435]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1187462516][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1187462516][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1187462516][{1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1187462516][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1187462516][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1187462516][{2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1187462516][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1187462516][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1187462516][{3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1187462516][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["128"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1187462516][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1187462516][{4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1187462516][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["102"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1187462516][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1187462516][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1187462516]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1187462516][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1187462516][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1364593256], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1364593256]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   752065162][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162][{
                    1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    752065162][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   752065162][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162][{
                    2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    752065162][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   752065162][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162][{
                    3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    752065162][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["128"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   752065162][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162][{
                    4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    752065162][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["102"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   752065162][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 752065162]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[752065162][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[752065162][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1703575202], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1703575202]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1449147606][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1449147606][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1449147606][{1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1449147606][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1449147606][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1449147606][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1449147606][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1449147606][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1449147606][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1449147606][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["128"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1449147606][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1449147606][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1449147606][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["102"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1449147606][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1449147606][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1449147606]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1449147606][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1449147606][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{{3.7088051466594577`*^9, 
  3.7088052166248026`*^9}},ExpressionUUID->"ce467809-983b-49ae-a916-\
83d683fc387c"]
}, Open  ]],

Cell["With ColorSetter[]:", "Text",
 CellChangeTimes->{{3.7088058575775347`*^9, 
  3.708805861798433*^9}},ExpressionUUID->"f90af7d7-0f7f-48da-8337-\
ab0142ee8c19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChangeLights", "[", 
  RowBox[{"All", ",", 
   RowBox[{"First", "[", 
    ColorSetterBox[RGBColor[1., 1., 0.], "Swatch"], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7088057990055494`*^9, 
  3.7088059226067476`*^9}},ExpressionUUID->"244ee7ad-1463-4cb0-b914-\
7ba477374bc6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1808286289], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1808286289]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1039331491][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1039331491][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/on", 
                    Style[
                    "/lights/1/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1039331491][{1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1039331491][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1039331491][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/1/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/hue", 
                    Style[
                    "/lights/1/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1039331491][{2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1039331491][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["10922"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1039331491][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/1/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/sat", 
                    Style[
                    "/lights/1/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1039331491][{3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1039331491][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1039331491][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/1/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/1/state/bri", 
                    Style[
                    "/lights/1/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1039331491][{4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1039331491][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1039331491][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/1/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1039331491][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1039331491]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1039331491][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1039331491][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[1756500122], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[1756500122]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418][{
                    All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   949278418][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/on", 
                    Style[
                    "/lights/2/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418][{
                    1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    949278418][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   949278418][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/2/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/hue", 
                    Style[
                    "/lights/2/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418][{
                    2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    949278418][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["10922"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   949278418][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/2/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/sat", 
                    Style[
                    "/lights/2/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418][{
                    3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    949278418][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   949278418][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/2/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/2/state/bri", 
                    Style[
                    "/lights/2/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418][{
                    4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    949278418][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   949278418][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/2/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 949278418]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[949278418][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[949278418][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )], ",", 
   TemplateBox[{TagBox[
      DynamicModuleBox[{
       TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
        Data`UnorderedAssociation[
         "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], "Shape" -> 
          TypeSystem`PackageScope`HeaderShape[
            Association[{All, "success"} -> 2], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association["success" -> TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
                    TypeSystem`PackageScope`UnknownShape]], 1, {
                  All, "success"}]]]], 4, {}]], "InitialData" -> 
          TypeSystem`PackageScope`CacheHandle[355602665], "Type" -> 
          TypeSystem`Vector[
            TypeSystem`Struct[{"success"}, {
              TypeSystem`Assoc[
               TypeSystem`Atom[String], TypeSystem`AnyType, 1]}], 4], 
          "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
          TypeSystem`PackageScope`CacheHandle[355602665]], 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
             Style[
              Grid[{{
                 Item[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"success\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"success\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1183321424][{All, "success"}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1183321424][
                    GeneralUtilities`Slice[All, "success"]], "Mouse"], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Center, Baseline}], SpanFromLeft}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/on", 
                    Style[
                    "/lights/3/state/on", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1183321424][{1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1183321424][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1183321424][
                    GeneralUtilities`Slice[1, 
                    Key["success"], 
                    Key["/lights/3/state/on"]]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/hue", 
                    Style[
                    "/lights/3/state/hue", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1183321424][{2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1183321424][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["10922"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1183321424][
                    GeneralUtilities`Slice[2, 
                    Key["success"], 
                    Key["/lights/3/state/hue"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/sat", 
                    Style[
                    "/lights/3/state/sat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1183321424][{3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1183321424][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1183321424][
                    GeneralUtilities`Slice[3, 
                    Key["success"], 
                    Key["/lights/3/state/sat"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}, {
                 Item[
                  Pane[
                   Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["/lights/3/state/bri", 
                    Style[
                    "/lights/3/state/bri", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1183321424][{4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1183321424][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                   ImageSize -> {{182.40000000000003`, Full}, Automatic}], 
                  Background -> GrayLevel[0.95], 
                  Alignment -> {Left, Baseline}], 
                 Pane[
                  Annotation[
                   RawBoxes["254"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   1183321424][
                    GeneralUtilities`Slice[4, 
                    Key["success"], 
                    Key["/lights/3/state/bri"]]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                   MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                   MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                 FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
               Dividers -> All, FrameStyle -> GrayLevel[0.85], 
               BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
              LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
              False, ShowAutoStyles -> False]], 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
           TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
          Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
              Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
              
              Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed,
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                  TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                  TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1183321424][
                  TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                 Not[
                  FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                 TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
              TypeSystem`SparseGrid[
               TypeSystem`H["(data no longer present)"]], 
              If[GeneralUtilities`$DebugMode, 
               Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                 TypeSystem`NestedGrid`PackagePrivate`formatState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
          DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`alignBar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`Pathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1183321424]]]], 
          TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
          Dynamic[
           Replace[
            MouseAnnotation[Null], {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1183321424][
              Null] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1183321424][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                Blank[]]] :> (
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 14}]}, 
       DynamicBox[
        ToBoxes[
         Column[
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
           TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
            TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
            TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
             TypeSystem`NestedGrid`PackagePrivate`alignBar[
             TypeSystem`NestedGrid`PackagePrivate`$state$$][
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
          If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
            0, {{}, {0, 0.05, 0}}]], StandardForm], 
        ImageSizeCache -> {276., {98., 107.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
       TypeSystem`NestedGrid`PackagePrivate`deleteState[
        TypeSystem`NestedGrid`PackagePrivate`$state$$], 
       DynamicModuleValues :> {}, Initialization :> 
       Block[{$ContextPath = $ContextPath}, 
         Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("Dataset[<>]"& )]}], "}"}]], "Output",
 CellChangeTimes->{{3.7088058719479556`*^9, 
  3.708805925022855*^9}},ExpressionUUID->"85e9dab0-7e50-4425-ad84-\
462a86417f63"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{2032, 1059},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.5 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (March 13, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 164, 3, 134, "Title", "ExpressionUUID" -> \
"0fe64235-a6a3-4d56-9c27-bf96ba3f9f99"],
Cell[747, 27, 605, 15, 46, "Text", "ExpressionUUID" -> \
"ce0ea48e-1879-4afc-92aa-dcccfcadc450"],
Cell[CellGroupData[{
Cell[1377, 46, 357, 6, 46, "Input", "ExpressionUUID" -> \
"87d838e0-3d3f-464a-a8b5-871f7631244a"],
Cell[1737, 54, 180, 3, 46, "Output", "ExpressionUUID" -> \
"ef5dc7a2-ec28-440a-bd51-d0169a307474"]
}, Open  ]],
Cell[1932, 60, 187, 3, 46, "Text", "ExpressionUUID" -> \
"6e5b60d7-31a5-45a4-bd60-a09024e94e1f"],
Cell[CellGroupData[{
Cell[2144, 67, 382, 8, 46, "Input", "ExpressionUUID" -> \
"8ef69b69-66cb-4aaa-b320-3138c7224970"],
Cell[2529, 77, 290, 5, 46, "Output", "ExpressionUUID" -> \
"950720af-f9a0-4580-95ab-c6ec4c141c70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2856, 87, 165, 3, 51, "Subsubsection", "ExpressionUUID" -> \
"515b9079-776e-486f-914b-f4a2d6efca5d"],
Cell[3024, 92, 347, 7, 46, "Text", "ExpressionUUID" -> \
"63892836-02bf-4349-802b-9013fa3d8f91"],
Cell[CellGroupData[{
Cell[3396, 103, 1052, 24, 163, "Input", "ExpressionUUID" -> \
"b3d6b5c7-b4dc-4211-a8fc-0500d7773a1c"],
Cell[4451, 129, 520, 11, 50, "Output", "ExpressionUUID" -> \
"7097ee6e-9f77-4766-9167-6daf40531e42"]
}, Open  ]],
Cell[4986, 143, 481, 10, 105, "Input", "ExpressionUUID" -> \
"486cd1ec-6941-48e2-9d7d-f022e867dd9e"],
Cell[CellGroupData[{
Cell[5492, 157, 234, 5, 46, InheritFromParent, "ExpressionUUID" -> \
"1b965e80-c8df-4516-8bbe-8c0e68cfaae5"],
Cell[5729, 164, 179, 3, 46, "Output", "ExpressionUUID" -> \
"be903305-e459-4044-b874-c8865858de72"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[5957, 173, 163, 3, 51, "Subsubsection", "ExpressionUUID" -> \
"cb3ff420-8038-4ece-9398-e46ff5958e32"],
Cell[6123, 178, 193, 3, 46, "Text", "ExpressionUUID" -> \
"1cf44131-b2c3-4950-a5db-4753596a0843"],
Cell[CellGroupData[{
Cell[6341, 185, 366, 9, 46, "Input", "ExpressionUUID" -> \
"02d6099b-253e-48d1-9072-60d61718f67e"],
Cell[6710, 196, 281, 5, 46, "Output", "ExpressionUUID" -> \
"b5657def-60b0-4c56-964a-07b430609c6a"]
}, Open  ]],
Cell[7006, 204, 544, 12, 46, "Input", "ExpressionUUID" -> \
"647c8174-aee7-46e5-83cb-494ebe7a239c"],
Cell[CellGroupData[{
Cell[7575, 220, 274, 6, 46, "Input", "ExpressionUUID" -> \
"c40aec87-3e19-4507-901a-2e5191d0bcec"],
Cell[7852, 228, 70661, 1455, 230, "Output", "ExpressionUUID" -> \
"8643f62f-95e6-43b4-b530-a3d5c0537409"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78550, 1688, 229, 5, 46, "Input", "ExpressionUUID" -> \
"81bec261-e2e9-4ff6-9383-6c6ea3ae9f12"],
Cell[78782, 1695, 9726, 174, 160, "Output", "ExpressionUUID" -> \
"df1a9f44-2ce6-4cec-8531-b0920c0dd587"]
}, Open  ]],
Cell[88523, 1872, 493, 13, 46, "Input", "ExpressionUUID" -> \
"7351b627-4e5b-4055-9d00-f1fa0809563d"],
Cell[CellGroupData[{
Cell[89041, 1889, 197, 4, 46, "Input", "ExpressionUUID" -> \
"c37b3d8b-326f-4b25-b549-43295f3f3d75"],
Cell[89241, 1895, 46628, 917, 694, "Output", "ExpressionUUID" -> \
"8c341020-f682-4cf9-b998-7c9fb4281aa6"]
}, Open  ]],
Cell[135884, 2815, 591, 13, 46, "Input", "ExpressionUUID" -> \
"4c91b894-2aba-47b0-b95c-045e46257edc"],
Cell[136478, 2830, 1835, 39, 250, "Input", "ExpressionUUID" -> \
"32cfab9b-566e-4465-ba44-c8107d260002"],
Cell[CellGroupData[{
Cell[138338, 2873, 241, 5, 46, "Input", "ExpressionUUID" -> \
"c9aa60c9-4b7e-48d2-bb02-c8b48af2f996"],
Cell[138582, 2880, 17742, 335, 230, "Output", "ExpressionUUID" -> \
"41e36a84-262a-4b57-b734-f26725f8025b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[156361, 3220, 316, 6, 46, "Input", "ExpressionUUID" -> \
"1bcefed5-1d10-4c3f-a7f1-e43af44398e4"],
Cell[156680, 3228, 17635, 333, 230, "Output", "ExpressionUUID" -> \
"704e00fc-6888-4b92-893c-7c4b773ad144"]
}, Open  ]],
Cell[174330, 3564, 1454, 36, 135, "Input", "ExpressionUUID" -> \
"59423677-bce2-48fa-97d9-4be540d2f4ec"],
Cell[CellGroupData[{
Cell[175809, 3604, 296, 6, 46, "Input", "ExpressionUUID" -> \
"59dce346-4016-41d4-8108-1ace1887a945"],
Cell[176108, 3612, 17938, 340, 230, "Output", "ExpressionUUID" -> \
"8c5d47c9-c5d8-4a93-9d75-9f1f9e09917a"]
}, Open  ]],
Cell[194061, 3955, 940, 23, 48, "Input", "ExpressionUUID" -> \
"1bdd8d5c-8fc0-43fa-8cfb-7d4f24f6d9fd"],
Cell[CellGroupData[{
Cell[195026, 3982, 247, 5, 46, "Input", "ExpressionUUID" -> \
"5f0fd19b-9b35-4e0d-a8ed-d5579c19bb85"],
Cell[195276, 3989, 55058, 1039, 230, "Output", "ExpressionUUID" -> \
"013a994a-45fe-4a3a-a995-32cacbe44718"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250371, 5033, 302, 6, 46, "Input", "ExpressionUUID" -> \
"3f51ebb0-3b40-45d0-86be-e98c9ea3bccf"],
Cell[250676, 5041, 55053, 1041, 230, "Output", "ExpressionUUID" -> \
"83e7a78c-3a66-4369-9434-466dd63ebe81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[305766, 6087, 334, 9, 46, "Input", "ExpressionUUID" -> \
"1f3547cd-1dad-412b-9d75-40d6fbca51bc"],
Cell[306103, 6098, 520897, 8542, 586, "Output", "ExpressionUUID" -> \
"1a061811-2d5e-4773-a140-ced4c5cef727"]
}, Open  ]],
Cell[CellGroupData[{
Cell[827037, 14645, 247, 5, 46, "Input", "ExpressionUUID" -> \
"349743d9-87c5-4fed-9709-d4a054a4034f"],
Cell[827287, 14652, 54828, 1033, 230, "Output", "ExpressionUUID" -> \
"6fdaae58-aa28-4095-849c-917bb525deab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[882152, 15690, 296, 6, 46, "Input", "ExpressionUUID" -> \
"515131f2-5092-4114-8d69-ed1323359e3c"],
Cell[882451, 15698, 54702, 1032, 230, "Output", "ExpressionUUID" -> \
"6147f597-c785-4905-b7b2-30a0c0c3f3cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[937190, 16735, 348, 7, 46, "Input", "ExpressionUUID" -> \
"d739dc5d-5478-4ae4-9064-a7ed9a82cd52"],
Cell[937541, 16744, 54823, 1037, 230, "Output", "ExpressionUUID" -> \
"2acda811-aed3-4c96-b1df-873ebd0107f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[992401, 17786, 251, 6, 46, "Input", "ExpressionUUID" -> \
"a79c1212-16b9-4077-a6fe-ce364fdb577d"],
Cell[992655, 17794, 54831, 1037, 230, "Output", "ExpressionUUID" -> \
"41a20889-c0c3-4a85-b536-f389ebfbee6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1047523, 18836, 290, 7, 69, "Input", "ExpressionUUID" -> \
"9f82dd1d-78fd-49dc-a198-95eec7286741"],
Cell[1047816, 18845, 54861, 1037, 345, "Output", "ExpressionUUID" -> \
"ce467809-983b-49ae-a916-83d683fc387c"]
}, Open  ]],
Cell[1102692, 19885, 163, 3, 69, "Text", "ExpressionUUID" -> \
"f90af7d7-0f7f-48da-8337-ab0142ee8c19"],
Cell[CellGroupData[{
Cell[1102880, 19892, 301, 7, 100, "Input", "ExpressionUUID" -> \
"244ee7ad-1463-4cb0-b914-7ba477374bc6"],
Cell[1103184, 19901, 54869, 1037, 345, "Output", "ExpressionUUID" -> \
"85e9dab0-7e50-4425-ad84-462a86417f63"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

